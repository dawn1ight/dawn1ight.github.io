<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024“国城杯”⽹络安全挑战赛 Crypto WriteUp</title>
      <link href="/post/62963/"/>
      <url>/post/62963/</url>
      
        <content type="html"><![CDATA[<h1 id="2024国城杯网络安全挑战赛-crypto-writeup"><a class="markdownIt-Anchor" href="#2024国城杯网络安全挑战赛-crypto-writeup"></a> 2024“国城杯”⽹络安全挑战赛 Crypto WriteUp</h1><h2 id="curve"><a class="markdownIt-Anchor" href="#curve"></a> Curve</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sagemath</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    (x1, y1) = P</span><br><span class="line">    (x2, y2) = Q</span><br><span class="line"></span><br><span class="line">    x3 = (x1*y2 + y1*x2) * inverse(<span class="number">1</span> + d*x1*x2*y1*y2, p) % p</span><br><span class="line">    y3 = (y1*y2 - a*x1*x2) * inverse(<span class="number">1</span> - d*x1*x2*y1*y2, p) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, P</span>):</span><br><span class="line">    Q = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            Q = add(Q, P)</span><br><span class="line">        P = add(P, P)</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">gx=bytes_to_long(<span class="string">b&#x27;D0g3xGC&#123;*****************&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">PR.&lt;y&gt;=PolynomialRing(Zmod(p))</span><br><span class="line">f=(d*gx^<span class="number">2</span>-<span class="number">1</span>)*y^<span class="number">2</span>+(<span class="number">1</span>-a*gx^<span class="number">2</span>)</span><br><span class="line">gy=<span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (a*gx^<span class="number">2</span>+gy^<span class="number">2</span>)%p==(<span class="number">1</span>+d*gx^<span class="number">2</span>*gy^<span class="number">2</span>)%p</span><br><span class="line"></span><br><span class="line">G=(gx,gy)</span><br><span class="line"></span><br><span class="line">eG = mul(e, G)</span><br><span class="line"><span class="built_in">print</span>(eG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#eG = (34120664973166619886120801966861368419497948422807175421202190709822232354059, 11301243831592615312624457443883283529467532390028216735072818875052648928463)</span></span><br></pre></td></tr></table></figure><p>原题：<a href="https://github.com/Ch3mtr4ils/Ch3mtr4ils.github.io/blob/6d773859f58bc4d47bb55278da1ee473993744da/2024/03/05/ECC%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E6%9B%B2%E7%BA%BF/index.html#L233">Ch3mtr4ils.github.io/2024/03/05/ECC中的常见曲线/index.html at 6d773859f58bc4d47bb55278da1ee473993744da · Ch3mtr4ils/Ch3mtr4ils.github.io</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">eG = (<span class="number">34120664973166619886120801966861368419497948422807175421202190709822232354059</span>, <span class="number">11301243831592615312624457443883283529467532390028216735072818875052648928463</span>)</span><br><span class="line">F = GF(p)</span><br><span class="line"></span><br><span class="line">A = (<span class="number">2</span> * (a + d)) / (a - d)</span><br><span class="line">B = <span class="number">4</span> / (a - d)</span><br><span class="line">a = (<span class="number">3</span> - A ^ <span class="number">2</span>) / (<span class="number">3</span> * B ^ <span class="number">2</span>)</span><br><span class="line">b = (<span class="number">2</span> * A ^ <span class="number">3</span> - <span class="number">9</span> * A) / (<span class="number">27</span> * B ^ <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TEd_to_ECC</span>(<span class="params">x, y</span>):</span><br><span class="line">    x1 = F(<span class="number">1</span> + y) / F(<span class="number">1</span> - y)</span><br><span class="line">    y1 = F(x1) / F(x)</span><br><span class="line">    u = F(x1) / F(B) + F(A) / F(<span class="number">3</span> * B)</span><br><span class="line">    v = F(y1) / F(B)</span><br><span class="line">    <span class="keyword">return</span> (u, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ECC_to_TEd</span>(<span class="params">x, y</span>):</span><br><span class="line">    x1 = F(B) * F(x) - F(A) / F(<span class="number">3</span>)</span><br><span class="line">    y1 = F(B) * F(y)</span><br><span class="line">    u = F(x1) / F(y1)</span><br><span class="line">    v = (F(x1) - F(<span class="number">1</span>)) / (F(x1) + F(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> (u, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">E = EllipticCurve(F, [a, b])</span><br><span class="line">o = E.order()</span><br><span class="line">eG = E(TEd_to_ECC(eG[<span class="number">0</span>], eG[<span class="number">1</span>]))</span><br><span class="line">t = inverse(e, o)</span><br><span class="line">G = ECC_to_TEd((t * eG)[<span class="number">0</span>], (t * eG)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(G[<span class="number">0</span>])))</span><br><span class="line"><span class="comment"># D0g3xGC&#123;SOlvE_The_Edcurv3&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ez_sign"><a class="markdownIt-Anchor" href="#ez_sign"></a> EZ_sign</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> random,os</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;D0g3xGA&#123;***************&#125;&#x27;</span></span><br><span class="line">msg = <span class="string">b&#x27;e = ?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">pub, pri, k</span>):</span><br><span class="line">    (p,q,g,y) = pub</span><br><span class="line">    x = pri</span><br><span class="line">    r = <span class="built_in">int</span>(powmod(g, k, p) % q)</span><br><span class="line">    H = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">    s = <span class="built_in">int</span>((H + r * x) * invert(k, q) % q)</span><br><span class="line">    <span class="keyword">return</span> (H,r,s)</span><br><span class="line"></span><br><span class="line">k1 = getPrime(<span class="number">64</span>)</span><br><span class="line">k2 = k1 ** <span class="number">2</span></span><br><span class="line">pri = bytes_to_long(msg)</span><br><span class="line">a = <span class="number">149328490045436942604988875802116489621328828898285420947715311349436861817490291824444921097051302371708542907256342876547658101870212721747647670430302669064864905380294108258544172347364992433926644937979367545128905469215614628012983692577094048505556341118385280805187867314256525730071844236934151633203</span></span><br><span class="line">b = <span class="number">829396411171540475587755762866203184101195238207</span></span><br><span class="line">g = <span class="number">87036604306839610565326489540582721363203007549199721259441400754982765368067012246281187432501490614633302696667034188357108387643921907247964850741525797183732941221335215366182266284004953589251764575162228404140768536534167491117433689878845912406615227673100755350290475167413701005196853054828541680397</span></span><br><span class="line">y = <span class="number">97644672217092534422903769459190836176879315123054001151977789291649564201120414036287557280431608390741595834467632108397663276781265601024889217654490419259208919898180195586714790127650244788782155032615116944102113736041131315531765220891253274685646444667344472175149252120261958868249193192444916098238</span></span><br><span class="line"></span><br><span class="line">pub = (a, b, g, y)</span><br><span class="line"></span><br><span class="line">H1, r1, s1 = sign(pub, pri, k1)</span><br><span class="line"></span><br><span class="line">H2, r2, s2 = sign(pub, pri, k2)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = powmod(bytes_to_long(flag), e, n)</span><br><span class="line"></span><br><span class="line">C = p**<span class="number">2</span> + q**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;(H1, r1, s1) = <span class="subst">&#123;H1&#125;</span>, <span class="subst">&#123;r1&#125;</span>, <span class="subst">&#123;s1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;(H2, r2, s2) = <span class="subst">&#123;H2&#125;</span>, <span class="subst">&#123;r2&#125;</span>, <span class="subst">&#123;s2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(H1, r1, s1) = 659787401883545685817457221852854226644541324571, 334878452864978819061930997065061937449464345411, 282119793273156214497433603026823910474682900640</span></span><br><span class="line"><span class="string">(H2, r2, s2) = 156467414524100313878421798396433081456201599833, 584114556699509111695337565541829205336940360354, 827371522240921066790477048569787834877112159142</span></span><br><span class="line"><span class="string">c = 18947793008364154366082991046877977562448549186943043756326365751169362247521</span></span><br><span class="line"><span class="string">C = 179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>首先要解出e的值</p><p>由题目已知</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><msub><mi>k</mi><mn>1</mn></msub><mo>≡</mo><msub><mi>H</mi><mn>1</mn></msub><mo>+</mo><mi>x</mi><msub><mi>r</mi><mn>1</mn></msub><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">s_1k_1\equiv H_1+xr_1 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub><msubsup><mi>k</mi><mn>1</mn><mn>2</mn></msubsup><mo>≡</mo><msub><mi>H</mi><mn>2</mn></msub><mo>+</mo><mi>x</mi><msub><mi>r</mi><mn>2</mn></msub><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">s_2k_1^2 \equiv H_2+xr_2 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></p><p>上面的式子乘<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">r_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,下面式子乘<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">r_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub><msub><mi>s</mi><mn>1</mn></msub><msub><mi>k</mi><mn>1</mn></msub><mo>≡</mo><msub><mi>h</mi><mn>1</mn></msub><msub><mi>r</mi><mn>2</mn></msub><mo>+</mo><mi>x</mi><msub><mi>r</mi><mn>1</mn></msub><msub><mi>r</mi><mn>2</mn></msub><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">r_2s_1k_1\equiv h_1r_2+xr_1r_2 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub><msub><mi>s</mi><mn>2</mn></msub><msubsup><mi>k</mi><mn>1</mn><mn>2</mn></msubsup><mo>≡</mo><msub><mi>h</mi><mn>2</mn></msub><msub><mi>r</mi><mn>1</mn></msub><mo>+</mo><mi>x</mi><msub><mi>r</mi><mn>1</mn></msub><msub><mi>r</mi><mn>2</mn></msub><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">r_1s_2k_1^2\equiv h_2r_1+xr_1r_2 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></p><p>两式相减得：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub><msub><mi>s</mi><mn>2</mn></msub><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><msub><mi>H</mi><mn>1</mn></msub><msub><mi>r</mi><mn>2</mn></msub><mo>−</mo><msub><mi>r</mi><mn>2</mn></msub><msub><mi>s</mi><mn>1</mn></msub><mi>k</mi><mo>−</mo><msub><mi>r</mi><mn>1</mn></msub><msub><mi>H</mi><mn>2</mn></msub><mo>≡</mo><mn>0</mn><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">r_1s_2k^2+H_1r_2-r_2s_1k-r_1H_2\equiv 0 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.964108em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></p><p>解模方程</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">H1 = <span class="number">659787401883545685817457221852854226644541324571</span></span><br><span class="line">r1 = <span class="number">334878452864978819061930997065061937449464345411</span></span><br><span class="line">s1 = <span class="number">282119793273156214497433603026823910474682900640</span></span><br><span class="line">H2 = <span class="number">156467414524100313878421798396433081456201599833</span></span><br><span class="line">r2 = <span class="number">584114556699509111695337565541829205336940360354</span></span><br><span class="line">s2 = <span class="number">827371522240921066790477048569787834877112159142</span></span><br><span class="line">q = <span class="number">829396411171540475587755762866203184101195238207</span></span><br><span class="line"></span><br><span class="line">P.&lt;k&gt; = PolynomialRing(Zmod(q))</span><br><span class="line">f = r1*s2*k^<span class="number">2</span>+H1*r2-r2*s1*k-r1*H2</span><br><span class="line">roots_with_multiplicities = f.roots(multiplicities=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Roots with multiplicities:&quot;</span>, roots_with_multiplicities)</span><br></pre></td></tr></table></figure><p>得到<code>k1=9455554284687443083</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">k1 = <span class="number">9455554284687443083</span></span><br><span class="line">x = ((k1*s1 - H1)*gmpy2.invert(r1,q)) % q</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(x))</span><br></pre></td></tr></table></figure><p><code>b'e = 44519'</code></p><p>解$$p<sup>2+q</sup>2=C$$方程</p><p>不能用sagemath的two_squares()函数（虽然它确实很快，但只有一组解，而且这组解不是我们要的解）</p><p>用sympy库的cornacchia函数，可以得到方程<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">ax^2+by^2=m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>所有的正整数解（要求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x,y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>互质）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.solvers.diophantine.diophantine <span class="keyword">import</span> cornacchia</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">m = <span class="number">179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line">solutions = cornacchia(a, b, m)</span><br><span class="line"><span class="built_in">print</span>(solutions)</span><br></pre></td></tr></table></figure><p>得到</p><p>{(366147916608975462877987617004979518093, 212200170463729600479653952183489384503), (399661297475592982293435778542228355087, 139154793241392602890445837550424516283), (302951519846417861008714825074296492447, 295488723650623654106370451762393175957), (347432454257893250496407965506777649463, 241627603783727624224706687817893681267), (411800265284112683889770914584779351243, 97538457512222161659361018727247943103), (418433117922332896279236283423489909057, 63300355510251304584114633515453587403), (385935421767853150067085999079428269993, 173629085716646134993835981317457288147), (422854698361903371427733980562270024707, 16944416637726545286802875167254662553)}</p><p>得到全部八组解</p><p>筛选出两个都是素数的解</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">L=[(<span class="number">366147916608975462877987617004979518093</span>, <span class="number">212200170463729600479653952183489384503</span>), (<span class="number">399661297475592982293435778542228355087</span>, <span class="number">139154793241392602890445837550424516283</span>), (<span class="number">302951519846417861008714825074296492447</span>, <span class="number">295488723650623654106370451762393175957</span>), (<span class="number">347432454257893250496407965506777649463</span>, <span class="number">241627603783727624224706687817893681267</span>), (<span class="number">411800265284112683889770914584779351243</span>, <span class="number">97538457512222161659361018727247943103</span>), (<span class="number">418433117922332896279236283423489909057</span>, <span class="number">63300355510251304584114633515453587403</span>), (<span class="number">385935421767853150067085999079428269993</span>, <span class="number">173629085716646134993835981317457288147</span>), (<span class="number">422854698361903371427733980562270024707</span>, <span class="number">16944416637726545286802875167254662553</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">    (p,q)=i</span><br><span class="line">    <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q):</span><br><span class="line">        <span class="built_in">print</span>(p,q)</span><br></pre></td></tr></table></figure><p>找到</p><p><code>302951519846417861008714825074296492447</code></p><p><code>295488723650623654106370451762393175957</code></p><p>这组，就是我们要的解，然后解RSA</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">44519</span></span><br><span class="line">c = <span class="number">18947793008364154366082991046877977562448549186943043756326365751169362247521</span></span><br><span class="line">p = <span class="number">302951519846417861008714825074296492447</span> </span><br><span class="line">q = <span class="number">295488723650623654106370451762393175957</span></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)  </span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>比赛之后去问了一下出题人，怎么找到<code>179093209181929149953346613617854206675976823277412565868079070299728290913658</code>这个数的，平方和有8组不同的解……</p><p>出题人答复：以前线下碰到被坑了，所以拿来出题了。。</p><h2 id="babyrsa"><a class="markdownIt-Anchor" href="#babyrsa"></a> BabyRsa</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;D0g3xGC&#123;****************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">p, q</span>):</span><br><span class="line">    public_key = p*p*q</span><br><span class="line">    e = public_key</span><br><span class="line">    n = p*q</span><br><span class="line">    phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    private_key = inverse(e,phi_n)</span><br><span class="line">    <span class="keyword">return</span> public_key,private_key,e</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">N,d,e = gen_key(p,q)</span><br><span class="line"></span><br><span class="line">c = gmpy2.powmod(bytes_to_long(flag),e,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span></span><br><span class="line"><span class="string">d = 58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span></span><br><span class="line"><span class="string">c = 82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>在这里，我们使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>作为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>的值，并给出了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>，但这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>只是实际<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>的一部分，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo>=</mo><mi>k</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">D = kd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">d</span></span></span></span>。</p><p>因此，我们有： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>d</mi><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.4444444444444444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N d \equiv 1 \pmod{\varphi(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444444444444444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p><p>对于任意正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a &gt; 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，我们可以取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>N</mi><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">a^{Nd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span> 并对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 取模，得到： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>N</mi><mi>d</mi></mrow></msup><mo>≡</mo><msup><mi>a</mi><mrow><mn>1</mn><mo>+</mo><msub><mi>k</mi><mn>1</mn></msub><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mspace></mspace><mspace width="0.4444444444444444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{Nd} \equiv a^{1+k_1 \varphi(n)} \pmod{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444444444444444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>根据欧拉定理，知道： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.4444444444444444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{\varphi(n)} \equiv 1 \pmod{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444444444444444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>由于 1的任意次方都等于 1，我们可以得到： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>N</mi><mi>d</mi></mrow></msup><mo>≡</mo><mi>a</mi><mspace></mspace><mspace width="0.4444444444444444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333333333333333em"/><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{Nd} \equiv a \pmod{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444444444444444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.3333333333333333em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 移项后，得到： $$a^{Nd} - a = k_2n$$</p><p>这个优化后的表达清晰地呈现了公式的推导过程和逻辑。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line">N = <span class="number">539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span></span><br><span class="line">d = <span class="number">58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span></span><br><span class="line">c = <span class="number">82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">kn = <span class="built_in">pow</span>(a,N*d,N) - a</span><br><span class="line">n = gmpy2.gcd(N,kn)</span><br><span class="line">p = N // n</span><br><span class="line">q = n // p</span><br><span class="line"><span class="keyword">assert</span> p*q==n</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment">## b&#x27;D0g3xGC&#123;W1sh_Y0u_Go0d_L@ucK-111&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八届“强网杯”全国网络安全挑战赛 Crypto WriteUp</title>
      <link href="/post/39797/"/>
      <url>/post/39797/</url>
      
        <content type="html"><![CDATA[<h1 id="第八届强网杯全国网络安全挑战赛-crypto-writeup"><a class="markdownIt-Anchor" href="#第八届强网杯全国网络安全挑战赛-crypto-writeup"></a> 第八届“强网杯”全国网络安全挑战赛 Crypto WriteUp</h1><p>第八届“强网杯”全国网络安全挑战赛 Crypto WriteUp By BOI - dawn1ight</p><p>References:</p><ul><li><a href="https://blog.s1um4i.com/2024-QWBCTF/">2024 强网杯 部分题解 - S1uM4i</a></li><li><a href="https://dexterjie.github.io/2024/11/04/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2024%E5%BC%BA%E7%BD%91%E6%9D%AF/">2024强网杯 - DexterJie</a></li><li><a href="https://tangcuxiaojikuai.xyz/post/df3f7032.html">2024-强网杯-wp-crypto | 糖醋小鸡块的blog</a></li><li><a href="https://blog.wm-team.cn/index.php/archives/85/">强网杯 2024 By W&amp;M - W&amp;M Team</a></li><li><a href="https://mp.weixin.qq.com/s/WzVR6d8Fdyb42sKjdMns3A">第八届强网杯 Wp By Nu1L Team</a></li></ul><h2 id="easyrsa"><a class="markdownIt-Anchor" href="#easyrsa"></a> EasyRSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">import</span> random, gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAEncryptor</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self.g = self.a = self.b = <span class="number">0</span></span><br><span class="line">self.e = <span class="number">65537</span></span><br><span class="line">self.factorGen()</span><br><span class="line">self.product()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorGen</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">self.g = getPrime(<span class="number">500</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> gmpy2.is_prime(<span class="number">2</span>*self.g*self.a+<span class="number">1</span>):</span><br><span class="line">self.a = random.randint(<span class="number">2</span>**<span class="number">523</span>, <span class="number">2</span>**<span class="number">524</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> gmpy2.is_prime(<span class="number">2</span>*self.g*self.b+<span class="number">1</span>):</span><br><span class="line">self.b = random.randint(<span class="number">2</span>**<span class="number">523</span>, <span class="number">2</span>**<span class="number">524</span>)</span><br><span class="line">self.h = <span class="number">2</span>*self.g*self.a*self.b+self.a+self.b</span><br><span class="line"><span class="keyword">if</span> gmpy2.is_prime(self.h):</span><br><span class="line">self.N = <span class="number">2</span>*self.h*self.g+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(self.N)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, msg</span>):</span><br><span class="line"><span class="keyword">return</span> gmpy2.powmod(msg, self.e, self.N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">self.flag = f.read()</span><br><span class="line">self.enc = self.encrypt(self.flag)</span><br><span class="line">self.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;self.enc&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;N=<span class="subst">&#123;self.N&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e=<span class="subst">&#123;self.e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;g=<span class="subst">&#123;self.g&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RSAEncryptor()</span><br></pre></td></tr></table></figure><p>显然是Common Prime RSA</p><p>已知g，其中g.bit=500, (a+b).bit=1048, 所以g&lt;a+b</p><p>直接用 <a href="https://hasegawaazusa.github.io/common-prime-rsa.html">Common Prime RSA 笔记 | 独奏の小屋</a> 里面的脚本，把c的范围调大到上下浮动5位</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> sage.groups.generic <span class="keyword">import</span> bsgs</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N =</span><br><span class="line">e =</span><br><span class="line">g =</span><br><span class="line">enc =</span><br><span class="line"></span><br><span class="line">nbits = <span class="number">2049</span></span><br><span class="line">gamma = <span class="number">500</span>/nbits</span><br><span class="line">cbits = ceil(nbits * (<span class="number">0.5</span> - <span class="number">2</span> * gamma))</span><br><span class="line"></span><br><span class="line">M = (N - <span class="number">1</span>) // (<span class="number">2</span> * g)</span><br><span class="line">u = M // (<span class="number">2</span> * g)</span><br><span class="line">v = M - <span class="number">2</span> * g * u</span><br><span class="line">GF = Zmod(N)</span><br><span class="line">x = GF.random_element()</span><br><span class="line">y = x ^ (<span class="number">2</span> * g)</span><br><span class="line"><span class="comment"># c的范围大概与N^(0.5-2*gamma)很接近</span></span><br><span class="line">c = bsgs(y, y ^ u, (<span class="number">2</span>**(cbits-<span class="number">5</span>), <span class="number">2</span>**(cbits+<span class="number">5</span>)))</span><br><span class="line">ab = u - c</span><br><span class="line">apb = v + <span class="number">2</span> * g * c</span><br><span class="line">P.&lt;x&gt; = ZZ[]</span><br><span class="line">f = x ^ <span class="number">2</span> - apb * x + ab</span><br><span class="line">a = f.roots()</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    a, b = a[<span class="number">0</span>][<span class="number">0</span>], a[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    p = <span class="number">2</span> * g * a + <span class="number">1</span></span><br><span class="line">    q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> p * q == N</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    <span class="built_in">print</span>(q)</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(enc, d, N)  </span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><p>直接用板子打都没抢到血，手真快。。。</p><p>比赛完之后听说是原题 <a href="https://f61d.github.io/crypto/RSA/huwangbei2019_Crypto1/">huwangbei2019_Crypto1 - f61d</a></p><h2 id="apbq"><a class="markdownIt-Anchor" href="#apbq"></a> apbq</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, privatekey, publickey</span>):</span><br><span class="line">        self.p, self.q, self.d = privatekey</span><br><span class="line">        self.n, self.e = publickey</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plaintext</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(plaintext, <span class="built_in">bytes</span>):</span><br><span class="line">            plaintext = bytes_to_long(plaintext)</span><br><span class="line">        ciphertext = <span class="built_in">pow</span>(plaintext, self.e, self.n)</span><br><span class="line">        <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(ciphertext, <span class="built_in">bytes</span>):</span><br><span class="line">            ciphertext = bytes_to_long(ciphertext)</span><br><span class="line">        plaintext = <span class="built_in">pow</span>(ciphertext, self.d, self.n)</span><br><span class="line">        <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_keypair</span>(<span class="params">nbits, e = <span class="number">65537</span></span>):</span><br><span class="line">    p = getPrime(nbits//<span class="number">2</span>)</span><br><span class="line">    q = getPrime(nbits//<span class="number">2</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    d = inverse(e, n - p - q + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (p, q, d), (n, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pt = <span class="string">&#x27;./output.txt&#x27;</span></span><br><span class="line">    fout = <span class="built_in">open</span>(pt, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    sys.stdout = fout</span><br><span class="line"></span><br><span class="line">    block_size = ceil(<span class="built_in">len</span>(flag)/<span class="number">3</span>)</span><br><span class="line">    flag = [flag[i:i+block_size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), block_size)]</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] Welcome to my apbq game&#x27;</span>)</span><br><span class="line">    <span class="comment"># stage 1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ stage 1: p + q&#x27;</span>)</span><br><span class="line">    prikey1, pubkey1 = get_keypair(<span class="number">1024</span>)</span><br><span class="line">    RSA1 = RSA(prikey1, pubkey1)</span><br><span class="line">    enc1 = RSA1.encrypt(flag[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ hints = <span class="subst">&#123;prikey1[<span class="number">0</span>] + prikey1[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ public key = <span class="subst">&#123;pubkey1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ enc1 = <span class="subst">&#123;enc1&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;----------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># stage 2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ stage 2: ai*p + bi*q&#x27;</span>)</span><br><span class="line">    prikey2, pubkey2 = get_keypair(<span class="number">1024</span>)</span><br><span class="line">    RSA2 = RSA(prikey2, pubkey2)</span><br><span class="line">    enc2 = RSA2.encrypt(flag[<span class="number">1</span>])</span><br><span class="line">    kbits = <span class="number">180</span></span><br><span class="line">    a = [getRandomNBitInteger(kbits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">    b = [getRandomNBitInteger(kbits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">    c = [a[i]*prikey2[<span class="number">0</span>] + b[i]*prikey2[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ hints = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ public key = <span class="subst">&#123;pubkey2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ enc2 = <span class="subst">&#123;enc2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;----------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># stage 3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ stage 3: a*p + q, p + bq&#x27;</span>)</span><br><span class="line">    prikey3, pubkey3 = get_keypair(<span class="number">1024</span>)</span><br><span class="line">    RSA3 = RSA(prikey3, pubkey3)</span><br><span class="line">    enc3 = RSA2.encrypt(flag[<span class="number">2</span>])</span><br><span class="line">    kbits = <span class="number">512</span></span><br><span class="line">    a = getRandomNBitInteger(kbits)</span><br><span class="line">    b = getRandomNBitInteger(kbits)</span><br><span class="line">    c1 = a*prikey3[<span class="number">0</span>] + prikey3[<span class="number">1</span>]</span><br><span class="line">    c2 = prikey3[<span class="number">0</span>] + b*prikey3[<span class="number">1</span>] </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ hints = <span class="subst">&#123;c1, c2&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ public key = <span class="subst">&#123;pubkey3&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;┃ enc3 = <span class="subst">&#123;enc3&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>stage 1：</p><p>直接解方程就行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols, solve</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_pq</span>(<span class="params">sum_pq, n</span>):</span><br><span class="line">    x = symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    eq = x**<span class="number">2</span> - sum_pq * x + n</span><br><span class="line">    solutions = solve(eq, x)</span><br><span class="line">    <span class="keyword">return</span> solutions[<span class="number">0</span>], solutions[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">hints = <span class="number">18978581186415161964839647137704633944599150543420658500585655372831779670338724440572792208984183863860898382564328183868786589851370156024615630835636170</span></span><br><span class="line">n, e = (<span class="number">89839084450618055007900277736741312641844770591346432583302975236097465068572445589385798822593889266430563039645335037061240101688433078717811590377686465973797658355984717210228739793741484666628342039127345855467748247485016133560729063901396973783754780048949709195334690395217112330585431653872523325589</span>, <span class="number">65537</span>)</span><br><span class="line">enc1 = <span class="number">23664702267463524872340419776983638860234156620934868573173546937679196743146691156369928738109129704387312263842088573122121751421709842579634121187349747424486233111885687289480494785285701709040663052248336541918235910988178207506008430080621354232140617853327942136965075461701008744432418773880574136247</span></span><br><span class="line"></span><br><span class="line">sum_pq = hints</span><br><span class="line"></span><br><span class="line">p, q = recover_pq(sum_pq, n)</span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi_n)</span><br><span class="line">decrypted_flag1 = long_to_bytes(<span class="built_in">pow</span>(enc1, <span class="built_in">int</span>(d), n))</span><br><span class="line"><span class="built_in">print</span>(decrypted_flag1)</span><br></pre></td></tr></table></figure><p>stage 2：</p><p>题目来自 <a href="https://connor-mccartney.github.io/cryptography/other/apbq-rsa-ii-DUCTF-2023">apbq-rsa-ii-DUCTF-2023</a></p><p>但原题hints只有三个参数，这里要扩大到100个</p><p>脚本可以参考当时这个比赛的官方exp <a href="https://github.com/DownUnderCTF/Challenges_2023_Public/blob/main/crypto/apbq-rsa-ii/solve/solv.sage">apbq-rsa-ii/solve - DownUnderCTF/Challenges_2023_Public</a></p><p>没想到改一改就能跑</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n,e = (<span class="number">73566307488763122580179867626252642940955298748752818919017828624963832700766915409125057515624347299603944790342215380220728964393071261454143348878369192979087090394858108255421841966688982884778999786076287493231499536762158941790933738200959195185310223268630105090119593363464568858268074382723204344819</span>, <span class="number">65537</span>)</span><br><span class="line">c = <span class="number">30332590230153809507216298771130058954523332140754441956121305005101434036857592445870499808003492282406658682811671092885592290410570348283122359319554197485624784590315564056341976355615543224373344781813890901916269854242660708815123152440620383035798542275833361820196294814385622613621016771854846491244</span></span><br><span class="line">hints = [<span class="number">18167664006612887319059224902765270796893002676833140278828762753019422055112981842474960489363321381703961075777458001649580900014422118323835566872616431879801196022002065870575408411392402196289546586784096</span>, <span class="number">16949724497872153018185454805056817009306460834363366674503445555601166063612534131218872220623085757598803471712484993846679917940676468400619280027766392891909311628455506176580754986432394780968152799110962</span>, <span class="number">17047826385266266053284093678595321710571075374778544212380847321745757838236659172906205102740667602435787521984776486971187349204170431714654733175622835939702945991530565925393793706654282009524471957119991</span>, <span class="number">25276634064427324410040718861523090738559926416024529567298785602258493027431468948039474136925591721164931318119534505838854361600391921633689344957912535216611716210525197658061038020595741600369400188538567</span>, <span class="number">22620929075309280405649238349357640303875210864208854217420509497788451366132889431240039164552611575528102978024292550959541449720371571757925105918051653777519219003404406299551822163574899163183356787743543</span>, <span class="number">20448555271367430173134759139565874060609709363893002188062221232670423900235907879442989619050874172750997684986786991784813276571714171675161047891339083833557999542955021257408958367084435326315450518847393</span>, <span class="number">16581432595661532600201978812720360650490725084571756108685801024225869509874266586101665454995626158761371202939602347462284734479523136008114543823450831433459621095011515966186441038409512845483898182330730</span>, <span class="number">23279853842002415904374433039119754653403309015190065311714877060259027498282160545851169991611095505190810819508498176947439317796919177899445232931519714386295909988604042659419915482267542524373950892662544</span>, <span class="number">16542280976863346138933938786694562410542429842169310231909671810291444369775133082891329676227328401108505520149711555594236523078258701726652736438397249153484528439336008442771240980575141952222517324476607</span>, <span class="number">17054798687400834881313828738161453727952686763495185341649729764826734928113560289710721893874591843482763545781022050238655346441049269145400183941816006501187555169759754496609909352066732267489240733143973</span>, <span class="number">22115728663051324710538517987151446287208882441569930705944807337542411196476967586630373946539021184108542887796299661200933395031919501574357288914028686562763621166172668808524981253976089963176915686295217</span>, <span class="number">19324745002425971121820837859939938858204545496254632010818159347041222757835937867307372949986924646040179923481350854019113237172710522847771842257888083088958980783122775860443475680302294211764812636993025</span>, <span class="number">17269103712436870749511150569030640471982622900104490728908671745662264368118790999669887094371008536628103283985205839448583011077421205589315164079023370873380480423797655480624151812894997816254147210406492</span>, <span class="number">17365467616785968410717969747207581822018195905573214322728668902230086291926193228235744513285718494565736538060677324971757810325341657627830082292794517994668597521842723473167615388674219621483061095351780</span>, <span class="number">20823988964903136690545608569993429386847299285019716840662662829134516039366335014168034963190410379384987535117127797097185441870894097973310130525700344822429616024795354496158261293140438037100429185280939</span>, <span class="number">19068742071797863698141529586788871165176403351706021832743114499444358327620104563127248492878047796963678668578417711317317649158855864613197342671267006688211460724339403654215571839421451060657330746917459</span>, <span class="number">20089639597210347757891251257684515181178224404350699015820324544431016085980542703447257134320668961280907495580251880177990935443438799776252979843969984270461013888122703933975001704404129130156833542263882</span>, <span class="number">22344734326131457204500487243249860924828673944521980798994250859372628295695660076289343998351448667548250129358262592043131205967592613289260998148991388190917863322690137458448696392344738292233285437662495</span>, <span class="number">22688858027824961235755458925538246922604928658660170686458395195714455094516952026243659139809095639584746977271909644938258445835519951859659822660413616465736923822988993362023001205350387354001389518742538</span>, <span class="number">21286046487289796335501643195437352334100195831127922478044197411293510360710188581314023052580692810484251118253550837525637065385439859631494533102244585493243972819369812352385425700028640641292410326514111</span>, <span class="number">21542729548465815605357067072323013570796657575603676418485975214641398139843537820643982914302122976789859817102498484496409546012119998359943274203338400776158986205776474024356567247508744784200354385060666</span>, <span class="number">22319592382753357951626314613193901130171847776829835028715915533809475362288873045184870972146269975570664009921662023590318988850871708674240304838922536028975978222603171333743353770676344328056539379240160</span>, <span class="number">25195209191944761648246874631038407055240893204894145709996399690807569652160721616011712739214434932639646688187304865397816188999592774874989401871300784534538762135830014255425391132306536883804201055992313</span>, <span class="number">18257804244956449160916107602212089869395886846990320452133193087611626919926796845263727422042179229606817439442521540784268169177331707314788427670112999551683927934427716554137597798283300120796277229509678</span>, <span class="number">20293403064916574136692432190836928681820834973375054705153628740577159076332283715581047503287766236543327123639746352358718218140738999496451259789097826888955418315455420948960832865750253988992454128969953</span>, <span class="number">15967654820584966012628708475666706277218484919923639492431538068059543232562431059752700377242326527417238151501168940191488179144049286512652111172149113549072003881460743035279388672984805823560897688895124</span>, <span class="number">25144187979876039024245879200325843092774389926620026124061775431569974232758799200333888039013494603721065709195353330350750055309315207499741437181094874894647736904055829877859906318073991986020178158776286</span>, <span class="number">15736932921640444103019961538951409924080453868073105830403926861058056351553271238438325117113945341892868641345117717666354739204401152657265824568724844930574396801692131746182948347887298330990039956813130</span>, <span class="number">18831072673439732764722762485733622234889447953507582396819704359771208236721692820362137219509611319088756045211407777880521726782697895768017460064889670066178710804124631128581556314122255564861269062385337</span>, <span class="number">23800437561684813552661749774840752013501533683948618798811470214669024646396165487093720960221009038817909066075238937189371227098032581450466402462014437421254375846263830927945343485988463525070074913720710</span>, <span class="number">24402191070622494792723290726249952159888270689258801831518209605331984684494095167423722682814769395395011136124403802097229547003802312444913008194461779426175966774202219703164060353710247619639616444797670</span>, <span class="number">20215481513831963554421686543560596857659844027486522940060791775984622049024173363533378455076109165728144576719015392033536498353094895564917644840994662704362121549525329105205514332808950206092190939931448</span>, <span class="number">18384453917605955747212560280232547481041600196031285084598132475801990710125754705645482436436531608696373462641765399622296314590071558616193035939108523357020287896879479452040171765916716377102454266933226</span>, <span class="number">21890401344164908103930010123434944359446535642544335610455613014563290097498740447164765588532234051104173227090428486681237432196639010849051113283297943367655458678533223039415083212229970648958070799280218</span>, <span class="number">18379893441293694747570620009241814202936873442370354246029979042247705730610190888710981918183390028386451290137755339890329474403224043675724851314770861939082447728194632548864823398818221526652331319263027</span>, <span class="number">18715827130228986951360013590464775001019026913384718876134449689773600060962392738619405370033085704046027397895627933844824630723286144367800484157574548819065406118338665931032779491897783504790669824301288</span>, <span class="number">13588739911708699123450670852772302012518315143187739886523841133752009403411431627334135210166268158490674049617489193734568451811305631563767138879895461211915128972052001136464325219117009268526575020143259</span>, <span class="number">18506039912943821193373920483847347155611306173368341979655092778147169768984477236224526786441466933360500418090210912574990962709452725122792963919616633389125605160796446674502416801964271004625701238202575</span>, <span class="number">22167985517547342184812919437069844889650448522260359154086923601900060998572245598167213217022051141570075284051615276464952346620430587694188548679895095556459804921016744713098882496174497693878187665372865</span>, <span class="number">21507363933875318987283059841465034113263466805329282129011688531718330888226928182985538861888698160675575993935166249701145994333840516459683763957425287811252135418288516497258724668090570720893589001392220</span>, <span class="number">20250321586608105267884665929443511322540360475552916143405651419034772061789298150974629817817611591100450468070842373341756704300393352252725859102426665187194754280129749402796746118608937061141768301995522</span>, <span class="number">16104259151024766025645778755951638093681273234415510444173981198301666343334808614748361662637508091511498829253677167171091582942780017355912433497214576425697459483727777273045993446283721290714044600814203</span>, <span class="number">14560242181138184594433372530956542527312169507277535425067427080573272033961044062335960097446781943943464713852520415535775461964590009720592053626735276833191667395201287169782350381649400286337671320581068</span>, <span class="number">16239347596615402699390026749150381714807445218767496868569282767673828662340774349530405347667558555781433774705139593469838946201218537641296949822639509296966092138954685186059819628696340121356660166937131</span>, <span class="number">21344472317634795288252811327141546596291633424850284492351783921599290478005814133560171828086405152298309169077585647189366292823613547973428250604674234857289341613448177246451956695700417432794886277704716</span>, <span class="number">16053809990112020217624905718566971288375815646771826941011489252522755953750669513046736360397030033178139614200701025268874379439106827823605937814395162011464610496629969260310816473733828751702925621950679</span>, <span class="number">18917855883623050190154989683327838135081813638430345099892537186954876489710857473326920009412778140451855952622686635694323466827034373114657023892484639238914593012175120540210780102536003758794571846502397</span>, <span class="number">22690171278715056779052233972642657173540399024770527983659216197108042021644328773010698851143953503599329885607621773816718008861742027388432534850163666629476315340137626681994316866368449548292328156728206</span>, <span class="number">21087818524872480052313215092436868441694786060866149491087132591272640372512484925209820065536439188250579925233059144898601140234767300574307770064543499923712729705795392684173268461519802573563186764326797</span>, <span class="number">18439753470094841291394543396785250736332596497190578058698960152415339036714664835925822942784700917586270640813663002161425694392259981974491535370706560550540525510875465091384383255081297963169390777475352</span>, <span class="number">20105719699015744146039374208926740159952318391171137544887868739518535254000803811729763681262304539724253518465850883904308979964535242371235415049403280585133993732946919550180260852767289669076362115454200</span>, <span class="number">17251599484976651171587511011045311555402088003441531674726612079301412643514474016351608797610153172169183504289799345382527665445027976807805594288914226822374523878290416047130731166794970645275146679838899</span>, <span class="number">23027331991437585896233907022469624030630702237261170259290872847355304456043379238362120518409085840638396736666056992747627271193089116095167049248270541979716594671069985183070290375121270398623215587207529</span>, <span class="number">18158149685496169798299129683009221264185608469410295069411669832919646968324946121757411511373498747604679198739125835462814352243797919744572086307939585501566092705355693015625009717017077302201663788208609</span>, <span class="number">18276153196656501517216055049560959047263892309902154534799806637704337317207294332426798932144785240877892837491213916540255237702169595754963908689566362060228840286531616263506272071630209104758589482803348</span>, <span class="number">19830654702835464289082520892939657653574451119898587213320188332842291005863699764597454403874285715252681820027919359194554863299385911740908952649966617784376852963552276558475217168696695867402522508290055</span>, <span class="number">15349828226638644963106414986240676364822261975534684137183044733508521003843559094515387144949811552173241406076270015291925943459603622043168219534080772937297911323165839870364550841685270125556125756627553</span>, <span class="number">20923687596111161976478930953796496927811701530608223491138786355445002217973253897724452954815797952200740069102515860924306246841340715110620719064010080520601890251137419840158983682372232110885549732743013</span>, <span class="number">21095748006022412831703352650023882351218414866517568822818298949510471554885207645049385966827210564667371665855668707424105040599599901165292360321667007968065708796593851653085339928947755081203265281357013</span>, <span class="number">20136320433636422315432754195821125224777716034031656342233368000257459497472596860252592531939146543685406198978058242599116859263546329669263543660114747385041549283367183026001454445297981439938401547228229</span>, <span class="number">16496919752274418275948572022974868132658743151124597724312835413857298109100258912203517423633396955060591787380445877361136405137884456764770035346437177846666365911942996404514058688909577420388537479730705</span>, <span class="number">13788728438272498164727737074811797093818033799836159894472736480763530670013682288670889124484670336660448907074673625466218166413315342420667608074179975422284472184048790475129281850298519112884101776426380</span>, <span class="number">24852871485448795332267345793743281093931161235481251209948049584749441451621572752080662697610253315331335180611651946374137068256112152253681972406000252076016099200912670370417045090034045383991812756120791</span>, <span class="number">18663346319122078996775762643035864683521213720864038756854558668694021987970601131985163948257100423991091156649638455828855082098689641225427227191064496066436196910238564311309556938903101074363279783438714</span>, <span class="number">21400068681031931459396470039651524575262457489792894764406364952394476440804779651233022862527636114968325782197380721095406628084183336358459476006267416033892771932528688312375109463803215034905281657962293</span>, <span class="number">16044158155847172030103761204572942507195578382208455423846603003318483484698088948486132040995746837257705704187725306831142305215342467016564452582165866039427184607605673304595194959499145031211096109534167</span>, <span class="number">16518253246325822837502418827700493807621067058438396395472266350036385535241769917459657069911028720968654253735107131282350340465691670072304718987805883113410923109703284511709226857412404454224134480632696</span>, <span class="number">22032469066601123287586507039704080058983969235246539501189720236880312024198451198788699002335010120658564926677243708367430773661097221076615953342733896063909953602379936312639192315223258556134958059637605</span>, <span class="number">17474611942177808070315948910226643697957069578572244709354155010512694059987765040746148981545760660371360975936526076852619987733316042847813177383519241505024635332293992920023420060610648140841369822739716</span>, <span class="number">20097265939024591617239874622716452182434300498447992668997438018575636772416262543204370899462096267444545094719202447520254303983442269757551626971917981420832391886214473318353984504467919530676605744560570</span>, <span class="number">18170251482705061226968041449812078923477452841162650888922564215790088545936753453513162197661916172215859504545409274440450807677845894292177296835154674774694992388033874349807244020099167681146357128785394</span>, <span class="number">18084007437523118129421476751918491055914528331902780911288404344016551650138679157754567938593688369062981279371320169939281882307797009116458871503759873023914718337944953764426183937635379280572434676575757</span>, <span class="number">17001811604221128900675671565539617923973183364469396458234914432162200119518252971721448274846235879320362924206656971472493711107677598961463553324277826426691784458674010708635756004550789902368338633272118</span>, <span class="number">20217009574515126619724139485885721324936960849401637840860565569588595992087537454744066905387396266844236387315004915383456736142307523960394594650088663019228826091309049211780607761862663242437656610298243</span>, <span class="number">25534440916970201550118006203706860249111087748000550226680885431006136131742280963090650607632467666558508520152535105122661615376298673454198064361094319699307084117001019115669670029195171047304283891069792</span>, <span class="number">18871869316294018605789169171879572816494092699556970507058691345095743053290043643010965660058888064972257990750611470141816041727746767146945121588515830427165739580791663951175220638901672353681640741068573</span>, <span class="number">20173968537913641339915058056878181363456579537994317562789857397928196160113042659777558550242315788417022891612723148843142958668959046890197219991727894451795438138592005695329607326086644956073759609743066</span>, <span class="number">20601943394990265144021144365970164017319737300436518536503270346147112565303361487668388700369636611354280332841812324530501569200031186584749278453651172121161814207025650519637781007286435981682228528706305</span>, <span class="number">16397528630087028144645213166977866073543422560337716097539091258081008408890966764995645782823950721804205427713461441138000880478364026137452291234097219085473748076681729365744710225699866258812642458184750</span>, <span class="number">21373350333568141000876969785296802670776508778278005158047105058430550665787088265486222905402690421155861103648370249249790560185790723042867282734693553039477436055775198037042047438047898227097749354619822</span>, <span class="number">17767469767416052322357795736899648760868316512079849340028040817353808899589201201338152114229279980849491049574543361275046276135253417685681262008211582060955974064559129311524323185960856955462761555353091</span>, <span class="number">22148352529815091269441663541923247974004854058764556809596705832663604786920964849725772666340437231503146814919702525852955831173047034475925578238466977606367380212886384487294569287202762127531620290162734</span>, <span class="number">21663842528026621741414050256553652815372885707031383713657826718944735177083300302064509342116651731671570591336596953911570477161536730982887182434407761036442993588590230296643001682944654490645815177777455</span>, <span class="number">20219077358929317461660881724990436334639078047412693497584358963241840513748365548465302817975329987854784305275832045889690022909383530837382543579292451297269623663257098458645056099201050578472103957851128</span>, <span class="number">18255302182526662903763852563401346841065939531070045000414364747445988455597258924280193695407035356029557886165605853810182770534711966292253269625917149411889979307227493949293798772727125069093642134972336</span>, <span class="number">24926064145128749429079117171467042019887257504329103038171762786986349157515552927216574990423327013202735544601170247730647598931030432792167867343343213411600516855009788294067588153504026267213013591793027</span>, <span class="number">22369607314724468760253123915374991621544992437057652340350735935680183705467064876346663859696919167243522648029531700630202188671406298533187087292461774927340821192866797400987231509211718089237481902671100</span>, <span class="number">16994227117141934754898145294760231694287000959561775153135582047697469327393472840046006353260694322888486978811557952926229613247229990658445756595259401269267528233642142950389040647504583683489067768144570</span>, <span class="number">21758885458682118428357134100118546351270408335845311063139309657532131159530485845186953650675925931634290182806173575543561250369768935902929861898597396621656214490429009706989779345367262758413050071213624</span>, <span class="number">20156282616031755826700336845313823798147854495428660743884481573484471099887576514309769978525225369254700468742981099548840277532978306665910844928986235042420698332201264764734685502001234369189521332392642</span>, <span class="number">23291765247744127414491614915358658114280269483384022733002965612273627987872443453777028006606037159079637857473229879140366385523633075816362547967658930666106914269093225208138749470566410361196451552322613</span>, <span class="number">19807792217079652175713365065361659318870738952921195173619551645956745050506271953949139230097128034416815169649874760890189515620232505703162831090225715453502422905418824316957257395992121750661389503495033</span>, <span class="number">22074209373194902539215367382758486068533032275912313703269990627206774967653336496619231924013216321042649461711292555464574124714934511202231319963361912937842068483700298097209400217869036338644607607557860</span>, <span class="number">19678336511265998427322297909733474384702243426420286924671444552444079816707773485084891630780465895504253899943221044355971296122774264925882685351095921532685536165514189427245840338009573352081361238596378</span>, <span class="number">24746314790210393213546150322117518542380438001687269872679602687597595933350510598742749840102841364627647151669428936678130556027300886850086220074563664367409218038338623691372433831784916816798993162471163</span>, <span class="number">19346137206512895254202370018555139713690272833895195472766704715282164091959131850520571672509601848193468792313437642997923790118115476212663296111963644011010744006086847599108492279986468255445160241848708</span>, <span class="number">22739514514055088545643169404630736699361136323546717268615404574809011342622362833245601099992039789664042350284789853188040159950619203242924511038681127008964592137006103547262538912024671048254652547084347</span>, <span class="number">21491512279698208400974501713300096639215882495977078132548631606796810881149011161903684894826752520167909538856354238104288201344211604223297924253960199754326239113862002469224042442018978623149685130901455</span>, <span class="number">19381008151938129775129563507607725859173925946797075261437001349051037306091047611533900186593946739906685481456985573476863123716331923469386565432105662324849798182175616351721533048174745501978394238803081</span>, <span class="number">19965143096260141101824772370858657624912960190922708879345774507598595008331705725441057080530773097285721556537121282837594544143441953208783728710383586054502176671726097169651121269564738513585870857829805</span>]</span><br><span class="line"></span><br><span class="line">V = hints</span><br><span class="line">k = <span class="number">2</span>^(<span class="number">512</span>+<span class="number">100</span>)</span><br><span class="line">M = Matrix.column([k * v <span class="keyword">for</span> v <span class="keyword">in</span> V]).augment(Matrix.identity(<span class="built_in">len</span>(V)))</span><br><span class="line">B = [b[<span class="number">1</span>:] <span class="keyword">for</span> b <span class="keyword">in</span> M.LLL()]</span><br><span class="line">M = (k * Matrix(B[:<span class="built_in">len</span>(V)-<span class="number">2</span>])).T.augment(Matrix.identity(<span class="built_in">len</span>(V)))</span><br><span class="line">B = [b[-<span class="built_in">len</span>(V):] <span class="keyword">for</span> b <span class="keyword">in</span> M.LLL() <span class="keyword">if</span> <span class="built_in">set</span>(b[:<span class="built_in">len</span>(V)-<span class="number">2</span>]) == &#123;<span class="number">0</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s, t <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">100</span>+<span class="number">1</span>), repeat=<span class="number">2</span>):</span><br><span class="line">    T = s*B[<span class="number">0</span>] + t*B[<span class="number">1</span>]</span><br><span class="line">    a1, a2, a3 = T[:<span class="number">3</span>]</span><br><span class="line">    kq = gcd(a1 * hints[<span class="number">1</span>] - a2 * hints[<span class="number">0</span>], n)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> &lt; kq &lt; n:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;find!&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(kq)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p = kq</span><br><span class="line">q = n//p</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)  </span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><p>stage 3：</p><p>第三段题目给的模数n是错误的，p,q仍用第二段</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">8112940945910485817171807897687451701452029959677470272197529542411816926233172848066074195817612280582244564398252967013953964546888998662975298338523549</span></span><br><span class="line">q = <span class="number">9067773077510925207378520309595658022345214442920360440202890774224295250116442048990578009377300541280465330975931465993745130297479191298485033569345231</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">17737974772490835017139672507261082238806983528533357501033270577311227414618940490226102450232473366793815933753927943027643033829459416623683596533955075569578787574561297243060958714055785089716571943663350360324047532058597960949979894090400134473940587235634842078030727691627400903239810993936770281755</span></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)  </span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>比赛完看了其他师傅的WriteUp都在骂，原本应该打算出今年angstromctf2024的blahaj这题</p><p><a href="https://github.com/defund/ctf/blob/master/angstromctf-2024/blahaj/solve.sage">ctf/angstromctf-2024/blahaj/solve.sage at master · defund/ctf</a></p><p><a href="https://blog.maple3142.net/2024/05/28/angstromctf-2024-writeups/#bl%C3%A5haj">ångstromCTF 2024 WriteUps | 廢文集中區</a></p><p>没出好整了个非预期</p><h2 id="21_steps"><a class="markdownIt-Anchor" href="#21_steps"></a> 21_steps</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Can you weight a 128 bits number in 21 steps&#x27;</span>)</span><br><span class="line">pattern = <span class="string">r&#x27;([AB]|\d+)=([AB]|\d+)(\+|\-|\*|//|&lt;&lt;|&gt;&gt;|&amp;|\^|%)([AB]|\d+)&#x27;</span></span><br><span class="line"></span><br><span class="line">command = <span class="built_in">input</span>().strip()</span><br><span class="line"><span class="keyword">assert</span> command[-<span class="number">1</span>] == <span class="string">&#x27;;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>([re.fullmatch(pattern, i) <span class="keyword">for</span> i <span class="keyword">in</span> command[:-<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">step = <span class="number">21</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> command[:-<span class="number">1</span>].split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">    t = i.translate(<span class="built_in">str</span>.maketrans(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;=AB0123456789&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> t <span class="keyword">in</span> [<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&lt;&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;^&#x27;</span>]:</span><br><span class="line">        step -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> t <span class="keyword">in</span> [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;%&#x27;</span>]:</span><br><span class="line">        step -= <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> step &lt; <span class="number">0</span>:exit()</span><br><span class="line"></span><br><span class="line">success = <span class="number">0</span></span><br><span class="line">w = <span class="keyword">lambda</span> x: <span class="built_in">sum</span>([<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">bin</span>(x)[<span class="number">2</span>:])])</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    A = random.randrange(<span class="number">0</span>, <span class="number">2</span>**<span class="number">128</span>)</span><br><span class="line">    wa = w(A)</span><br><span class="line">    B = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span> : <span class="built_in">exec</span>(<span class="string">&quot;global A; global B;&quot;</span> + command)</span><br><span class="line">    <span class="keyword">except</span> : exit()</span><br><span class="line">    <span class="keyword">if</span> A == wa:</span><br><span class="line">        success += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> success == <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/nazeniwaresakini/article/details/107892004">https://blog.csdn.net/nazeniwaresakini/article/details/107892004</a> blog给出了32位整数的优化SWAR算法</p><blockquote><p>根据Hacker’s Delight书中的说法，优化的SWAR汉明权重算法只需要21条指令就可以执行完毕，确实非常精妙了</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bitCount</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="comment">// HD, Figure 5-2</span></span><br><span class="line">    i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">    i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">    i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学习一下原理，给改成128bit整数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">bitcount</span><span class="params">(i)</span>:</span><br><span class="line">    i = i - ((i &gt;&gt; <span class="number">1</span>) &amp; <span class="number">113427455640312821154458202477256070485</span>);</span><br><span class="line">    i = (i &amp; <span class="number">68056473384187692692674921486353642291</span>) + ((i &gt;&gt; <span class="number">2</span>) &amp; <span class="number">68056473384187692692674921486353642291</span>);</span><br><span class="line">    i = (i + (i &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">20016609818878733144904388672456953615</span>;</span><br><span class="line">    i = i + (i &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1324055902416102970674609367438786815</span>;</span><br><span class="line">    i = i + (i &gt;&gt; <span class="number">16</span>) &amp; <span class="number">5192217631581220737344928932233215</span>;</span><br><span class="line">    i = i + (i &gt;&gt; <span class="number">32</span>);</span><br><span class="line">    i = i + (i &gt;&gt; <span class="number">64</span>)</span><br><span class="line">    <span class="keyword">return</span> i &amp; <span class="number">255</span>;</span><br></pre></td></tr></table></figure><p>改成一行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">B=A&gt;&gt;<span class="number">1</span>;B=B&amp;<span class="number">113427455640312821154458202477256070485</span>;A=A-B;B=A&amp;<span class="number">68056473384187692692674921486353642291</span>;A=A&gt;&gt;<span class="number">2</span>;A=A&amp;<span class="number">68056473384187692692674921486353642291</span>;A=A+B;B=A&gt;&gt;<span class="number">4</span>;B=A+B;A=B&amp;<span class="number">20016609818878733144904388672456953615</span>;B=A&gt;&gt;<span class="number">8</span>;B=A+B;A=B&amp;<span class="number">1324055902416102970674609367438786815</span>;B=A&gt;&gt;<span class="number">16</span>;B=A+B;A=B&amp;<span class="number">5192217631581220737344928932233215</span>;B=A&gt;&gt;<span class="number">32</span>;A=A+B;B=A&gt;&gt;<span class="number">64</span>;A=A+B;A=A&amp;<span class="number">255</span>;</span><br></pre></td></tr></table></figure><p>发过去拿到flag</p><h2 id="traditional_game"><a class="markdownIt-Anchor" href="#traditional_game"></a> traditional_game</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> secret,flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_handle_timeout</span>(<span class="params">signum, frame</span>):</span><br><span class="line">    <span class="keyword">raise</span> TimeoutError(<span class="string">&#x27;function timeout&#x27;</span>)</span><br><span class="line"></span><br><span class="line">timeout = <span class="number">300</span></span><br><span class="line">signal.signal(signal.SIGALRM, _handle_timeout)</span><br><span class="line">signal.alarm(timeout)</span><br><span class="line"></span><br><span class="line">random.seed(secret + <span class="built_in">str</span>(<span class="built_in">int</span>(time.time())).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = getPrime(<span class="number">128</span>)</span><br><span class="line">        self.n = self.p * self.q</span><br><span class="line">        self.phi = (self.p - <span class="number">1</span>) * (self.q - <span class="number">1</span>)</span><br><span class="line">        self.d = <span class="built_in">pow</span>(self.e, -<span class="number">1</span>, self.phi)  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_public_key</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.n, self.e)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_private_key</span>(<span class="params">self, blind_bit=<span class="literal">None</span>, unknown_bit=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> blind_bit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> unknown_bit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            blind = getPrime(blind_bit)</span><br><span class="line">            d_ = ((<span class="built_in">int</span>(self.d &gt;&gt; unknown_bit) // blind * blind) &lt;&lt; unknown_bit) + <span class="built_in">int</span>(self.d % blind)</span><br><span class="line">            <span class="keyword">return</span> (d_, blind)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (self.d, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, m</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(m) == <span class="built_in">bytes</span>:</span><br><span class="line">            m = bytes_to_long(m)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>(m) == <span class="built_in">str</span>:</span><br><span class="line">            m = bytes_to_long(m.encode())</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(m, self.e, self.n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">game</span>(<span class="params">self,m0,m1,b</span>):   </span><br><span class="line">        <span class="keyword">return</span> self.encrypt([m0,m1][b]) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rsa = RSA()</span><br><span class="line">token = os.urandom(<span class="number">66</span>) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;[+] Welcome to the game!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] rsa public key: <span class="subst">&#123;rsa.get_public_key()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">coins = <span class="number">100</span></span><br><span class="line">price = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> coins &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=================================&quot;</span>)</span><br><span class="line">    b = random.randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    c = rsa.game(</span><br><span class="line">        <span class="string">b&#x27;bit 0:&#x27;</span> + os.urandom(<span class="number">114</span>), </span><br><span class="line">        <span class="string">b&#x27;bit 1:&#x27;</span> + os.urandom(<span class="number">114</span>), </span><br><span class="line">        b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] c:&quot;</span>,c)</span><br><span class="line">    guessb = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;[-] b:&quot;</span>))</span><br><span class="line">    coins -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> guessb == b:</span><br><span class="line">        price -= <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] correct!&quot;</span>) </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] wrong!&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> price != <span class="number">0</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] game over!&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">blind_bit = <span class="number">40</span></span><br><span class="line">unknown_bit = <span class="number">365</span></span><br><span class="line"></span><br><span class="line">d_,blind = rsa.get_private_key(blind_bit, unknown_bit)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;[+] Now, you have permission to access the privkey!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] privkey is: (<span class="subst">&#123;d_&#125;</span>,<span class="subst">&#123;blind&#125;</span>).&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] encrypt token is: <span class="subst">&#123;rsa.encrypt(bytes_to_long(token))&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">guess_token = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&quot;[-] guess token:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> guess_token == token:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] correct token, here is your flag:&quot;</span>,flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] wrong token&quot;</span>)</span><br></pre></td></tr></table></figure><p>首先是要和靶机交互</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">coins = <span class="number">100</span></span><br><span class="line">price = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> coins &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=================================&quot;</span>)</span><br><span class="line">    b = random.randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    c = rsa.game(</span><br><span class="line">        <span class="string">b&#x27;bit 0:&#x27;</span> + os.urandom(<span class="number">114</span>), </span><br><span class="line">        <span class="string">b&#x27;bit 1:&#x27;</span> + os.urandom(<span class="number">114</span>), </span><br><span class="line">        b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] c:&quot;</span>,c)</span><br><span class="line">    guessb = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;[-] b:&quot;</span>))</span><br><span class="line">    coins -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> guessb == b:</span><br><span class="line">        price -= <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] correct!&quot;</span>) </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] wrong!&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> price != <span class="number">0</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] game over!&quot;</span>)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure><p>每次靶机会发送一个密文<code>c</code>来，判断这个密文对应的明文头是<code>b'bit 0:'</code>还是<code>b'bit 1:'</code></p><p>但实际上不需要去做这个（感觉也做不到这个），关键在这行代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed(secret + <span class="built_in">str</span>(<span class="built_in">int</span>(time.time())).encode())</span><br></pre></td></tr></table></figure><p>在同一秒钟内<code>seed</code>是固定的</p><p>比赛中想法是一秒内交互624拿到数据去预测random输出，实验了一下时间不够（交互很快，但每一百次要nc连一次靶机要很久）</p><p>比赛后看了其他选手的WP，原来是同时用两台靶机去链接，这样<code>seed</code>就相同，一个交互得到答案，另一个填</p><blockquote><p>鸡块师傅：从c判断出b我觉得应该不太可行</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">a = remote(<span class="string">&#x27;47.94.237.181&#x27;</span>,<span class="number">30782</span>)</span><br><span class="line">b = remote(<span class="string">&#x27;47.94.237.181&#x27;</span>,<span class="number">30782</span>)</span><br><span class="line"></span><br><span class="line">b.recvuntil(<span class="string">b&#x27;rsa public key: &#x27;</span>)</span><br><span class="line">pubkey = <span class="built_in">eval</span>(b.recvline())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    a.recvuntil(<span class="string">b&#x27;[-] b:&#x27;</span>)</span><br><span class="line">    b.recvuntil(<span class="string">b&#x27;[-] b:&#x27;</span>)</span><br><span class="line">    a.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;correct&#x27;</span> <span class="keyword">in</span> a.recvline():</span><br><span class="line">        b.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        b.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">b.recvuntil(<span class="string">b&#x27;is: &#x27;</span>)</span><br><span class="line">privkey = <span class="built_in">eval</span>(b.recvline()[:-<span class="number">2</span>])</span><br><span class="line">b.recvuntil(<span class="string">b&#x27;is: &#x27;</span>)</span><br><span class="line">enc = <span class="built_in">eval</span>(b.recvline())</span><br><span class="line"></span><br><span class="line">b.recvuntil(<span class="string">b&#x27;guess token:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = &#x27;</span>,pubkey[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e = &#x27;</span>,pubkey[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;enc = &#x27;</span>,enc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d_ = &#x27;</span>,privkey[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;blind = &#x27;</span>,privkey[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">b.sendline(<span class="built_in">input</span>().encode())</span><br><span class="line">b.recv()</span><br><span class="line">b.recv()</span><br><span class="line">b.recv()</span><br></pre></td></tr></table></figure><p>拿到数据开始分析，私钥函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.e = getPrime(<span class="number">128</span>)</span><br><span class="line">        self.n = self.p * self.q</span><br><span class="line">        self.phi = (self.p - <span class="number">1</span>) * (self.q - <span class="number">1</span>)</span><br><span class="line">        self.d = <span class="built_in">pow</span>(self.e, -<span class="number">1</span>, self.phi)  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_public_key</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.n, self.e)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_private_key</span>(<span class="params">self, blind_bit=<span class="literal">None</span>, unknown_bit=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> blind_bit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> unknown_bit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            blind = getPrime(blind_bit)</span><br><span class="line">            d_ = ((<span class="built_in">int</span>(self.d &gt;&gt; unknown_bit) // blind * blind) &lt;&lt; unknown_bit) + <span class="built_in">int</span>(self.d % blind)</span><br><span class="line">            <span class="keyword">return</span> (d_, blind)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (self.d, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>会返回一个<code>d_</code>和<code>blind</code></p><p>已知<code>d</code>的部分高位和低位，其中<code>dm</code>是未知的，为365bit左右。<code>dh</code>和<code>dl</code>可以用<code>d_</code>通过如下方式计算出来：（</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dh = (d_ &gt;&gt; unknown_bit) // blind</span><br><span class="line">dl = d_ % blind</span><br></pre></td></tr></table></figure><p>可以推导出<code>k</code>是定值（推导见 <a href="https://dexterjie.github.io/2024/11/04/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2024%E5%BC%BA%E7%BD%91%E6%9D%AF/">2024强网杯 - DexterJie</a> ）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mi>e</mi><msub><mi>d</mi><mi>h</mi></msub></mrow><mi>n</mi></mfrac><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k=\frac{ed_h}{n}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2469679999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9019679999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.41586em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>看了几篇其他师傅WriteUP，大概有这几种：</p><ul><li><a href="https://dexterjie.github.io/2024/11/04/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2024%E5%BC%BA%E7%BD%91%E6%9D%AF/">2024强网杯 - DexterJie</a></li></ul><p>复现论文 <a href="https://cic.iacr.org/p/1/3/29/pdf">Small Public Exponent Brings More: Improved Partial Key Exposure Attacks against RSA</a> 的方法</p><p>恢复<code>p</code>的高位</p><blockquote><p>先令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mi>N</mi><mo>+</mo><mn>1</mn><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>e</mi><mo>×</mo><mi>d</mi><mi>h</mi><mo stretchy="false">)</mo></mrow><mi>k</mi></mfrac></mrow><annotation encoding="application/x-tex">S=N+1-\frac{(e×dh)}{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">e</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">h</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo>=</mo><msqrt><mrow><msup><mi>S</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>n</mi></mrow></msqrt></mrow><annotation encoding="application/x-tex">D=\sqrt{S^2-4n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.12661100000000003em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">n</span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span></span>，计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>h</mi></msub><mo>=</mo><mfrac><mrow><mi>S</mi><mo>+</mo><mi>D</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">p_h=\frac{S+D}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，这样得到的高位大概有105位正确；</p><p>求<code>pmodblind</code>，根据式子<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><msub><mi>d</mi><mi>l</mi></msub><mo>≡</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo>−</mo><mi>q</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>b</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">ed_l \equiv 1+k(n+1-p-q)\mod blind</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span></span></span></span>，这里可以计算出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>+</mo><mi>q</mi><mo>≡</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>e</mi><msub><mi>d</mi><mi>l</mi></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>b</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">p+q\equiv k^{-1}(1+k(n+1)-ed_l)\mod blind</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span></span></span></span>，记<code>s = p+q</code>，然后解一元二次方程:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mi>s</mi><mi>x</mi><mo>+</mo><mi>n</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>b</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">x^2-sx+n\mod blind</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span></span></span></span>，得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>b</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">p\mod blind</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span></span></span></span>的值；</p><p>求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>e</mi></mrow><annotation encoding="application/x-tex">p\mod e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">e</span></span></span></span>，和上面的思路一样；</p><p>分解<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>；</p><p>现在有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub><mo>≡</mo><mi>p</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>e</mi></mrow><annotation encoding="application/x-tex">p_1\equiv p\mod e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">e</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub><mo>≡</mo><mi>p</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>b</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">p_2\equiv p\mod blind</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span></span></span></span></p><p>用中国剩余定理求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>l</mi></msub><mo>≡</mo><mi>p</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>e</mi><mo>×</mo><mi>b</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">p_l\equiv p\mod e\times blind</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span></span></span></span></p><p>然后看作<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mi>t</mi><mo>×</mo><mo stretchy="false">(</mo><mi>e</mi><mo>×</mo><mi>b</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>p</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">p=t\times (e\times blind)+p_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span>可以用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>0</mn></msub><mo>=</mo><mfrac><mrow><mi>p</mi><mi>h</mi><mo>−</mo><mi>p</mi><mi>l</mi></mrow><mrow><mi>e</mi><mo>×</mo><mi>b</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">t_0=\frac{ph-pl}{e\times blind}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.335547em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>来近似，那么就有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>t</mi><mn>0</mn></msub><mo>+</mo><mi>x</mi><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mi>e</mi><mo>×</mo><mi>b</mi><mi>l</mi><mi>i</mi><mi>n</mi><mi>d</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>p</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">p=(t_0+x)\times (e\times blind)+p_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，这个x的差值差不多是240-245bit左右;</p><p>用coppersmith求小根</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dh = d_ &gt;&gt; (unknown_bit + blind_bit) &lt;&lt; (unknown_bit + blind_bit)</span><br><span class="line">dl = d_ % blind</span><br><span class="line"></span><br><span class="line"><span class="comment"># step1 calculate k</span></span><br><span class="line">k = (e*dh) // n + <span class="number">1</span></span><br><span class="line"><span class="comment"># step2 dh</span></span><br><span class="line"><span class="comment"># step3 recover the MSBs of p</span></span><br><span class="line">S = n + <span class="number">1</span> - ((e*dh - <span class="number">1</span>) // k)</span><br><span class="line">D = gmpy2.iroot(<span class="built_in">abs</span>(S**<span class="number">2</span> - <span class="number">4</span>*n),<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">ph = <span class="built_in">int</span>((S + D) // <span class="number">2</span>) &gt;&gt; (<span class="number">512</span> - <span class="number">105</span>) &lt;&lt; (<span class="number">512</span> - <span class="number">105</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step4 calculate p+q % blind</span></span><br><span class="line">s = inverse(k,blind) * (<span class="number">1</span> + k * (n+<span class="number">1</span>) - e*dl) % blind</span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(blind))</span><br><span class="line">f = x^<span class="number">2</span> - s*x + n</span><br><span class="line">res = f.roots()</span><br><span class="line">may_p_mod_blind = [<span class="built_in">int</span>(res[<span class="number">0</span>][<span class="number">0</span>]),<span class="built_in">int</span>(res[<span class="number">1</span>][<span class="number">0</span>])]</span><br><span class="line"></span><br><span class="line"><span class="comment"># step5 calculate p+q % e</span></span><br><span class="line">k_inv = inverse(k,e)</span><br><span class="line">s = (n + <span class="number">1</span> + k_inv) % e</span><br><span class="line"></span><br><span class="line"><span class="comment"># step6 factor n</span></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(e))</span><br><span class="line">f = x^<span class="number">2</span> - s*x + n</span><br><span class="line">res = f.roots()</span><br><span class="line">may_p_mod_e = [<span class="built_in">int</span>(res[<span class="number">0</span>][<span class="number">0</span>]),<span class="built_in">int</span>(res[<span class="number">1</span>][<span class="number">0</span>])]</span><br><span class="line">moduls = <span class="built_in">int</span>(blind) * <span class="built_in">int</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p_mod_e <span class="keyword">in</span> may_p_mod_e:</span><br><span class="line">    <span class="keyword">for</span> p_mod_blind <span class="keyword">in</span> may_p_mod_blind:</span><br><span class="line">        pl = crt([p_mod_blind,p_mod_e],[blind,e])</span><br><span class="line">        th = (ph - pl) // moduls</span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">        f = (th + x) * moduls + pl</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">240</span>, <span class="number">246</span>):</span><br><span class="line">            roots = f.monic().small_roots(X=<span class="number">2</span>^i,beta=<span class="number">0.49</span>,epsilon=<span class="number">0.02</span>)</span><br><span class="line">            <span class="keyword">if</span> roots != []:</span><br><span class="line">                p = <span class="built_in">int</span>(f(roots[<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">                    <span class="built_in">print</span>(p)</span><br><span class="line">                    q = n // p</span><br><span class="line">                    d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">                    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">                    msg = long_to_bytes(m)</span><br><span class="line">                    <span class="built_in">print</span>(msg.<span class="built_in">hex</span>())</span><br><span class="line">                    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://tangcuxiaojikuai.xyz/post/df3f7032.html">2024-强网杯-wp-crypto | 糖醋小鸡块的blog</a></li></ul><p>建造格</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################# data</span></span><br><span class="line">n, e = <span class="number">85326799303014496026064371730108772674311332235197622668632563161991602151711567135121280447576711444698674128128361298108919951648223986067215747231280671858955299505770967232491254103263536714363392698361887554304255293991522369123049450389169430042203506125207632731477059899911948136482137033584148217327</span>, <span class="number">254105853966712863308295955275449077351</span></span><br><span class="line">d_, blind = <span class="number">21378651607895524021279554589638483737491146093477974150650211288463988209605132503571807152155799637952833578907915487652394101057156932695702372344185513500134378667094923442647974423915643213700386663283702204046537471425141802799603607927835879677131664511051343930330150649244588933823965535065854996174</span>,<span class="number">1033378191583</span></span><br><span class="line">c = <span class="number">53742732129028328063112055299975805421399396945032126712022723372351554830940247890238890674346304685771599765645061449905866414886468887177488826724343823941484173305683401484367061591100780027467534437239106132736115748345075082986831034406103970493456683245813494600511020286115561513979129441895596164513</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################# get k,dh,dl</span></span><br><span class="line">blind_bit = <span class="number">40</span></span><br><span class="line">unknown_bit = <span class="number">365</span></span><br><span class="line">k = (e*d_ - <span class="number">1</span>) // n + <span class="number">1</span></span><br><span class="line">dh = (d_ &gt;&gt; unknown_bit) // blind</span><br><span class="line">dl = d_ % blind</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################# LLL</span></span><br><span class="line">M = e*(<span class="number">2</span>^unknown_bit*blind*dh+dl) - k*(n+<span class="number">1</span>) - <span class="number">1</span></span><br><span class="line">K = <span class="number">2</span>^(<span class="number">513</span>-unknown_bit)</span><br><span class="line">L = matrix(ZZ,[</span><br><span class="line">    [K,<span class="number">0</span>,e*blind],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,k],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">0</span>,M]</span><br><span class="line">])</span><br><span class="line">L[:,-<span class="number">1</span>:] *= M</span><br><span class="line">L = L.LLL()</span><br><span class="line">L[:,:<span class="number">1</span>] /= K</span><br><span class="line">pqh = L[<span class="number">1</span>][<span class="number">1</span>] // (e*blind) * (e*blind)</span><br><span class="line">pql = L[<span class="number">1</span>][<span class="number">1</span>] % (e*blind)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################# copper</span></span><br><span class="line"><span class="comment">############################################### get ph</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(RealField(<span class="number">1000</span>))</span><br><span class="line">f = x*(pqh-x) - n </span><br><span class="line">ph = <span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>]) // (e*blind) * (e*blind)</span><br><span class="line"><span class="comment">############################################### get pl</span></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(e))</span><br><span class="line">fe = x*(pql-x) - n</span><br><span class="line">rese = fe.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(blind))</span><br><span class="line">fb = x*(pql-x) - n</span><br><span class="line">resb = fb.roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rese:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> tqdm(resb):</span><br><span class="line">        nlist = [e,blind]</span><br><span class="line">        clist = [<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>])]</span><br><span class="line">        pl = <span class="built_in">int</span>(crt(clist,nlist))</span><br><span class="line"></span><br><span class="line">        <span class="comment">############################################### get p</span></span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">        f = ph + e*blind*x + pl</span><br><span class="line">        f = f.monic()</span><br><span class="line">        res = f.small_roots(X=<span class="number">2</span>^(<span class="number">512</span>-<span class="number">105</span>-<span class="number">167</span>+<span class="number">3</span>), beta=<span class="number">0.499</span>, epsilon=<span class="number">0.02</span>)</span><br><span class="line">        <span class="keyword">if</span>(res != []):</span><br><span class="line">            p = <span class="built_in">int</span>(ph + e*blind*res[<span class="number">0</span>] + pl)</span><br><span class="line">            q = n // p</span><br><span class="line">            phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">            d = inverse(e, phi)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c, d, n))).<span class="built_in">hex</span>())</span><br><span class="line">            <span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.wm-team.cn/index.php/archives/85/">强网杯 2024 By W&amp;M - W&amp;M Team</a></li></ul><p>二元copper</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality() <span class="comment">#取得模数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>) <span class="comment">#最高次项系数化为0，coefficients是多项式的降次幂排列系数</span></span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i <span class="comment">#收集基多项式</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    <span class="comment"># print(G)</span></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n=<span class="number">72002775317113688540285467671785030264214376134969177894386312150568554267864510238114124791103314081013890542077634384796996108441641259367491852737439283875815904913961193178967651247603461327324881612452957271602668892013627196968069470178106537853725618118244679187226724369629568003877232335388143025421</span></span><br><span class="line"></span><br><span class="line">d_=<span class="number">51922392037054965957994618792545191283979879052769311017420397943569729387241291615967860347543490837943194867963559620326233806950203605430695561698099370379711352056567716185665995739452373593820321078614603310911807288759647808038104413677259085086482871151447742963730089791217336473149711277887953445987</span></span><br><span class="line">blind=<span class="number">1022253789881</span></span><br><span class="line">e = <span class="number">315877627939914682167275979171048924911</span></span><br><span class="line"></span><br><span class="line">k = (d_&gt;&gt;<span class="number">365</span>&lt;&lt;<span class="number">365</span>)*e//n+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line">d0 = <span class="number">305686942495898399049381993768424633072311512220602994167415931983633446942350</span>*blind+d_</span><br><span class="line"><span class="built_in">print</span>((e*d0-<span class="number">1</span>)//k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PR.&lt;t,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">dh = d_&gt;&gt;<span class="number">365</span></span><br><span class="line">dl = d_%blind</span><br><span class="line">dd= d_+t*blind</span><br><span class="line"></span><br><span class="line">f = e * dd-<span class="number">1</span>+k*(y+)-k</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">8</span>)</span><br><span class="line">    res = small_roots(f,[<span class="number">2</span>^<span class="number">365</span>,<span class="number">2</span>^<span class="number">513</span>],m=j,d=i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(res[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">d_ = <span class="number">35543944120330116255735518733645489603573091842911907294542145633663234716786783315679867957932690565524695409353902407238230794612110053347977693435578424147992257282456254035309964691562747903421859204068006443325340570360806343392553225754316397967193324090858612423946304818214259628194263287347469670466</span></span><br><span class="line">blind = <span class="number">757679866771</span></span><br><span class="line">enc = <span class="number">19853765442007775876887241200871445335873698995336480258510762108568698654347239404466018587258683380716257697287810506470119048708570691810417483606733656269976330892819998306493425545055270250642091136316635340047265544394031708296941054865358649424861323618308881521370980854619709646182020458999169008788</span></span><br><span class="line">n = <span class="number">58273981186201544662497686603513109679871732872710290794332222899533972577334318295883065181401468548089995964427612249110216775058749030840477167325648156157792476414639983292885697153441817705191116555945635579175171648010932408400320937775056359336717949119846917473695481683831886468389055754689273767107</span></span><br><span class="line">e = <span class="number">311238058411019550438393569886672869203</span></span><br><span class="line"></span><br><span class="line">blind_bit = <span class="number">40</span></span><br><span class="line">unknown_bit = <span class="number">365</span></span><br><span class="line"></span><br><span class="line">k = (d_&gt;&gt;<span class="number">365</span>&lt;&lt;<span class="number">365</span>)*e//n+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">PR.&lt;y&gt; = PolynomialRing(GF(e))</span><br><span class="line"></span><br><span class="line">f = e * d_-<span class="number">1</span>-k+k*y-k*n</span><br><span class="line">f = f.monic()</span><br><span class="line">ans1 = (f.roots())[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">g = y*ans1-y^<span class="number">2</span>-n</span><br><span class="line">ans1 = (g.roots())</span><br><span class="line"></span><br><span class="line">PR.&lt;y&gt; = PolynomialRing(GF(blind))</span><br><span class="line"></span><br><span class="line">f = e * d_-<span class="number">1</span>-k+k*y-k*n</span><br><span class="line">f = f.monic()</span><br><span class="line">ans2 = (f.roots())[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">g = y*ans2-y^<span class="number">2</span>-n</span><br><span class="line">ans2 = (g.roots())</span><br><span class="line"></span><br><span class="line">pl = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> ans2:</span><br><span class="line">        pl.append(crt([<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>])],[e,blind]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pl)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sh = <span class="number">43455964700998276860477800987643389941075455294569061</span></span><br><span class="line">sh = sh*<span class="number">2</span>^<span class="number">170</span>*e*blind</span><br><span class="line"></span><br><span class="line">kbit = <span class="number">242</span></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(RealField(<span class="number">1000</span>))</span><br><span class="line">f = x*sh-x^<span class="number">2</span>-n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.roots())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (f.roots()):</span><br><span class="line">    ph = (<span class="built_in">int</span>(i[<span class="number">0</span>])//(<span class="number">2</span>^kbit*(e*blind)))  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> pl:</span><br><span class="line">        R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">        f = ph*<span class="number">2</span>^kbit*e*blind+x*e*blind+<span class="built_in">int</span>(j)</span><br><span class="line">        f = f.monic()</span><br><span class="line">        ans = (f.small_roots(X = <span class="number">2</span>^kbit,beta = <span class="number">0.4</span>,epsilon = <span class="number">0.02</span>))</span><br><span class="line">        <span class="keyword">if</span> ans:</span><br><span class="line">            p =  ph*<span class="number">2</span>^kbit*e*blind+<span class="built_in">int</span>(ans[<span class="number">0</span>])*e*blind+<span class="built_in">int</span>(j)</span><br><span class="line">            q = n//p</span><br><span class="line">            phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">            d = inverse_mod(e,phi)</span><br><span class="line">            m = <span class="built_in">pow</span>(enc,d,n)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h2 id="homomor_game"><a class="markdownIt-Anchor" href="#homomor_game"></a> homomor_game</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tenseal.sealapi <span class="keyword">as</span> sealapi</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> signal <span class="keyword">import</span> alarm</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">g = <span class="number">5</span></span><br><span class="line">poly_modulus_degree = <span class="number">8192</span></span><br><span class="line">plain_modulus = <span class="number">163841</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_keys</span>():</span><br><span class="line">parms = sealapi.EncryptionParameters(sealapi.SCHEME_TYPE.BFV)</span><br><span class="line">parms.set_poly_modulus_degree(poly_modulus_degree)</span><br><span class="line">parms.set_plain_modulus(plain_modulus)</span><br><span class="line">coeff = sealapi.CoeffModulus.BFVDefault(poly_modulus_degree, sealapi.SEC_LEVEL_TYPE.TC128)</span><br><span class="line">parms.set_coeff_modulus(coeff)</span><br><span class="line"></span><br><span class="line">ctx = sealapi.SEALContext(parms, <span class="literal">True</span>, sealapi.SEC_LEVEL_TYPE.TC128)</span><br><span class="line"></span><br><span class="line">keygen = sealapi.KeyGenerator(ctx)</span><br><span class="line">public_key = sealapi.PublicKey()</span><br><span class="line">keygen.create_public_key(public_key)</span><br><span class="line">secret_key = keygen.secret_key()</span><br><span class="line"></span><br><span class="line">parms.save(<span class="string">&quot;app/parms&quot;</span>)</span><br><span class="line">public_key.save(<span class="string">&quot;app/public_key&quot;</span>)</span><br><span class="line">secret_key.save(<span class="string">&quot;app/secret_key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load</span>():</span><br><span class="line">parms = sealapi.EncryptionParameters(sealapi.SCHEME_TYPE.BFV)</span><br><span class="line">parms.load(<span class="string">&quot;app/parms&quot;</span>)</span><br><span class="line"></span><br><span class="line">ctx = sealapi.SEALContext(parms, <span class="literal">True</span>, sealapi.SEC_LEVEL_TYPE.TC128)</span><br><span class="line"></span><br><span class="line">public_key = sealapi.PublicKey()</span><br><span class="line">public_key.load(ctx, <span class="string">&quot;app/public_key&quot;</span>)</span><br><span class="line"></span><br><span class="line">secret_key = sealapi.SecretKey()</span><br><span class="line">secret_key.load(ctx, <span class="string">&quot;app/secret_key&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> ctx, public_key, secret_key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_galois_keys</span>(<span class="params">ctx, secret_key, elt</span>):</span><br><span class="line">keygen = sealapi.KeyGenerator(ctx, secret_key)</span><br><span class="line">galois_keys = sealapi.GaloisKeys()</span><br><span class="line">keygen.create_galois_keys(elt, galois_keys)</span><br><span class="line">galois_keys.save(<span class="string">&quot;app/galois_key&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> galois_keys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_polynomial</span>(<span class="params">a</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;1x^&#x27;</span> + <span class="built_in">str</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(g, a-b, plain_modulus) + <span class="built_in">pow</span>(g, b-a, plain_modulus) + <span class="built_in">pow</span>(g, <span class="number">3</span>*a-b, plain_modulus) + <span class="built_in">pow</span>(g, a-<span class="number">3</span>*b, plain_modulus))%plain_modulus</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_result</span>(<span class="params">ctx, decryptor, a, b, pos</span>):</span><br><span class="line">plaintext = sealapi.Plaintext()</span><br><span class="line">ciphertext = sealapi.Ciphertext(ctx)</span><br><span class="line">ciphertext.load(ctx, <span class="string">&quot;app/computation&quot;</span>)</span><br><span class="line">decryptor.decrypt(ciphertext, plaintext)</span><br><span class="line"><span class="keyword">assert</span> plaintext[pos] == f(a, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">filepath</span>):</span><br><span class="line">f = <span class="built_in">open</span>(filepath, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">data = base64.b64encode(f.read()).decode()</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">filepath</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">data = base64.b64decode(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Invalid Base64!&quot;</span>)</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(filepath, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">f.write(data)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">ctx, public_key, secret_key = load()</span><br><span class="line">encryptor = sealapi.Encryptor(ctx, public_key)</span><br><span class="line">decryptor = sealapi.Decryptor(ctx, secret_key)</span><br><span class="line"></span><br><span class="line">a, b = [randint(<span class="number">1</span>, poly_modulus_degree - <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">poly_a, poly_b = gen_polynomial(a), gen_polynomial(b)</span><br><span class="line"></span><br><span class="line">plaintext_a, plaintext_b = sealapi.Plaintext(poly_a), sealapi.Plaintext(poly_b)</span><br><span class="line">ciphertext_a, ciphertext_b = [sealapi.Ciphertext() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">encryptor.encrypt(plaintext_a, ciphertext_a)</span><br><span class="line">encryptor.encrypt(plaintext_b, ciphertext_b)</span><br><span class="line">ciphertext_a.save(<span class="string">&quot;app/ciphertext_a&quot;</span>)</span><br><span class="line">ciphertext_b.save(<span class="string">&quot;app/ciphertext_b&quot;</span>)</span><br><span class="line">galois_used = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">alarm(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Give Me Your Choice:&quot;</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Invalid choice!&quot;</span>)</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> choice == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here Is Ciphertext_a:&quot;</span>)</span><br><span class="line">send(<span class="string">&quot;app/ciphertext_a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here Is Ciphertext_b:&quot;</span>)</span><br><span class="line">send(<span class="string">&quot;app/ciphertext_b&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> choice == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> galois_used == <span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;No More!&quot;</span>)</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">elt = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please give me your choice:&quot;</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Invalid input!&quot;</span>)</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">galois_key = gen_galois_keys(ctx, secret_key, [elt])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Invalid galois!&quot;</span>)</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is your galois key:&quot;</span>)</span><br><span class="line">send(<span class="string">&quot;app/galois_key&quot;</span>)</span><br><span class="line">galois_used = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">pos = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Give Me Your Position:&quot;</span>))</span><br><span class="line"><span class="keyword">assert</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(poly_modulus_degree)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Invalid position!&quot;</span>)</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Give Me Your Computation&quot;</span>)</span><br><span class="line">recv(<span class="string">&quot;app/computation&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">check_result(ctx, decryptor, a, b, pos)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Incorret Answer!&quot;</span>)</span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;app/flag&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag.read())</span><br><span class="line">flag.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Invalid choice!&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gen_keys()</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>还给了一个parms和public_key文件</p><h2 id="electronic_game"><a class="markdownIt-Anchor" href="#electronic_game"></a> electronic_game</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.rings.finite_rings.hom_finite_field <span class="keyword">import</span> FiniteFieldHomomorphism_generic</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_handle_timeout</span>(<span class="params">signum, frame</span>):</span><br><span class="line">    <span class="keyword">raise</span> TimeoutError(<span class="string">&#x27;function timeout&#x27;</span>)</span><br><span class="line"></span><br><span class="line">timeout = <span class="number">66</span></span><br><span class="line">signal.signal(signal.SIGALRM, _handle_timeout)</span><br><span class="line">signal.alarm(timeout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qary_trans_to_int</span>(<span class="params">x, q</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([<span class="built_in">int</span>(x[i]) * q**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">f, q</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> b64encode(long_to_bytes(qary_trans_to_int(f.polynomial().coefficients(sparse = <span class="literal">False</span>), q)))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> b64encode(long_to_bytes(qary_trans_to_int(f.coefficients(sparse = <span class="literal">False</span>), q)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_irreducible_polynomial</span>(<span class="params">R, n</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">        f = R.random_element(degree=n) </span><br><span class="line">        <span class="keyword">while</span> f.degree() != n:</span><br><span class="line">            f = R.random_element(degree=n) </span><br><span class="line">        <span class="keyword">if</span> f.is_irreducible():</span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_sparse_irreducible_polynomial</span>(<span class="params">R, n</span>): </span><br><span class="line">    x = R.gen()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = <span class="built_in">sum</span>(choice([-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]) * x**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(randint(<span class="number">1</span>, n//<span class="number">2</span> + <span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">if</span> (x**n + g + <span class="number">1</span>).is_irreducible():</span><br><span class="line">            <span class="keyword">return</span> x**n + g + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_polynomial</span>(<span class="params">R, n, beta</span>):  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(randrange(-beta, beta) * R.gen()**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(randint(<span class="number">0</span>, n))) + R.gen()**n  </span><br><span class="line"></span><br><span class="line">q = <span class="number">333337</span></span><br><span class="line">n = <span class="number">128</span></span><br><span class="line">beta = <span class="number">333</span> </span><br><span class="line">chance = <span class="number">111</span></span><br><span class="line">polyns = beta//chance</span><br><span class="line">bound  = <span class="number">106</span></span><br><span class="line">R = PolynomialRing(GF(q),<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line">F = generate_irreducible_polynomial(R,n).monic()</span><br><span class="line"></span><br><span class="line">k1 = GF(q**n, name = <span class="string">&#x27;a&#x27;</span>, modulus = generate_sparse_irreducible_polynomial(R,n).monic())</span><br><span class="line">k2 = GF(q**n, name = <span class="string">&#x27;b&#x27;</span>, modulus = F)</span><br><span class="line"></span><br><span class="line">phi = FiniteFieldHomomorphism_generic(Hom(k1, k2)) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F:&quot;</span>, encode(F,q).decode())</span><br><span class="line"></span><br><span class="line">win_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(chance):</span><br><span class="line">    opt = randint(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> opt:</span><br><span class="line">        As = [phi(random_polynomial(k1,n,beta)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(polyns)] </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        As = [k2.random_element() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(polyns)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(polyns):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;As[<span class="subst">&#123;i&#125;</span>]: <span class="subst">&#123;encode(As[i],q).decode()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    opt_guess = <span class="built_in">input</span>(<span class="string">&quot;Guess the option[0/1]: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(opt_guess) != opt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong guess!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        win_count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Correct guess!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> win_count &gt;= bound:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You are so smart! Here is your flag:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No flag for you!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ecrandom_game"><a class="markdownIt-Anchor" href="#ecrandom_game"></a> ECRandom_game</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> M, q, a, b, select</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> ecdsa</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> ecdsa.ellipticcurve <span class="keyword">import</span> CurveFp,Point</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;qwb&#123;kLeMjJw_HBPtoHsVhnnxZdvtGjomivNDUI_vMRhZHrfKlCZ6HlGAeXRV_gQ8i117nGhzEMr0Zk_YTl1wftSskpX4JLnryE9Mhl96cPTWorGCl_R6nD33bcx1AYflag_leak&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">136</span></span><br><span class="line"></span><br><span class="line">BANNER = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> GGGGG   OOOOO   DDDDD   DDDDD    GGGGG    AAA    MM    MM EEEEEEE </span></span><br><span class="line"><span class="string">GG      OO   OO  DD   D  DD   D  GG       AAAAA   MMM  MMM EE      </span></span><br><span class="line"><span class="string">GG  GGG OO   OO  DD   D  DD   D  GG  GGG  A   A   MM MM MM EEEEE   </span></span><br><span class="line"><span class="string">GG   GG OO   OO  DD   D  DD   D  GG   GG  AAAAA   MM    MM EE      </span></span><br><span class="line"><span class="string">GGGGGGG  OOOOO   DDDDD   DDDDD   GGGGGGG  A   A   MM    MM EEEEEEE </span></span><br><span class="line"><span class="string"> &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">NNN = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">die</span>(<span class="params">*args</span>):</span><br><span class="line">    pr(*args)</span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pr</span>(<span class="params">*args</span>):</span><br><span class="line">    s = <span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, args))</span><br><span class="line">    sys.stdout.write(s + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sc</span>():</span><br><span class="line">    <span class="keyword">return</span> sys.stdin.buffer.readline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Rng</span>(<span class="params">k</span>):</span><br><span class="line">    ran = random.getrandbits(k)</span><br><span class="line">    NNN.append(ran)</span><br><span class="line">    <span class="keyword">return</span> ran</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ADD</span>(<span class="params">num</span>):</span><br><span class="line">    NUM = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        NUM += Rng(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> NUM</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secure_choice</span>(<span class="params">sequence</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sequence:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    randbelow = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(sequence):</span><br><span class="line">        randbelow += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> os.urandom(<span class="number">1</span>)[<span class="number">0</span>] &lt; (<span class="number">1</span> &lt;&lt; <span class="number">8</span>) * randbelow // <span class="built_in">len</span>(sequence):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xDBLADD</span>(<span class="params">P, Q, PQ, q, a, b</span>):</span><br><span class="line">    (X1, Z1), (X2, Z2), (X3, Z3) = PQ, P, Q</span><br><span class="line">    X4 = (X2**<span class="number">2</span> - a * Z2**<span class="number">2</span>) ** <span class="number">2</span> - <span class="number">8</span> * b * X2 * Z2**<span class="number">3</span></span><br><span class="line">    Z4 = <span class="number">4</span> * (X2 * Z2 * (X2**<span class="number">2</span> + a * Z2**<span class="number">2</span>) + b * Z2**<span class="number">4</span>)</span><br><span class="line">    X5 = Z1 * ((X2 * X3 - a * Z2 * Z3) ** <span class="number">2</span> - <span class="number">4</span> * b * Z2 * Z3 * (X2 * Z3 + X3 * Z2))</span><br><span class="line">    Z5 = X1 * (X2 * Z3 - X3 * Z2) ** <span class="number">2</span></span><br><span class="line">    X4, Z4, X5, Z5 = (c % q <span class="keyword">for</span> c <span class="keyword">in</span> (X4, Z4, X5, Z5))</span><br><span class="line">    <span class="keyword">return</span> (X4, Z4), (X5, Z5)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xMUL</span>(<span class="params">P, k, q, a, b</span>):</span><br><span class="line">    Q, R = (<span class="number">1</span>, <span class="number">0</span>), P</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(k.bit_length() + <span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">if</span> k &gt;&gt; i &amp; <span class="number">1</span>:</span><br><span class="line">            R, Q = Q, R</span><br><span class="line">        Q, R = xDBLADD(Q, R, P, q, a, b)</span><br><span class="line">        <span class="keyword">if</span> k &gt;&gt; i &amp; <span class="number">1</span>:</span><br><span class="line">            R, Q = Q, R</span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shout</span>(<span class="params">x, d, q, a, b</span>):</span><br><span class="line">    P = (x,<span class="number">1</span>)</span><br><span class="line">    Q = xMUL(P, d, q, a, b)</span><br><span class="line">    <span class="keyword">return</span> Q[<span class="number">0</span>] * <span class="built_in">pow</span>(Q[<span class="number">1</span>], -<span class="number">1</span>, q) % q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_string</span>(<span class="params">length</span>):</span><br><span class="line">    characters = string.ascii_letters + string.digits</span><br><span class="line">    random_string = <span class="string">&#x27;&#x27;</span>.join(secure_choice(characters) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line">    <span class="keyword">return</span> random_string</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ECCDu</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,curve,G</span>):</span><br><span class="line">        self.state = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">        self.Curve = curve</span><br><span class="line">        self.g = G</span><br><span class="line"></span><br><span class="line">        self.num = Rng(<span class="number">32</span>)</span><br><span class="line">        d = <span class="number">65537</span></span><br><span class="line">        self.Q = self.num*self.g</span><br><span class="line">        self.P = d * self.Q</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ingetkey</span>(<span class="params">self</span>):</span><br><span class="line">        t = <span class="built_in">int</span>((self.state * self.Q).x())</span><br><span class="line">        self.updade()</span><br><span class="line">        <span class="keyword">return</span> t%(<span class="number">2</span>**<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">updade</span>(<span class="params">self</span>):</span><br><span class="line">        self.state = <span class="built_in">int</span>((self.state * self.P).x())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Random_key</span>(<span class="params">self, n:<span class="built_in">int</span></span>):</span><br><span class="line">        out = <span class="number">0</span></span><br><span class="line">        number = ceil(n/<span class="number">250</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number):</span><br><span class="line">            out = (out&lt;&lt;<span class="number">250</span>) + self.ingetkey()</span><br><span class="line">        <span class="keyword">return</span> out % (<span class="number">2</span>**n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">    proof = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">    _hexdigest = sha256(proof.encode()).hexdigest()</span><br><span class="line">    pr(<span class="string">f&quot;sha256(XXXX+<span class="subst">&#123;proof[<span class="number">4</span>:]&#125;</span>) == <span class="subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())</span><br><span class="line">    pr(<span class="string">&#x27;Give me XXXX: &#x27;</span>)</span><br><span class="line">    x = sc().rstrip(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(x) != <span class="number">4</span> <span class="keyword">or</span> sha256(x + proof[<span class="number">4</span>:].encode()).hexdigest() != _hexdigest:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    pr(BANNER)</span><br><span class="line">    pr(<span class="string">&#x27;WELCOME TO THIS SIMPLE GAME!!!&#x27;</span>)</span><br><span class="line">    ASSERT = proof_of_work()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ASSERT:</span><br><span class="line">        die(<span class="string">&quot;Not right proof of work&quot;</span>)</span><br><span class="line"></span><br><span class="line">    pr(<span class="string">&#x27;Now we will start our formal GAME!!!&#x27;</span>)</span><br><span class="line">    pr(<span class="string">&#x27;===== First 1💪: =====&#x27;</span>)</span><br><span class="line">    pr(<span class="string">&#x27;Enter an integer as the parameter p for Curve: y^2 = x^3+12x+17 (mod p) and 250&lt;p.bit_length()&#x27;</span>)</span><br><span class="line">    p1 = <span class="built_in">int</span>(sc())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">250</span>&lt;=p1.bit_length():</span><br><span class="line">        die(<span class="string">&#x27;Wrong length!&#x27;</span>)</span><br><span class="line">    curve = CurveFp(p1, <span class="number">12</span>, <span class="number">17</span>,<span class="number">1</span>)</span><br><span class="line">    pr(curve)</span><br><span class="line">    pr(<span class="string">&#x27;Please Enter a random_point G:&#x27;</span>)</span><br><span class="line">    G_t = sc().split(<span class="string">b&#x27; &#x27;</span>)</span><br><span class="line">    Gx,Gy = <span class="built_in">int</span>(G_t[<span class="number">0</span>]),<span class="built_in">int</span>(G_t[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> curve.contains_point(Gx,Gy):</span><br><span class="line">        die(<span class="string">&#x27;This point is outside the curve&#x27;</span>)</span><br><span class="line">    G = Point(curve,Gx,Gy)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        ECDU = ECCDu(curve,G)</span><br><span class="line">        m  = <span class="string">&#x27;My secret is a random saying of phrase,As below :&#x27;</span> + generate_random_string(<span class="number">119</span>)</span><br><span class="line">        Number = ECDU.Random_key(<span class="number">1344</span>)</span><br><span class="line">        c = Number^bytes_to_long(m.encode())</span><br><span class="line">        pr(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line">        pr(<span class="string">f&#x27;P = <span class="subst">&#123;<span class="built_in">int</span>(ECDU.P.x()), <span class="built_in">int</span>(ECDU.P.y())&#125;</span>&#x27;</span>)</span><br><span class="line">        pr(<span class="string">f&#x27;Q = <span class="subst">&#123;<span class="built_in">int</span>(ECDU.Q.x()), <span class="built_in">int</span>(ECDU.Q.y())&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        pr(<span class="string">&#x27;Enter m:&#x27;</span>)</span><br><span class="line">        m_en = sc().rstrip(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> m_en != m.encode():</span><br><span class="line">            die(<span class="string">&#x27;This is not the right m,Please try again&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pr(<span class="string">&#x27;Right m!!!&#x27;</span>)</span><br><span class="line">    pr(<span class="string">&#x27;Bingo!&#x27;</span>)</span><br><span class="line">    new_state,new_state1 = ADD(<span class="number">136</span>),ADD(<span class="number">50</span>)</span><br><span class="line">    </span><br><span class="line">    random.seed(new_state)</span><br><span class="line"></span><br><span class="line">    pr(<span class="string">&#x27;===== Second 2💪: =====&#x27;</span>)</span><br><span class="line">    curve1 = CurveFp(q,a,b,<span class="number">1</span>)</span><br><span class="line">    pr(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">int</span>(curve1.p()),<span class="built_in">int</span>(curve1.a()),<span class="built_in">int</span>(curve1.b())&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    pr(<span class="string">&quot;Enter a number that does not exceed 1500&quot;</span>)</span><br><span class="line">    number = <span class="built_in">int</span>(sc())</span><br><span class="line"></span><br><span class="line">    pr(<span class="string">f&#x27;You only have <span class="subst">&#123;number&#125;</span> chances to try&#x27;</span>)</span><br><span class="line">    success = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(number):</span><br><span class="line">        Gx = secure_choice(select)</span><br><span class="line">        R = Rng(<span class="number">25</span>)</span><br><span class="line">        pr(<span class="string">&#x27;Gx = &#x27;</span>,Gx)</span><br><span class="line">        pr(<span class="string">&#x27;Px = &#x27;</span>,shout(Gx, R, q, a, b))</span><br><span class="line">        R_n = <span class="built_in">int</span>(sc().rstrip(<span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> R_n != R:</span><br><span class="line">            pr(<span class="string">f&#x27;Wrong number!!!,Here is your right number <span class="subst">&#123;R&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pr(<span class="string">&#x27;GGood!&#x27;</span>)</span><br><span class="line">            success += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(success)/<span class="built_in">int</span>(number) &lt;= <span class="number">0.262</span>:</span><br><span class="line">        die(<span class="string">&#x27;Please Try more...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    random.seed(new_state)</span><br><span class="line">    iv_num = ADD(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">    iv = hashlib.sha256(<span class="built_in">str</span>(iv_num).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    key = hashlib.sha256(<span class="built_in">str</span>(new_state1).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    Aes = AES.new(key,AES.MODE_CBC, iv)</span><br><span class="line">    C = Aes.encrypt(pad(flag,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">    key_n, iv_n = <span class="built_in">int</span>(sc()), <span class="built_in">int</span>(sc())</span><br><span class="line">    iv1 = hashlib.sha256(<span class="built_in">str</span>(iv_n).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    key1 = hashlib.sha256(<span class="built_in">str</span>(key_n).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    Aes_verify = AES.new(key1,AES.MODE_CBC, iv1)</span><br><span class="line">    C_verify = unpad(Aes_verify.decrypt(C),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> C_verify == flag:</span><br><span class="line">        pr(<span class="string">&#x27;Congratulations🎇🎇🎇!!!!&#x27;</span>)</span><br><span class="line">        pr(<span class="string">&#x27;Here is your flag😊：&#x27;</span>, M)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pr(<span class="string">&#x27;Maybe you could get the right flag!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四届“网鼎杯”网络安全大赛青龙组 Crypto WriteUp</title>
      <link href="/post/53861/"/>
      <url>/post/53861/</url>
      
        <content type="html"><![CDATA[<h1 id="第四届网鼎杯网络安全大赛青龙组-crypto-writeup"><a class="markdownIt-Anchor" href="#第四届网鼎杯网络安全大赛青龙组-crypto-writeup"></a> 第四届“网鼎杯”网络安全大赛青龙组 Crypto WriteUp</h1><h2 id="crypto01"><a class="markdownIt-Anchor" href="#crypto01"></a> CRYPTO01</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">d = getPrime(<span class="number">299</span>)</span><br><span class="line">e = inverse(d,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">hint1 = p &gt;&gt; (<span class="number">512</span>-<span class="number">70</span>)</span><br><span class="line">hint2 = q &gt;&gt; (<span class="number">512</span>-<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hint1 = <span class="subst">&#123;hint1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hint2 = <span class="subst">&#123;hint2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">102986063343828181691017061322961752231482650979117614592328540336319559999419987417702811972323418742113520151888629472567603955481992514927285801019993715247868027388036294100323295206260750653997980051233409135844852567338000284382992259587294344858347675971990058869658603742150067210112531948312675289517</span></span><br><span class="line">e = <span class="number">94332227188033251470419190704216678578924281824166571884737945076375866824249376355159909654478713223003101525619990336866998705667204377661713202948952171655143192075943578946573888576484746209261469970149381872389631389369537155026693263975338398261567274837717090694055171425503933824240291370948820767571</span></span><br><span class="line">c = <span class="number">84437879482958388121051989985943610317985560730924629180079819055930253313815835352959163593476985818700482462237552702247843204909498317690512763185777267125647066466604295815291929505489611365030554559376546705541333232100362213541469056985011640358767366350305910694542127597286950765375388740496062563517</span></span><br><span class="line">hint1 = <span class="number">737132842226563731129</span></span><br><span class="line">hint2 = <span class="number">1083219649182192077965</span></span><br></pre></td></tr></table></figure><p>和上个月打的SCTF中Signin那题一样的思路  <a href="https://dawn1ight.github.io/post/30110/">SCTF 2024 Crypto WriteUp</a></p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: Unknown column alignment: e at position 15: \begin{array}e̲d = 1 mod(p-1)(…'>\begin{array}ed = 1 mod(p-1)(q-1) \\ed = 1+k(p-1)(q-1)  \\其中 p = p_{high} + p_{low} \\q = q_{high} + q_{low}  \\所以 e*d = 1+k*(n-(p_{high}+q_{high})-(p_{low}+q_{low})+1)\\因为e很大，d.bit=299，n.bit=e.bit，所以k.bit = 299  \\令s = (p_{low}+q_{low})，s.bit=512-70=443 \\上二元copper\end{array}</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">102986063343828181691017061322961752231482650979117614592328540336319559999419987417702811972323418742113520151888629472567603955481992514927285801019993715247868027388036294100323295206260750653997980051233409135844852567338000284382992259587294344858347675971990058869658603742150067210112531948312675289517</span></span><br><span class="line">e = <span class="number">94332227188033251470419190704216678578924281824166571884737945076375866824249376355159909654478713223003101525619990336866998705667204377661713202948952171655143192075943578946573888576484746209261469970149381872389631389369537155026693263975338398261567274837717090694055171425503933824240291370948820767571</span></span><br><span class="line">c = <span class="number">84437879482958388121051989985943610317985560730924629180079819055930253313815835352959163593476985818700482462237552702247843204909498317690512763185777267125647066466604295815291929505489611365030554559376546705541333232100362213541469056985011640358767366350305910694542127597286950765375388740496062563517</span></span><br><span class="line">hint1 = <span class="number">737132842226563731129</span></span><br><span class="line">hint2 = <span class="number">1083219649182192077965</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">d = f.degree()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(f, Polynomial):</span><br><span class="line">x, = polygens(f.base_ring(), f.variable_name(), <span class="number">1</span>)</span><br><span class="line">f = f(x)</span><br><span class="line"></span><br><span class="line">R = f.base_ring()</span><br><span class="line">N = R.cardinality()</span><br><span class="line"></span><br><span class="line">f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">base = N^(m-i) * f^i</span><br><span class="line"><span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">G.append(g)</span><br><span class="line"></span><br><span class="line">B, monomials = G.coefficient_matrix()</span><br><span class="line">monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">B = B.change_ring(QQ)</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line"></span><br><span class="line">H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B*monomials):</span><br><span class="line">H.append(h)</span><br><span class="line">I = H.ideal()</span><br><span class="line"><span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">H.pop()</span><br><span class="line"><span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">roots = []</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">roots.append(root)</span><br><span class="line"><span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p_h = hint1 &lt;&lt; (<span class="number">512</span>-<span class="number">70</span>)</span><br><span class="line">q_h = hint2 &lt;&lt; (<span class="number">512</span>-<span class="number">70</span>)</span><br><span class="line">R.&lt;k,s&gt; = PolynomialRing(Zmod(e))</span><br><span class="line">f = <span class="number">1</span>+k*(n-(p_h+q_h)-s+<span class="number">1</span>)</span><br><span class="line">bounds=(<span class="number">2</span>^<span class="number">299</span>,<span class="number">2</span>^<span class="number">442</span>)</span><br><span class="line"><span class="built_in">print</span>(small_roots(f , bounds , m=<span class="number">3</span> , d=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>得到 $s=(p_{low}+q_{low})=$9550178615344700914680629079025067847696951426770132671301164698245456687003654693629604604208743524263711750791129602421650031009422</p><p>列方程组求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入必要的库</span></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的数值</span></span><br><span class="line">n = <span class="number">102986063343828181691017061322961752231482650979117614592328540336319559999419987417702811972323418742113520151888629472567603955481992514927285801019993715247868027388036294100323295206260750653997980051233409135844852567338000284382992259587294344858347675971990058869658603742150067210112531948312675289517</span></span><br><span class="line">hint1 = <span class="number">737132842226563731129</span></span><br><span class="line">hint2 = <span class="number">1083219649182192077965</span></span><br><span class="line">sum_of_low_bits = <span class="number">9550178615344700914680629079025067847696951426770132671301164698245456687003654693629604604208743524263711750791129602421650031009422</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 hint 扩展到 512 位</span></span><br><span class="line">p_high = hint1 &lt;&lt; (<span class="number">512</span> - <span class="number">70</span>)</span><br><span class="line">q_high = hint2 &lt;&lt; (<span class="number">512</span> - <span class="number">70</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义低位变量</span></span><br><span class="line">p_low_bits = var(<span class="string">&#x27;p_low_bits&#x27;</span>)</span><br><span class="line">q_low_bits = var(<span class="string">&#x27;q_low_bits&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造 p 和 q 的完整表示</span></span><br><span class="line">p = p_high + p_low_bits</span><br><span class="line">q = q_high + q_low_bits</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造方程组</span></span><br><span class="line">eq1 = p * q == n</span><br><span class="line">eq2 = p_low_bits + q_low_bits == sum_of_low_bits</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 SageMath 的求解器来求解方程组</span></span><br><span class="line">solution = solve([eq1, eq2], p_low_bits, q_low_bits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(solution) &gt; <span class="number">0</span>:</span><br><span class="line">    p_low_solution = solution[<span class="number">0</span>][<span class="number">0</span>].rhs()</span><br><span class="line">    q_low_solution = solution[<span class="number">0</span>][<span class="number">1</span>].rhs()</span><br><span class="line">    p_value = p_high + p_low_solution</span><br><span class="line">    q_value = q_high + q_low_solution</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Found p: <span class="subst">&#123;p_value&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Found q: <span class="subst">&#123;q_value&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found.&quot;</span>)</span><br></pre></td></tr></table></figure><p>解RSA</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">12301968561617489464815050947766830293114620865458225788140524305916037841132536540947500706435198484135356575495711684836395758643449054231737718416631877</span></span><br><span class="line">q = <span class="number">8371510854380475760171492071954527819328254117130991402450088629039514773535702565532229588993733813828621162046243254767866899527502246818456584983541321</span></span><br><span class="line">n = <span class="number">102986063343828181691017061322961752231482650979117614592328540336319559999419987417702811972323418742113520151888629472567603955481992514927285801019993715247868027388036294100323295206260750653997980051233409135844852567338000284382992259587294344858347675971990058869658603742150067210112531948312675289517</span></span><br><span class="line">e = <span class="number">94332227188033251470419190704216678578924281824166571884737945076375866824249376355159909654478713223003101525619990336866998705667204377661713202948952171655143192075943578946573888576484746209261469970149381872389631389369537155026693263975338398261567274837717090694055171425503933824240291370948820767571</span></span><br><span class="line">c = <span class="number">84437879482958388121051989985943610317985560730924629180079819055930253313815835352959163593476985818700482462237552702247843204909498317690512763185777267125647066466604295815291929505489611365030554559376546705541333232100362213541469056985011640358767366350305910694542127597286950765375388740496062563517</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> GCD(e,phi)==<span class="number">1</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)  </span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="crypto02"><a class="markdownIt-Anchor" href="#crypto02"></a> CRYPTO02</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> flag</span><br><span class="line"><span class="comment">#flag = &#x27;wdflag&#123;123&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">victory_encrypt</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">    key = key.upper()</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    plaintext = plaintext.upper()</span><br><span class="line">    ciphertext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(plaintext):</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            shift = <span class="built_in">ord</span>(key[i % key_length]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            encrypted_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + shift) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">            ciphertext += encrypted_char</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ciphertext += char</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">victory_key = <span class="string">&quot;WANGDINGCUP&quot;</span></span><br><span class="line">victory_encrypted_flag = victory_encrypt(flag, victory_key)</span><br><span class="line"></span><br><span class="line">p = <span class="number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">7</span></span><br><span class="line">xG = <span class="number">0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798</span></span><br><span class="line">yG = <span class="number">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</span></span><br><span class="line">G = (xG, yG)</span><br><span class="line">n = <span class="number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span></span><br><span class="line">h = <span class="number">1</span></span><br><span class="line">zero = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">dA = nextprime(random.randint(<span class="number">0</span>, n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> dA &gt; n:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;warning!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition</span>(<span class="params">t1, t2</span>):</span><br><span class="line">    <span class="keyword">if</span> t1 == zero:</span><br><span class="line">        <span class="keyword">return</span> t2</span><br><span class="line">    <span class="keyword">if</span> t2 == zero:</span><br><span class="line">        <span class="keyword">return</span> t2</span><br><span class="line">    (m1, n1) = t1</span><br><span class="line">    (m2, n2) = t2</span><br><span class="line">    <span class="keyword">if</span> m1 == m2:</span><br><span class="line">        <span class="keyword">if</span> n1 == <span class="number">0</span> <span class="keyword">or</span> n1 != n2:</span><br><span class="line">            <span class="keyword">return</span> zero</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k = (<span class="number">3</span> * m1 * m1 + a) % p * gmpy2.invert(<span class="number">2</span> * n1 , p) % p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        k = (n2 - n1 + p) % p * gmpy2.invert((m2 - m1 + p) % p, p) % p</span><br><span class="line">    m3 = (k * k % p - m1 - m2 + p * <span class="number">2</span>) % p</span><br><span class="line">    n3 = (k * (m1 - m3) % p - n1 + p) % p</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(m3),<span class="built_in">int</span>(n3))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiplication</span>(<span class="params">x, k</span>):</span><br><span class="line">    ans = zero</span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(t &lt;= k):</span><br><span class="line">        <span class="keyword">if</span> (k &amp;t )&gt;<span class="number">0</span>:</span><br><span class="line">            ans = addition(ans, x)</span><br><span class="line">        x = addition(x, x)</span><br><span class="line">        t &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getrs</span>(<span class="params">z, k</span>):</span><br><span class="line">    (xp, yp) = P</span><br><span class="line">    r = xp</span><br><span class="line">    s = (z + r * dA % n) % n * gmpy2.invert(k, n) % n</span><br><span class="line">    <span class="keyword">return</span> r,s</span><br><span class="line"></span><br><span class="line">z1 = random.randint(<span class="number">0</span>, p)</span><br><span class="line">z2 = random.randint(<span class="number">0</span>, p)</span><br><span class="line">k = random.randint(<span class="number">0</span>, n)</span><br><span class="line">P = multiplication(G, k)</span><br><span class="line">hA = multiplication(G, dA)</span><br><span class="line">r1, s1 = getrs(z1, k)</span><br><span class="line">r2, s2 = getrs(z2, k)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(r1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(r2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;s2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(s2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;z1 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(z1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;z2 = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(z2))</span><br><span class="line"></span><br><span class="line">key = sha256(long_to_bytes(dA)).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC)</span><br><span class="line">iv = cipher.iv</span><br><span class="line">encrypted_flag = cipher.encrypt(pad(victory_encrypted_flag.encode(), AES.block_size))</span><br><span class="line">encrypted_flag_hex = binascii.hexlify(iv + encrypted_flag).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encrypted flag (AES in CBC mode, hex):&quot;</span>, encrypted_flag_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># r1 = 79874160726532694994695169930412771917232180361879898603881940022649943683773</span></span><br><span class="line"><span class="comment"># r2 = 79874160726532694994695169930412771917232180361879898603881940022649943683773</span></span><br><span class="line"><span class="comment"># s1 = 29358608937016239753744265269188516080175172712689524937715100977220465955435</span></span><br><span class="line"><span class="comment"># s2 = 67554961634695394998835343503747996265453236901689755090159384880221643931064</span></span><br><span class="line"><span class="comment"># z1 = 111511522136129031618364434769531873844221489323948711851532783654702149742966</span></span><br><span class="line"><span class="comment"># z2 = 47212724661755436010060930908038151157054551065082199607150851950104041315615</span></span><br><span class="line"><span class="comment"># (&#x27;Encrypted flag (AES in CBC mode, hex):&#x27;, u&#x27;103fb6abfe2757b21f6f9ce6901af904cee9f46ce8adb7d42d0c52e968c6bb5ba0bd2b526db879c5e1fd2f452a2bb67eba3f45fac530f43d878408a763e900eb&#x27;)</span></span><br></pre></td></tr></table></figure><p>根据已知的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mn>1</mn><mo separator="true">,</mo><mi>r</mi><mn>2</mn><mo separator="true">,</mo><mi>s</mi><mn>1</mn><mo separator="true">,</mo><mi>s</mi><mn>2</mn><mo separator="true">,</mo><mi>z</mi><mn>1</mn><mo separator="true">,</mo><mi>z</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">r1, r2, s1, s2, z1, z2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">s</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">2</span></span></span></span>，我们可以推导出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 的值。根据 ECDSA 的签名生成过程，我们有以下关系：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>=</mo><mo stretchy="false">(</mo><mi>k</mi><mo>⋅</mo><mi>G</mi><msub><mo stretchy="false">)</mo><mi>x</mi></msub><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">r=(k⋅G)_x\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mo stretchy="false">(</mo><mi>z</mi><mo>+</mo><mi>r</mi><mo>⋅</mo><mi>d</mi><mi>A</mi><mo stretchy="false">)</mo><mo>⋅</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">s=(z+r⋅dA)⋅k^{-1}\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p>因此，我们可以写出：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mn>1</mn><mo>=</mo><mo stretchy="false">(</mo><mi>z</mi><mn>1</mn><mo>+</mo><mi>r</mi><mn>1</mn><mo>⋅</mo><mi>d</mi><mi>A</mi><mo stretchy="false">)</mo><mo>⋅</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">s1=(z1+r1⋅dA)⋅k^{-1}\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mn>2</mn><mo>=</mo><mo stretchy="false">(</mo><mi>z</mi><mn>2</mn><mo>+</mo><mi>r</mi><mn>2</mn><mo>⋅</mo><mi>d</mi><mi>A</mi><mo stretchy="false">)</mo><mo>⋅</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">s2=(z2+r2⋅dA)⋅k^{-1}\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p>从上面的两个方程中，我们可以解出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 的值。</p><p>首先，我们可以通过以下方程消去 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">dA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span></span></span></span>：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mo>⋅</mo><mi>k</mi><mo>≡</mo><msub><mi>z</mi><mn>1</mn></msub><mo>+</mo><msub><mi>r</mi><mn>1</mn></msub><mo>⋅</mo><mi>d</mi><mi>A</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">s_1⋅k\equiv z_1+r_1⋅dA\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub><mo>⋅</mo><mi>k</mi><mo>≡</mo><msub><mi>z</mi><mn>2</mn></msub><mo>+</mo><msub><mi>r</mi><mn>2</mn></msub><mo>⋅</mo><mi>d</mi><mi>A</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">s_2⋅k\equiv z_2+r_2⋅dA\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p>两式相减得：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mo>⋅</mo><mi>k</mi><mo>−</mo><msub><mi>s</mi><mn>2</mn></msub><mo>⋅</mo><mi>k</mi><mo>≡</mo><msub><mi>z</mi><mn>1</mn></msub><mo>+</mo><msub><mi>r</mi><mn>1</mn></msub><mo>⋅</mo><mi>d</mi><mi>A</mi><mo>−</mo><mo stretchy="false">(</mo><msub><mi>z</mi><mn>2</mn></msub><mo>+</mo><msub><mi>r</mi><mn>2</mn></msub><mo>⋅</mo><mi>d</mi><mi>A</mi><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">s_1⋅k-s_2⋅k\equiv z_1+r_1⋅dA-(z_2+r_2⋅dA)\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>s</mi><mn>1</mn></msub><mo>−</mo><msub><mi>s</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>⋅</mo><mi>k</mi><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>z</mi><mn>1</mn></msub><mo>−</mo><msub><mi>z</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><msub><mi>r</mi><mn>1</mn></msub><mo>−</mo><msub><mi>r</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>⋅</mo><mi>d</mi><mi>A</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">(s_1-s_2)⋅k\equiv(z_1-z_2)+(r_1-r_2)⋅dA\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p>因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">r_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">r_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>相同，所以上式简化为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>s</mi><mn>1</mn></msub><mo>−</mo><msub><mi>s</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>⋅</mo><mi>k</mi><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>z</mi><mn>1</mn></msub><mo>−</mo><msub><mi>z</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">(s_1-s_2)⋅k\equiv(z_1-z_2)\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>z</mi><mn>1</mn></msub><mo>−</mo><msub><mi>z</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mn>1</mn></msub><mo>−</mo><msub><mi>s</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">k\equiv(z_1-z_2)⋅(s_1-s_2)-1\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> mod_inverse</span><br><span class="line"><span class="comment"># 已知值</span></span><br><span class="line">r1 = <span class="number">79874160726532694994695169930412771917232180361879898603881940022649943683773</span></span><br><span class="line">r2 = <span class="number">79874160726532694994695169930412771917232180361879898603881940022649943683773</span></span><br><span class="line">s1 = <span class="number">29358608937016239753744265269188516080175172712689524937715100977220465955435</span></span><br><span class="line">s2 = <span class="number">67554961634695394998835343503747996265453236901689755090159384880221643931064</span></span><br><span class="line">z1 = <span class="number">111511522136129031618364434769531873844221489323948711851532783654702149742966</span></span><br><span class="line">z2 = <span class="number">47212724661755436010060930908038151157054551065082199607150851950104041315615</span></span><br><span class="line">n = <span class="number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 k</span></span><br><span class="line">delta_z = (z1 - z2) % n</span><br><span class="line">delta_s = (s1 - s2) % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 delta_s 的模逆元</span></span><br><span class="line">inverse_delta_s = mod_inverse(delta_s, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 k</span></span><br><span class="line">k = (delta_z * inverse_delta_s) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k =&quot;</span>, k)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到了k，现在我们可以利用已知的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>r</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">r_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">s_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">z_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>来计算私钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">dA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>z</mi><mn>1</mn></msub><mo>+</mo><msub><mi>r</mi><mn>1</mn></msub><mo separator="true">⋅</mo><mi>d</mi><mi>A</mi><mo stretchy="false">)</mo><mo separator="true">⋅</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">s_1=(z_1+r_1·dA)·k^{-1}\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">⋅</mo><mi>k</mi><mo>≡</mo><msub><mi>z</mi><mn>1</mn></msub><mo>+</mo><msub><mi>r</mi><mn>1</mn></msub><mo separator="true">⋅</mo><mi>d</mi><mi>A</mi><mspace></mspace><mspace width="0.6666666666666666em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">s_1·k\equiv z_1+r_1·dA\mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi><mo>≡</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">⋅</mo><mi>k</mi><mo>−</mo><msub><mi>z</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo separator="true">⋅</mo><msubsup><mi>r</mi><mn>1</mn><mrow><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">dA\equiv (s_1·k-z_1)·r_1^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.120547em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.433692em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">temp = (s1 * k - z1) % n</span><br><span class="line">inverse_r1 = mod_inverse(r1, n)</span><br><span class="line">dA = (temp * inverse_r1) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dA =&quot;</span>, dA)</span><br></pre></td></tr></table></figure><p>解AES</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">victory_encrypted_flag = <span class="string">&quot;103fb6abfe2757b21f6f9ce6901af904cee9f46ce8adb7d42d0c52e968c6bb5ba0bd2b526db879c5e1fd2f452a2bb67eba3f45fac530f43d878408a763e900eb&quot;</span></span><br><span class="line">encrypted_flag = binascii.unhexlify(victory_encrypted_flag)</span><br><span class="line">iv = encrypted_flag[:<span class="number">16</span>]</span><br><span class="line">ciphertext = encrypted_flag[<span class="number">16</span>:]</span><br><span class="line">key = sha256(long_to_bytes(dA)).digest()</span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC,iv=iv)</span><br><span class="line">decrypted_flag = unpad(cipher.decrypt(ciphertext), AES.block_size)</span><br><span class="line"><span class="built_in">print</span>(decrypted_flag)</span><br></pre></td></tr></table></figure><p>解位移密码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">victory_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    key = key.upper()</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    ciphertext = ciphertext.upper()</span><br><span class="line">    plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphertext):</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            shift = <span class="built_in">ord</span>(key[i % key_length]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            decrypted_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - shift) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">            plaintext += decrypted_char</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plaintext += char</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line">victory_key = <span class="string">&quot;WANGDINGCUP&quot;</span></span><br><span class="line">flag = victory_decrypt(decrypted_flag.decode(), victory_key)</span><br><span class="line"><span class="built_in">print</span>(flag.lower())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHCTF2024 Crypto WriteUp</title>
      <link href="/post/23197/"/>
      <url>/post/23197/</url>
      
        <content type="html"><![CDATA[<h1 id="shctf2024-crypto-writeup"><a class="markdownIt-Anchor" href="#shctf2024-crypto-writeup"></a> SHCTF2024 Crypto WriteUp</h1><p>Author: <em>dawn1ight</em></p><p>这里记录一下一些值得学习的题目</p><p>有些是板子题，也记录一下，现在年纪大了健忘😅</p><p>Challenges: <a href="https://shc.tf/">https://shc.tf/</a></p><p>References:</p><ul><li><a href="https://www.cnblogs.com/naby/p/18453402">SHCTF2024-week1-crypto&amp;其他 - Naby - 博客园</a></li><li><a href="https://mp.weixin.qq.com/s/33nH9RHgr-WKun_3s-VDBQ">SHCTF-2024-Week2 官方WP</a></li><li><a href="https://www.cnblogs.com/naby/p/18494522">SHCTF2024-week3-Crypto - Naby - 博客园</a></li><li><a href="https://mp.weixin.qq.com/s/dUcx4dYeURb24gkqB4iSYQ">SHCTF-2024-Week3 官方WP</a></li><li><a href="https://tangcuxiaojikuai.xyz/post/1dda48e6.html">2024-SHCTF-week4-wp-crypto | 糖醋小鸡块的blog</a></li><li><a href="https://mp.weixin.qq.com/s/ekss3fOeQhhfVNMIvqrP1Q">SHCTF-2024-Week4 官方WP</a></li></ul><hr /><h2 id="week1-baby_mod"><a class="markdownIt-Anchor" href="#week1-baby_mod"></a> [Week1] baby_mod</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">777</span>)</span><br><span class="line">t = getPrime(<span class="number">777</span>)</span><br><span class="line">tmp = getPrime(<span class="number">15</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;<span class="built_in">pow</span>(m,e,n)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;leak = <span class="subst">&#123;p*r-q*t-tmp&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;r = <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;t = <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 45437656714471121627138355157760519584383877487083560638903569231003753429372236070673691857077169730892603519190227245821716759904875309795146278716052074220641458531647162288390402966859091110298425439892694611261350164211397322166134468062254148404013023967282115714260566980579790675450977684598154683785</span></span><br><span class="line"><span class="string">leak = 917729846530514329091476751337548142663910269694651103714041735452546026352121711031281639288281121290785017229906183907137403178781576858736428178204769128767097523395085267085771922696024764050979069087497065064591318989089775212833290963557483734212236438863620201740169796194249006164247654534569614690567400813756683870275745415498464733530190060496080241170104695379710002184233081</span></span><br><span class="line"><span class="string">r = 793229623087740428917628841295655826564196384346081225806981956029244585596768549762915374835268249941097061878943697142938918149057462225787338641617803276170476918982550729029779739695910685814521000495703548880378158347199461860861</span></span><br><span class="line"><span class="string">t = 744863076918695565453771645986298395285065781545937584151938034629094359251294022583665909210010813743205258526086574787553912036903279151072458100492653680636375191905874208421015881385428664217006240902142289558937906046107628918859</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到题目打算直接爆破<code>tmp</code>解方程组的</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>r</mi><mo>−</mo><mi>q</mi><mo>∗</mo><mi>t</mi><mo>−</mo><mi>t</mi><mi>m</mi><mi>p</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>q</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}leak = p*r-q*t-tmp \\n = p*q\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>发现题目没有给<code>n</code></p><p>这里的<code>r</code>和<code>t</code>都大于<code>p</code> <code>q</code>，所以相互取模得</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: gather* at position 7: \begin{̲g̲a̲t̲h̲e̲r̲*̲}̲leak \mod r = …'>\begin{gather*}leak \mod r = p*r-q*t-tmp \mod r \\leak + tmp \mod r = -q*t \mod r \\q = (leak + tmp) * (-t)^{-1} \mod r\end{gather*}</p><p>同理：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>=</mo><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>+</mo><mi>t</mi><mi>m</mi><mi>p</mi><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>r</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>t</mi></mrow><annotation encoding="application/x-tex">p = (leak+tmp)*(r)^{-1} \mod t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">t</span></span></span></span></span></p><p>exp : <a href="https://www.cnblogs.com/naby/p/18453402">SHCTF2024-week1-crypto&amp;其他 - Naby - 博客园 (cnblogs.com)</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">71234358574362873102364773802615022440394390446444390689714741290273256497624990382730338332158663555287988268595847316457126725465934797593513638874080685234812619607085870642413735129064333224013231845589579968352149987746733082038743926312136617735737911790112644979985292337941440005746915062896129072777</span></span><br><span class="line">leak = <span class="number">2217488402566151788696168373426094740519351868786430669391214527591322807736221920621550927091543088314007690386894840897074614743933753244173854967425133479984993125811498747715413075715060875227040103463552575330232198985262343584404068367662218021241516914268202429825385451154716855517698999217286233212883976929431520295647139310474770195069360507813140653593200423906263689190196941</span></span><br><span class="line">r = <span class="number">646318094023677204527871439846728286610915145770782515880490500338118827547552454143674595295593483857447183764297927877955433524028721434976463867920536240963456378175496414765880178663672652425288097309012713851733051985028662176767</span></span><br><span class="line">t = <span class="number">411152195791514027140198841770649225930812047768916179668614369267330226695072559818563655559461575922343428542543751957306358237424055209296982269437988221098480220776423566575802287022940784911752257706236556835428048277615354900397</span></span><br><span class="line"> </span><br><span class="line">tmp=<span class="number">1</span>&lt;&lt;<span class="number">14</span></span><br><span class="line">tmp=next_prime(tmp)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="built_in">int</span>(tmp).bit_length()==<span class="number">15</span>:</span><br><span class="line">    x=leak+tmp</span><br><span class="line"> </span><br><span class="line">    pr=x%t</span><br><span class="line">    p=pr*invert(r,t)%t</span><br><span class="line"> </span><br><span class="line">    qt=x%r</span><br><span class="line">    q=qt*invert(-t,r)%r</span><br><span class="line">    </span><br><span class="line">    flag=long_to_bytes(<span class="built_in">pow</span>(c,invert(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)),p*q))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;SHCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    tmp=next_prime(tmp)</span><br><span class="line"><span class="comment">#b&#x27;SHCTF&#123;004df497-194a-4adb-a675-498ff80946a4&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="week1-d_known"><a class="markdownIt-Anchor" href="#week1-d_known"></a> [Week1] d_known</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 14754616342385889226523163233456626568583338878447677477264123879922299212851590995108562476976996490186514544769418956576341111197302389433443137591895978122078984343835532649853533922077743108464133594580310257053247234842242258806721334957785422917026938427617572724815559629348765182822868167461354410531375298557821414707229842536823730755256236156265393650672208226959679400363171690605392134085613189512188350291521387717943632410029686096047041138679963736410397635219464470679503925465247560375777761232386822645099986930268675702669789410403561035948651071816164753385550305724927173844685486745218901991290</span></span><br><span class="line"><span class="string">d = 1584002925248818192743719398743841252208212886071330412633566311356101418040520835843589445425449520698531124917534031266832064627999754033796468790621713333536602778546404704190223202391198167915559642317735981777155889248989261442106757720828921863135304104689505591364608198280118905994363913345364214854979318711326654443828720544265881180686096392455926490169653966632767375383674720009286851902968122706469860651407253475439283722507941794337069535019618439934799606721929935849809583256872132873264812878836099510558296186289301055199336236663148519774947000850709818659346623288768867037411488897123286770273</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一次看到已知<code>e</code> <code>c</code> <code>d</code>，未知<code>n</code>的，顺手记录一下</p><p>因为  $$e∗d=1+k(p-1)∗(q-1)$$</p><p>其中e.bit_length = 17 , d.bit_length = 2044，e*d.bit_length = 17+2044=2061</p><p>所以k.bit_length = 2061-2048 = 13</p><p>k的位数较小，直接爆破，得到k后，开根找<code>p</code> <code>q</code></p><p>exp: <a href="https://www.cnblogs.com/naby/p/18453402">SHCTF2024-week1-crypto&amp;其他 - Naby - 博客园 (cnblogs.com)</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line">c = <span class="number">6732251865518539816164424072881268319031331097652330813280683433357801335392912177839752934223666820817426632127352928430012362924774912477109386830642999347655174646486445749282081282131296883166737218186933150962954375021792510359249354608393910760866285720493437099307009772363622740758020450195058117428033257931181355503862561253831338555714889714354329478309157001314105412865222237034290374400091189055727376519273128476126263310458266841590313023188003911952343519869473445661561073623892887752662030827442327135879769080060164402731521556649771103135168057114303776160563813899618546785999749664177453632113</span></span><br><span class="line">d = <span class="number">11371580488052460364061084069704641839174413746220695175554663449524234948335256195937545669217400540775148109520252191887923992650699774976840228129947067273971611578960093458221417649211802998948255284549550327209608951277790691750176306647013841775784127208779682066022248206322448435923296521731067094090722931128289230166731316016559509613812382769439697093763600981220856565912350418801087801159700549049260015100996680924659351921989952140635505978192913908332000472530408585162635570201105801365273780636017489787165910874274076972387901429211792329811097435011802258823111183660801103517212211007626963313585</span></span><br><span class="line"> </span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"> </span><br><span class="line">p_bits=<span class="number">1024</span></span><br><span class="line">q_bits=<span class="number">1024</span></span><br><span class="line"> </span><br><span class="line">k_phi = e*d -<span class="number">1</span></span><br><span class="line">pphi = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(e,<span class="number">2</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> k_phi % k == <span class="number">0</span>:</span><br><span class="line">        tmp = k_phi // k</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(tmp).bit_length()==p_bits+q_bits:</span><br><span class="line">            pphi.append(tmp)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pphi))</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> pphi:</span><br><span class="line">    pp=iroot(k,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    pp=next_prime(pp)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        flag=long_to_bytes(<span class="built_in">pow</span>(c,invert(e,pp-<span class="number">1</span>),pp))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;SHCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            exit()</span><br><span class="line">        pp=next_prime(pp)</span><br><span class="line"><span class="comment">#b&#x27;SHCTF&#123;a47dee42-f097-4aa8-b0a4-5183df80b230&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="week2-worde很大"><a class="markdownIt-Anchor" href="#week2-worde很大"></a> [Week2] worde很大</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = getPrime(<span class="number">200</span>)</span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">dp = d % (p-<span class="number">1</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dp = <span class="subst">&#123;dp&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 88542777790587575958856535465544599238988794938932395236356028878208693584553921119734886663063387114985956647258226878203724318615294722034106396937919235154861105785869874151270067925203729926989428004839944095750101187948993624810926392104761625157561710259470296817872143022024487507072861006495754688653</span></span><br><span class="line"><span class="string">c = 4141222246815895616291413394343312964175715946241779591801652809315536569381063955911406475498467635919469098028234013454537502595095924767681446516595753207198369151203658212276072550342924879998539629809265836285575387813466965366640792684375303199812785289313990143066954674834496302632946904071326609297</span></span><br><span class="line"><span class="string">e = 1245551412820870740174723390060313799694721899963655821368021</span></span><br><span class="line"><span class="string">dp = 3987147738497114215543342475012772407316738649850763986799558233896894884270854903426184789815541134132666857825062494954944564442089304100964792551427901</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一眼看：dp泄露，直接上脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"></span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line">dp = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line"><span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):</span><br><span class="line">p=(e*dp-<span class="number">1</span>)//x+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span>(n%p!=<span class="number">0</span>):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">q=n//p</span><br><span class="line">phin=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gp.invert(e, phin)</span><br><span class="line">m=gp.powmod(c, d, n)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">1</span>):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>代码跑起来发现问题：<code>e</code>太大了，<code>for x in range(1, e):</code>循环不了</p><p>这里复习一下dp泄露的推导：<a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#%E7%BB%99n-e-dp-c">RSA | Lazzaro</a></p><center><img src="https://s2.loli.net/2024/10/22/wPOuf9SmZpCsVoe.png"/></center><p>[官方WP](<a href="https://mp.weixin.qq.com/s/33nH9RHgr-WKun_3s-VDBQ">SHCTF-2024-Week2 官方WP</a>)中给出了另一种思路：</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: Got function &#039;\newline&#039; with no arguments as argument to &#039;\begin{array}&#039; at position 1: \̲n̲e̲w̲l̲i̲n̲e̲'>\begin{array}\\d_p \equiv d \mod (p-1) \\ed \equiv 1 \mod (p-1)(q-1) \\m^{ed_p}\mod n \equiv m^{ed\mod (p-1)} \mod p\equiv m^{1+k(p-1)}\mod p \\Fermat&#039;s\;little\;theorem: a^{p-1} \equiv 1 \mod p \\\therefore m^{1+k(p-1)}\mod p \equiv m \mod p \\\therefore m^{ed_p}\mod n - m \equiv 0 \mod p \\p = gcd(m^{ed_p}\mod n - m , n)\end{array}</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_dp_leak</span>(<span class="params">e,dp,n,c</span>):</span><br><span class="line">    p = gmpy2.gcd(<span class="built_in">pow</span>(<span class="number">5</span>,e*dp,n)-<span class="number">5</span>,n)</span><br><span class="line">    q = n//p</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = gmpy2.invert(e,phi)</span><br><span class="line">        m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">64921145375403083545531864956984072151341856682908111104267811008333409469629440124743589471022387528791249789776590881987854906662741019934835451842451919000617925805744632898434110555454137681326076564563593722826588259739946684132723368750061113163201190149766894752415770470935877082883818815783228793301</span></span><br><span class="line">c = <span class="number">44359153953700249051087265515623429893507549101698748624219639421725336531447633500661794130815898489480094607965932371706122863829042269163279628456581736821883648892589019882848750637212268727873179153330759038867740405957550265592570772766459698597324782564295219919626040670464946117978529709691316881784</span></span><br><span class="line">e = <span class="number">1039743120668324617408742378768011653641207981199791545288831</span></span><br><span class="line">dp = <span class="number">8095244708261074732722010639332938624538458336137147330884467084239259958828296552002478065663880970649018267223959758006546150783644433676150589502506131</span></span><br><span class="line">flag = solve_dp_leak(e,dp,n,c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="week2-pading"><a class="markdownIt-Anchor" href="#week2-pading"></a> [Week2] pading</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">flag = <span class="string">b&#x27;SHCTF&#123;********&#125;&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">39</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line">pad = <span class="string">b&#x27;a_easy_problem&#x27;</span></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag + pad),e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 91962111715720628931777486647875963597059245014993834637215306985302903621464344605955155370348537698530851713548856588595357527678260117697489817054763356250308965979522594496834705694372742092292311232828638584584609342951267373570856946545879808444285055808517549024876269033273404965254049332343508104863</span></span><br><span class="line"><span class="string">c = 835987509864121006527888651109319907471805581850280147445733978677695297628994680781831454726352944669970247353856138381638935782695381894498099459107034055303822413288778616502133532974585719609649449865222654363240517858566923788177475848463204393365238566405496963006673163725540787729555001445755141253</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在小<code>e</code>下，知道m的低位</p><p>这种知道高低位的基本都是coppersmith的应用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = <span class="number">101194231761192803646875794770841105131876105333404505987513576849142365482512109876401629071314564545841743473668262668053559550015874646299248232349238400201145583346187330958825878235324968882794481192056169683711007095999439320830763275487477094590502701333963154552470777678553556993349171608134555815527</span></span><br><span class="line">c = <span class="number">54067443511581567434123971345564905390315631873898717856316286990552318113901362505672245448553258416669456882532743580961176229271906817289588426185966004215569829572814038485471312399063659287164712291139771809733004385057875146223151700601326161190474536508680332925332614914475852998934930375151571163346</span></span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line">pad = <span class="string">b&#x27;a_easy_problem&#x27;</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (x * <span class="number">256</span> ** <span class="built_in">len</span>(pad) + libnum.s2n(pad)) ** e - c</span><br><span class="line"></span><br><span class="line">f = f.monic()</span><br><span class="line">root = f.small_roots(X=<span class="number">2</span> ** (<span class="number">39</span> * <span class="number">8</span>),beta=<span class="number">0.9</span>,epsilon=<span class="number">0.03</span>)</span><br><span class="line"><span class="built_in">print</span>(root)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(root[<span class="number">0</span>])))</span><br></pre></td></tr></table></figure><p>参数的考虑：</p><blockquote><p>pad我们是知道的，且告诉了我们flag的位数为39，39 * 8 = 312，e次方为312* 3 = 936，</p><p>而n的位数为1024，312的flag相对于1024的n来说是小值，可用coppersmith的方法求得，</p><p>beta的值依据912/1024=0.91取整为0.9，epslilon的值慢慢放小</p></blockquote><h2 id="week2-er"><a class="markdownIt-Anchor" href="#week2-er"></a> [Week2] E&amp;R</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">flag = flag[<span class="number">6</span>:-<span class="number">1</span>]</span><br><span class="line">l = <span class="built_in">len</span>(flag)</span><br><span class="line">m1 = bytes_to_long(flag[:l//<span class="number">2</span>])</span><br><span class="line">m2 = bytes_to_long(flag[l//<span class="number">2</span>:])</span><br><span class="line"><span class="comment">#RSA</span></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">r_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">2</span>:][::-<span class="number">1</span>] , <span class="number">2</span>)</span><br><span class="line">leak = p ^^ r_q</span><br><span class="line">c = <span class="built_in">pow</span>(m2,e,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ECC</span></span><br><span class="line">E = EllipticCurve(Zmod(n),[<span class="number">114514</span>,<span class="number">1919810</span>])</span><br><span class="line">G = E.lift_x(Integer(m1))</span><br><span class="line">P = G * e</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak = <span class="subst">&#123;leak&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;P = <span class="subst">&#123;P&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># leak = 5599968251197363876087002284371721787318931284225671549507477934076746561842</span></span><br><span class="line"><span class="comment"># n = 7120275986401660066259983193598830554385933355254283093021239164350142898387660104515624591378875067038235085428170557400012848874756868985306042421950909</span></span><br><span class="line"><span class="comment"># c = 6803450117490196163076010186755045681029929816618361161925865477601994608941714788803007124967390157378525581080320415602012078322064392991884070073083436</span></span><br><span class="line"><span class="comment"># P = (4143131125485719352848137000299706175276016714942734255688381872061184989156686585992844083387698688432978380177564346382756951426943827434190895490233627 : 3879946878859691332371384275396678851932267609535096278038417524609690721322205780110680003522999409696718745532857001461869452116434787256032366267905519 : 1)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复习一下RSA剪枝</p><ul><li><a href="https://sch01ar.github.io/2023/11/07/%E5%89%AA%E6%9E%9D/">一些关于p^q问题剪枝算法 - Y’s blog</a></li><li><a href="https://tangcuxiaojikuai.xyz/post/342113ee.html">Crypto趣题-剪枝 | 糖醋小鸡块的blog</a></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">pxorq = <span class="number">5599968251197363876087002284371721787318931284225671549507477934076746561842</span></span><br><span class="line">n = <span class="number">7120275986401660066259983193598830554385933355254283093021239164350142898387660104515624591378875067038235085428170557400012848874756868985306042421950909</span></span><br><span class="line">c = <span class="number">6803450117490196163076010186755045681029929816618361161925865477601994608941714788803007124967390157378525581080320415602012078322064392991884070073083436</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">pxorq = <span class="built_in">str</span>(<span class="built_in">bin</span>(pxorq)[<span class="number">2</span>:]).zfill(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">ph, qh, pl, ql</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(ph)</span><br><span class="line">    tmp0 = ph + (<span class="number">256</span> - <span class="number">2</span> * l) * <span class="string">&quot;0&quot;</span> + pl</span><br><span class="line">    tmp1 = ph + (<span class="number">256</span> - <span class="number">2</span> * l) * <span class="string">&quot;1&quot;</span> + pl</span><br><span class="line">    tmq0 = qh + (<span class="number">256</span> - <span class="number">2</span> * l) * <span class="string">&quot;0&quot;</span> + ql</span><br><span class="line">    tmq1 = qh + (<span class="number">256</span> - <span class="number">2</span> * l) * <span class="string">&quot;1&quot;</span> + ql</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(tmp0, <span class="number">2</span>) * <span class="built_in">int</span>(tmq0, <span class="number">2</span>) &gt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(tmp1, <span class="number">2</span>) * <span class="built_in">int</span>(tmq1, <span class="number">2</span>) &lt; n):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(pl, <span class="number">2</span>) * <span class="built_in">int</span>(ql, <span class="number">2</span>) % (<span class="number">2</span> ** (l - <span class="number">1</span>)) != n % (<span class="number">2</span> ** (l - <span class="number">1</span>))):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">128</span>):</span><br><span class="line">        pp0 = <span class="built_in">int</span>(tmp0, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (n % pp0 == <span class="number">0</span>):</span><br><span class="line">            pf = pp0</span><br><span class="line">            qf = n // pp0</span><br><span class="line">            <span class="built_in">print</span>(pf)</span><br><span class="line">            <span class="built_in">print</span>(qf)</span><br><span class="line">            phi = (pf - <span class="number">1</span>) * (qf - <span class="number">1</span>)</span><br><span class="line">            d = inverse(e, phi)</span><br><span class="line">            m1 = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> (pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span> - l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">        <span class="keyword">elif</span> (pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span> - l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">        <span class="keyword">elif</span> (pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span> - l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">        <span class="keyword">elif</span> (pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span> - l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;0&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;0&quot;</span> + ql)</span><br><span class="line">            find(ph + <span class="string">&quot;1&quot;</span>, qh + <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span> + pl, <span class="string">&quot;1&quot;</span> + ql)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment">#p = 64760524083545528318139240449356269097871629401328435356643510319660757701117</span></span><br><span class="line"><span class="comment">#q = 109947782034870726628911928816041880655659770652764045401662566933641952899777</span></span><br><span class="line"><span class="comment">#-908f-7c002c687387</span></span><br></pre></td></tr></table></figure><p>ECC部分，因为<code>n</code>不是质数，<code>E = EllipticCurve(Zmod(n),[114514,1919810])</code>无法直接算<code>E.order</code></p><blockquote><p>第二部分是ECC，曲线在模n上的阶不好直接算，而<code>n = pq</code>，那么我们可以分别构建在模p和模q上的曲线，然后分别计算其阶，进而得到曲线在模n上的阶，接下来就计算出e对于曲线的逆元求出点G，其横坐标即为flag部分</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">64760524083545528318139240449356269097871629401328435356643510319660757701117</span></span><br><span class="line">q = <span class="number">109947782034870726628911928816041880655659770652764045401662566933641952899777</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">7120275986401660066259983193598830554385933355254283093021239164350142898387660104515624591378875067038235085428170557400012848874756868985306042421950909</span></span><br><span class="line">E = EllipticCurve(Zmod(n),[<span class="number">114514</span>,<span class="number">1919810</span>])</span><br><span class="line">Eq = EllipticCurve(Zmod(p),[<span class="number">114514</span>,<span class="number">1919810</span>])</span><br><span class="line">Ep = EllipticCurve(Zmod(q),[<span class="number">114514</span>,<span class="number">1919810</span>])</span><br><span class="line">P = E(<span class="number">4143131125485719352848137000299706175276016714942734255688381872061184989156686585992844083387698688432978380177564346382756951426943827434190895490233627</span>,<span class="number">3879946878859691332371384275396678851932267609535096278038417524609690721322205780110680003522999409696718745532857001461869452116434787256032366267905519</span>)</span><br><span class="line"></span><br><span class="line">phi = Ep.order()*Eq.order()</span><br><span class="line">d = inverse_mod(e,phi)</span><br><span class="line">G = P*d</span><br><span class="line">x = G.xy()[<span class="number">0</span>]</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(x))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#a67b2a9b-0542-4646</span></span><br></pre></td></tr></table></figure><h2 id="week3-approximate_n"><a class="markdownIt-Anchor" href="#week3-approximate_n"></a> [Week3] Approximate_n</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">gen_AGCD</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = getPrime(<span class="number">512</span>)</span><br><span class="line">        self.q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc_</span>(<span class="params">self,M,e</span>):</span><br><span class="line">        C = <span class="built_in">pow</span>(M,e,self.p*self.q)</span><br><span class="line">        <span class="keyword">return</span> C</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">re_n</span>(<span class="params">self</span>):</span><br><span class="line">        n = self.p * self.q</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">re_approximate_n</span>(<span class="params">self</span>):</span><br><span class="line">        k = getPrime(<span class="number">512</span>)</span><br><span class="line">        r = getPrime(<span class="number">247</span>)</span><br><span class="line">        n_approx = k*self.p + r</span><br><span class="line">        <span class="keyword">return</span> n_approx</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    m1 = flag[:<span class="built_in">len</span>(flag)//<span class="number">2</span>]</span><br><span class="line">    m2 = flag[<span class="built_in">len</span>(flag)//<span class="number">2</span>:]</span><br><span class="line">    Encrypt1,Encrypt2 = gen_AGCD(),gen_AGCD()</span><br><span class="line">    C1,C2 = Encrypt1.enc_(bytes_to_long(m1),e),Encrypt2.enc_(bytes_to_long(m2),e)</span><br><span class="line">    N1,N2 = Encrypt1.re_n(),Encrypt2.re_n()</span><br><span class="line"></span><br><span class="line">    N1_reveal = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        N1_reveal.append(Encrypt1.re_approximate_n())</span><br><span class="line"></span><br><span class="line">    N2_reveal = Encrypt2.re_approximate_n()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;N1 = &#x27;</span>,N1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;N1_reveal = &#x27;</span>,N1_reveal)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;N2 = &#x27;</span>,N2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;N2_reveal = &#x27;</span>,N2_reveal)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C1 = &#x27;</span>,C1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C2 = &#x27;</span>,C2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N1 =  <span class="number">102962552313473681728723322027597495151261114315051654555740869168148851188107854721536927044442477024748737428557517373823588689936901897797548745673854079501679297287539034025897513808964218875037065595406090476664786378152185622507380646052951461871717529116320541684644754051755754531805285234195783459797</span></span><br><span class="line">N1_reveal =  [<span class="number">84964829388932061103921957564400125835225719859859510858139343342261376376157402024398819986017063183458456828492439572516643205332521427900739404476385470419622209362062083925319479315213697191724734211420880495849938453677919942805188598151056713085050385277709604039546106740559422133098067538922509028026</span>, <span class="number">55669509569768064992718044981508136553780767046165209632722329021340164900457535356449024438332915321096786789178632805942918771290307399969035141367566285033608334974253364423607773168674448262916865622517458219728181629393946832062619043643614691875540521738073083356495356354589975146111840434325826819198</span>, <span class="number">77685152020329500125709975458280809065472024091250688730112377730513223488123677602004197722852227049782404484028558802978507114097790917123660341486556373425727358230049052549163794395853900552906583518153257035524675564804300429030789204176869525785233188403701602735082197253517936111533915552254489942100</span>]</span><br><span class="line">N2 =  <span class="number">145695734665913924175257010903736847918479731583810112670586295711507006721687964045835283940602289356463440889254858811892174016632853579082476117049110447325282176943898704794699667611214913712864592929971488447744298834755679410556926588941532837174941263569541567155147274901631570672266026762222017289227</span></span><br><span class="line">N2_reveal =  <span class="number">106591311015041707504427951524895388920764384711385757797259452186432986318069454764620553244440558018454822708698461947331019517972650964856645609803899846038300130117604888308467416926253698141673017770502681168291198497788777522823584345758599336082924744440309241874946430102035624053576103790460393511000</span></span><br><span class="line">C1 =  <span class="number">31594760924666716787696903268342555231641698238925332007707704877423492362096435897073322741916758988157019741830738840842789410609168701142508513641113736572436428873604154027131784982853515763286590388817560388868474399310388515155495051085286726425733319515674947391576533055200594330161967599295787080238</span></span><br><span class="line">C2 =  <span class="number">4381442301959411454419528795285171587562699421595269409042378524455996065490866727436284838704991923851683436641171227423822439331431086471420344514064543535743315441111296570325222557430574781227184974662494500152603806343531164187542532001697617016254670457335540803929721604735961633537756194281168094293</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>AGCD问题(<em>The Approximate Common Divisor Problem</em>, 近似最大公约数问题)</p><blockquote><p>第一部分中返回了三个AGCD值，此时我们可以考虑使用传统的AGCD问题中的SDA丢番图格进行攻击</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="comment">#https://eprint.iacr.org/2016/215.pdf</span></span><br><span class="line">Len = <span class="built_in">len</span>(N1_reveal)</span><br><span class="line">A = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Len)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Len)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Len):</span><br><span class="line">    A[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span>**<span class="number">251</span></span><br><span class="line">    A[i][i] = -N1_reveal[<span class="number">0</span>]</span><br><span class="line">    A[<span class="number">0</span>][i] = N1_reveal[i]</span><br><span class="line"></span><br><span class="line">A = matrix(ZZ,A)</span><br><span class="line">A_solve = A.LLL()</span><br><span class="line">p1 = <span class="built_in">int</span>(N1_reveal[<span class="number">0</span>]//(<span class="built_in">abs</span>(A_solve[<span class="number">0</span>][<span class="number">0</span>])//(<span class="number">2</span>^<span class="number">251</span>)))</span><br><span class="line">q1 = N1//p1</span><br><span class="line">flag1 = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(C1,inverse_mod(<span class="number">65537</span>,(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>)),N1)))</span><br></pre></td></tr></table></figure><blockquote><p>第二部分知道N2和N2_reveal的值，PACD问题。通过论文 Passive SSH Key Compromise via Lattices，我们可以知道PACD问题的解决手段，选取参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>j</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Q_j(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></p></blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Q</mi><mi>j</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>N</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mi>j</mi><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></msup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></msup><msup><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>j</mi><mo>−</mo><mi>k</mi><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></msup><mtext>  </mtext><mi>f</mi><mi>o</mi><mi>r</mi><mtext>  </mtext><mn>0</mn><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">Q_j(x)=N^{max(k-j,0)}f(x)^{min(j,k)}x^{max(j-k,0)}\;for\;0\le j\le t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">x</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span></p><p>格：</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: Got function &#039;\newline&#039; with no arguments as argument to &#039;\begin{array}&#039; at position 1: \̲n̲e̲w̲l̲i̲n̲e̲'>\begin{array}\\B=\begin{pmatrix} -2^{2log_r} &amp; 2^{log_r}N_1 &amp; 0\\ 0 &amp; -2^{log_r} &amp; N_1\\ 0 &amp; 0 &amp; N_0\end{pmatrix}\\\end{array}</p><p><code>B.LLL()</code>得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>r</mi></msub><mi>x</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(2^{log_rx})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve2</span>(<span class="params">N,N1,t,k,sys</span>):</span><br><span class="line">    var(<span class="string">&#x27;x y&#x27;</span>)</span><br><span class="line">    f = N1-x</span><br><span class="line">    Q_polys = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(t + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># print(max(k-j,0),min(j,k),max(j-k,0))</span></span><br><span class="line">        x1,x2,x3 = <span class="built_in">max</span>(k-j,<span class="number">0</span>),<span class="built_in">min</span>(j,k),<span class="built_in">max</span>(j-k,<span class="number">0</span>)</span><br><span class="line">        Q_polys.append(N^(<span class="built_in">max</span>(k-j,<span class="number">0</span>))*f^(<span class="built_in">min</span>(j,k))*x^(<span class="built_in">max</span>(j-k,<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(Q_polys)</span></span><br><span class="line">    <span class="built_in">len</span> = t+<span class="number">1</span></span><br><span class="line">    B = []</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Q_polys:</span><br><span class="line">        J = i.coefficients()</span><br><span class="line">        b = [<span class="number">0</span>*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>)]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> J:</span><br><span class="line">            <span class="comment"># print(j[0],j[1])</span></span><br><span class="line">            b[j[<span class="number">1</span>]] = ZZ(j[<span class="number">0</span>])*(<span class="number">2</span>**sys)**ZZ(j[<span class="number">1</span>])</span><br><span class="line">        B.append(b[::-<span class="number">1</span>])</span><br><span class="line">        num+=<span class="number">1</span></span><br><span class="line">    B = matrix(QQ,B)</span><br><span class="line">    solve_B = B.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===We have find the right B_LLL===&#x27;</span>)</span><br><span class="line">    BB = solve_B[<span class="number">0</span>]</span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>):</span><br><span class="line">        a.append(BB[i]//((<span class="number">2</span>^sys)^(t-i)))</span><br><span class="line">    f1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t+<span class="number">1</span>):</span><br><span class="line">        f1 += a[i]*x^(t-i)</span><br><span class="line">    m = f1.roots(multiplicities=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">r_solve = solve2(N2, N2_reveal, <span class="number">32</span>, <span class="number">16</span>, <span class="number">247</span>)[<span class="number">0</span>]</span><br><span class="line">p2 = GCD(<span class="built_in">int</span>(N2),<span class="built_in">int</span>(N2_reveal-r_solve))</span><br><span class="line">q2 = N2//p2</span><br><span class="line">phi2 = (p2-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d2 = inverse(<span class="built_in">int</span>(e),<span class="built_in">int</span>(phi2))</span><br><span class="line">flag2 = long_to_bytes(<span class="built_in">pow</span>(<span class="built_in">int</span>(C2),<span class="built_in">int</span>(d2),<span class="built_in">int</span>(N2)))</span><br></pre></td></tr></table></figure><p>还有另一种</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"> </span><br><span class="line"><span class="comment">################################################ gen data</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">N = <span class="number">140467306170270103085247508412489910487748378129459335724515767186097064975754544045630037530915800592540391724032146546032522637400331469533944394808073412880910356816384584939641130518688696505047701134385883270706411370356446043518762317844784816655044013536852156232391544081389664919694551145695399468209</span></span><br><span class="line">m = <span class="number">1</span></span><br><span class="line">rho = <span class="number">243</span></span><br><span class="line">a = [<span class="string">&quot;pad&quot;</span>] + [<span class="number">112361172352758758900704170210296813010289510849392179799708472107731966956610675285107363588332515564687781269380345968222030537131341680443039011164210540824825702663120697518389091670478368564009900422608869461335061183241377132579449529050747663021748003410091799048984189262111414502180481142308877537330</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">ii</span>):</span><br><span class="line">    a = [<span class="string">&quot;pad&quot;</span>] + [<span class="number">112361172352758758900704170210296813010289510849392179799708472107731966956610675285107363588332515564687781269380345968222030537131341680443039011164210540824825702663120697518389091670478368564009900422608869461335061183241377132579449529050747663021748003410091799048984189262111414502180481142308877537330</span> - <span class="number">2</span>^<span class="number">243</span>*ii]</span><br><span class="line"> </span><br><span class="line">    <span class="comment">################################################ params</span></span><br><span class="line">    t,k = <span class="number">20</span>,<span class="number">10</span></span><br><span class="line">    R = <span class="number">2</span>^rho</span><br><span class="line">    indices = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> product([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t+<span class="number">1</span>)] , repeat=m):</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sum</span>(<span class="built_in">list</span>(i)) &lt;= t):</span><br><span class="line">            indices.append([<span class="string">&quot;pad&quot;</span>] + <span class="built_in">list</span>(i))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">################################################ attack</span></span><br><span class="line">    PR = ZZ[<span class="built_in">tuple</span>(<span class="string">f&quot;X<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m))]</span><br><span class="line">    X = [<span class="string">&quot;pad&quot;</span>] + <span class="built_in">list</span>(PR.gens())</span><br><span class="line">    poly = []</span><br><span class="line">    monomials=<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> indices:</span><br><span class="line">        f = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> ij <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(i)):</span><br><span class="line">            f *= (X[ij] - a[ij])^i[ij]</span><br><span class="line">        l = <span class="built_in">max</span>(k-<span class="built_in">sum</span>(i[<span class="number">1</span>:]),<span class="number">0</span>)</span><br><span class="line">        f *= N^l</span><br><span class="line">        poly.append(f)</span><br><span class="line">        <span class="keyword">for</span> mono <span class="keyword">in</span> f.monomials():</span><br><span class="line">            monomials.add(mono)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">################################################# LLL and resultant to find roots</span></span><br><span class="line">    L = Matrix(ZZ,<span class="built_in">len</span>(poly),<span class="built_in">len</span>(monomials))</span><br><span class="line">    monomials = <span class="built_in">sorted</span>(monomials)</span><br><span class="line">    <span class="keyword">for</span> row,shift <span class="keyword">in</span> <span class="built_in">enumerate</span>(poly):</span><br><span class="line">        <span class="keyword">for</span> col,monomial <span class="keyword">in</span> <span class="built_in">enumerate</span>(monomials):</span><br><span class="line">            L[row,col] = shift.monomial_coefficient(monomial)*monomial(*([R]*m))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    res = L.LLL()</span><br><span class="line">    vec1 = res[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">    h = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> idx,monomial <span class="keyword">in</span> <span class="built_in">enumerate</span>(monomials):</span><br><span class="line">        h += (vec1[idx] // monomial(*([R]*m))) * monomial</span><br><span class="line">    h = h.change_ring(ZZ)</span><br><span class="line">    res1 = h.monic().roots()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(res1 != []):</span><br><span class="line">        <span class="built_in">print</span>(ii,res1)</span><br><span class="line"> </span><br><span class="line">lists = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>^<span class="number">4</span>)]</span><br><span class="line"><span class="keyword">with</span> Pool(<span class="number">64</span>) <span class="keyword">as</span> pool:</span><br><span class="line">    r = <span class="built_in">list</span>(pool.imap(attack, lists[::-<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="comment"># https://tangcuxiaojikuai.xyz/post/4a67318c.html 第一部分 1.12 12</span></span><br><span class="line"><span class="comment">#15 [(-271336741980068587844448337263932213024816515815388263122784492996415507, 1)]</span></span><br><span class="line"><span class="comment">#14 [(13863439776247006048821931668679415913595054659189563401850065117344542701, 1)]</span></span><br><span class="line">r=<span class="number">13863439776247006048821931668679415913595054659189563401850065117344542701</span></span><br><span class="line"><span class="comment"># print(int(r).bit_length())  #243</span></span><br><span class="line">r=r+<span class="number">2</span>^<span class="number">243</span>*<span class="number">14</span></span><br><span class="line">p2=GCD(N2,N2_reveal-r)</span><br><span class="line">flag2=long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(C2,inverse_mod(<span class="number">65537</span>,p2-<span class="number">1</span>),p2)))</span><br></pre></td></tr></table></figure><h2 id="week3-babylcg"><a class="markdownIt-Anchor" href="#week3-babylcg"></a> [Week3] babyLCG</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">seed = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">a = getPrime(<span class="number">400</span>)</span><br><span class="line">b = getPrime(<span class="number">400</span>)</span><br><span class="line">p = getPrime(<span class="number">400</span>)</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    seed = (seed*a+b)%p</span><br><span class="line">    c.append(seed&gt;&gt;<span class="number">80</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = 2475888996632094582034122163505958703059936413843532352796751833709426858969562425221138286394228921214141232352754363633</span></span><br><span class="line"><span class="string">b = 1905480696303984902796083235070180899781860050180854546296493122498519159940315402346589283466547617432046217796603160773</span></span><br><span class="line"><span class="string">p = 2209046612698920104484284797114056179410109590589945885514075526562344194607111614640088528695744803046785464320831674877</span></span><br><span class="line"><span class="string">c = [3046229294982134450591178033489768650552322716872597427107928034748567068803980276957057890481, 973001372006880118889917783354942758117321515064139462745181212051769645104406522505813126876854, 890186362163854321562009885401997664814267684052369722289787654117599676602992999049017980432156]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>复习一下LCG：</p><ul><li><a href="https://dexterjie.github.io/2024/07/16/%E6%B5%81%E5%AF%86%E7%A0%81/%E6%B5%81%E5%AF%86%E7%A0%81-LCG/">LCG | DexterJie’Blog</a></li><li><a href="https://blog.csdn.net/XiongSiqi_blog/article/details/130790621">记 LCG 例题_-CSDN博客</a></li></ul><p><code>seed&gt;&gt;80</code>有位移，应该要用格</p><p>第一种：手动构造格 <a href="https://www.cnblogs.com/naby/p/18494522">SHCTF2024-week3-Crypto - Naby - 博客园</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">a = <span class="number">2441165060340363548034817419913152429437367671051257983130193376968866003652656064753193540692576823353722522219951236377</span></span><br><span class="line">b = <span class="number">2536384599388118977308934726385759683875116193910292140931807458602198040481977699550435249496535909362102559820360131151</span></span><br><span class="line">p = <span class="number">1898350626517014951217210423867648293636462375574846448952061608918022029275967066566474923728317050045578381447025802447</span></span><br><span class="line">c = [<span class="number">1206170611286987749822509820930522025955557233442828617888124729629984583540215838639710785581993</span>, <span class="number">852222709497386792919622853438477061105763652894458161025475550177341850861286444913870176145661</span>, <span class="number">1304945544687728464084706289648969970911515894526834307083141183941320491375891396365871606911311</span>]</span><br><span class="line"> </span><br><span class="line">h = [<span class="number">0</span>] + c</span><br><span class="line"> </span><br><span class="line">length = <span class="built_in">len</span>(h)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    h[i] &lt;&lt;= <span class="number">80</span></span><br><span class="line"> </span><br><span class="line">A = [<span class="number">1</span>]</span><br><span class="line">B = [<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(h)-<span class="number">1</span>):</span><br><span class="line">A.append(a*A[i-<span class="number">1</span>] % p)</span><br><span class="line">B.append((a*B[i-<span class="number">1</span>]+a*h[i]+b-h[i+<span class="number">1</span>]) % p)</span><br><span class="line"> </span><br><span class="line">A = A[<span class="number">1</span>:]</span><br><span class="line">B = B[<span class="number">1</span>:]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Ge = Matrix(ZZ,length,length)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(A)):</span><br><span class="line">    Ge[i,i] = p</span><br><span class="line">    Ge[-<span class="number">2</span>,i] = A[i]</span><br><span class="line">    Ge[-<span class="number">1</span>,i] = B[i]</span><br><span class="line"> </span><br><span class="line">K = <span class="number">2</span>**<span class="number">80</span></span><br><span class="line">Ge[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">Ge[-<span class="number">1</span>,-<span class="number">1</span>] = K</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> Ge.LLL():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(line[-<span class="number">1</span>]) == K:</span><br><span class="line">        L1 = line[-<span class="number">2</span>]</span><br><span class="line">        seed1 = h[<span class="number">1</span>] + L1</span><br><span class="line">        seed = (seed1 - b) * inverse_mod(a,p) % p</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;seed = <span class="subst">&#123;seed&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(seed))</span><br></pre></td></tr></table></figure><p>第二种：上二元coppersmith <a href="https://blog.csdn.net/XiongSiqi_blog/article/details/130790621#t9">记 LCG 例题-CSDN博客</a></p><p>已知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>C</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>C</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">C_1,C_2,C_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的高320bit</p><p>将高320bit和低80bit分别记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span></span></span></span></p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: Got function &#039;\newline&#039; with no arguments as argument to &#039;\begin{array}&#039; at position 1: \̲n̲e̲w̲l̲i̲n̲e̲'>\begin{array}\\C_2=H_2+L_2 \\C_1=H_1+L_1 \\C_2=a\times C_2+b \mod p \\H_2+L_2=a\times (H_1+L_1)+b \mod p \\f = a\times (H_1+L_1)+b-(H_2+L_2) \\L_1,L_2\,small,\;\mod p\;copper \\\because C_1=a\times seed+b \mod p \\\therefore (C_1-b)\times a^{-1}\mod p\end{array}</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">        base = N^(m-i) * f^i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B*monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">output =  [<span class="number">3046229294982134450591178033489768650552322716872597427107928034748567068803980276957057890481</span>, <span class="number">973001372006880118889917783354942758117321515064139462745181212051769645104406522505813126876854</span>, <span class="number">890186362163854321562009885401997664814267684052369722289787654117599676602992999049017980432156</span>]</span><br><span class="line">a = <span class="number">2475888996632094582034122163505958703059936413843532352796751833709426858969562425221138286394228921214141232352754363633</span></span><br><span class="line">b = <span class="number">1905480696303984902796083235070180899781860050180854546296493122498519159940315402346589283466547617432046217796603160773</span></span><br><span class="line">n = <span class="number">2209046612698920104484284797114056179410109590589945885514075526562344194607111614640088528695744803046785464320831674877</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PR.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = ((output[<span class="number">0</span>]&lt;&lt;<span class="number">80</span>)+ x) * a + b - ((output[<span class="number">1</span>]&lt;&lt;<span class="number">80</span>) + y)</span><br><span class="line">roots = small_roots(f,(<span class="number">2</span>^<span class="number">80</span>, <span class="number">2</span>^<span class="number">80</span>), m=<span class="number">4</span>, d=<span class="number">4</span>)</span><br><span class="line">s1 = (output[<span class="number">0</span>]&lt;&lt;<span class="number">80</span>) + roots[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">m = (s1 - b) * inverse_mod(a, n) % n</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h2 id="week3-shamir"><a class="markdownIt-Anchor" href="#week3-shamir"></a> [Week3] Shamir</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getenv</span><br><span class="line"></span><br><span class="line">BANNER = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> __          __  _                            _______       _____ _                     _      </span></span><br><span class="line"><span class="string"> \ \        / / | |                          |__   __|     / ____| |                   (_)     </span></span><br><span class="line"><span class="string">  \ \  /\  / /__| | ___ ___  _ __ ___   ___     | | ___   | (___ | |__   __ _ _ __ ___  _ _ __ </span></span><br><span class="line"><span class="string">   \ \/  \/ / _ \ |/ __/ _ \| &#x27;_ ` _ \ / _ \    | |/ _ \   \___ \| &#x27;_ \ / _` | &#x27;_ ` _ \| | &#x27;__|</span></span><br><span class="line"><span class="string">    \  /\  /  __/ | (_| (_) | | | | | |  __/    | | (_) |  ____) | | | | (_| | | | | | | | |   </span></span><br><span class="line"><span class="string">     \/  \/ \___|_|\___\___/|_| |_| |_|\___|    |_|\___/  |_____/|_| |_|\__,_|_| |_| |_|_|_|   </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(BANNER)</span><br><span class="line"></span><br><span class="line">flag = getenv(<span class="string">&quot;GZCTF_FLAG&quot;</span>,<span class="string">&quot;GZCTF_NOT_DEFINE&quot;</span>)</span><br><span class="line">m = bytes_to_long(flag.encode())</span><br><span class="line">n = getPrime(<span class="number">1024</span>)</span><br><span class="line">coefficients = [m] + [random.randrange(<span class="number">1</span>,n-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(coefficients)):</span><br><span class="line">        <span class="built_in">sum</span> += coefficients[i]*<span class="built_in">pow</span>(x,i,n) % n</span><br><span class="line">        <span class="built_in">sum</span> %= n</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please Input x: &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Allowed!!!&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    res = (x,f(x))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>Shamir门限，多项式最大系数为100，通过交互得到101个点的坐标，利用拉格朗日插值法得到这100个系数的值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">r=remote(<span class="string">&quot;210.44.150.15&quot;</span>,<span class="number">40430</span>)</span><br><span class="line"> </span><br><span class="line">r.recvuntil(<span class="string">b&#x27;n = &#x27;</span>)</span><br><span class="line">n=<span class="built_in">eval</span>(r.recvline().strip().decode())</span><br><span class="line"> </span><br><span class="line">m=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>+<span class="number">1</span>):</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Please Input x: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(i).encode())</span><br><span class="line"> </span><br><span class="line">    tmp=<span class="built_in">eval</span>(r.recvline().strip())</span><br><span class="line">    m.append(tmp)</span><br><span class="line">    </span><br><span class="line">flag=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    tmp1=<span class="number">1</span></span><br><span class="line">    tmp2=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        <span class="keyword">if</span> i==j:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        tmp1*=-m[j][<span class="number">0</span>]</span><br><span class="line">        tmp2*=(m[i][<span class="number">0</span>]-m[j][<span class="number">0</span>])</span><br><span class="line">    flag=(flag+m[i][<span class="number">1</span>]*tmp1*inverse(tmp2,n))%n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><p>另外也可以用sagemath自带的朗格朗日插值函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(host,port)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&quot;n = &quot;</span>)</span><br><span class="line">n = <span class="built_in">int</span>(sh.recvline().decode())</span><br><span class="line">PT = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;Please Input x:&quot;</span>,<span class="built_in">str</span>(i+<span class="number">1</span>).encode())</span><br><span class="line">    res = <span class="built_in">eval</span>(sh.recvline().decode())</span><br><span class="line">    PT.append(res)</span><br><span class="line">    </span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">recover_f = R.lagrange_polynomial(PT)</span><br><span class="line">m = recover_f(<span class="number">0</span>)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="week3-大学高中"><a class="markdownIt-Anchor" href="#week3-大学高中"></a> [Week3] 大学×高中√</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">47</span></span><br><span class="line">leak = cos(m).n(<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"><span class="comment"># 0.982986717026051523775689061128623398913716255464419265504704959461292114149510361613827827832793334890682930344871015798797235443155666550182278434353933798075760336073743564317792255228218620688463838126060619033247131957845171463388367372437867860524109961940806277727950981541880151172951132210062</span></span><br></pre></td></tr></table></figure><p>题目改编自 <a href="https://dexterjie.github.io/2024/05/12/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%BB%84%E6%B2%B3%E6%B5%81%E5%9F%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/#baby-math">第二届黄河流域网络安全技能挑战赛 | DexterJie’Blog</a></p><p>那个是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">sin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span></span></span></span>这个是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">cos</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">s</span></span></span></span>，也是构造格（week3的题目怎么全是格……）</p><p>格子如下：</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: Got function &#039;\newline&#039; with no arguments as argument to &#039;\begin{array}&#039; at position 1: \̲n̲e̲w̲l̲i̲n̲e̲'>\begin{array}\\m = arccos(leak)+2k\pi \\L =\begin{pmatrix} 1 &amp; 0 &amp; 1\\ 0 &amp; 1 &amp; arccos(leak)\\ 0 &amp; 0 &amp; 2\pi\end{pmatrix}\\(m,-1,-k)L=(m,-1,0)\\leveling: L=\begin{pmatrix} 1 &amp; 0 &amp; 2^{750}\\ 0 &amp; 2^{375} &amp; arccos(leak)\times2^{750}\\ 0 &amp; 0 &amp; 2\pi\times2^{750}\end{pmatrix}\\(m,-1,-k)L=(m,-2^{375},0)\end{array}</p><p>这里学习一下格的配平：<a href="https://xz.aliyun.com/t/14793">crypto-格密码实战入门(svp问题)</a></p><p><strong>Hermite定理：这个定理给出了最短向量的上界</strong></p><p><strong>对于n维的格L，都有一个非零向量v属于L，满足：</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∥</mi><mi>v</mi><mi mathvariant="normal">∥</mi><mo>≤</mo><msqrt><mi>n</mi></msqrt><mi mathvariant="normal">det</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>L</mi><msup><mo stretchy="false">)</mo><mfrac><mn>1</mn><mi>n</mi></mfrac></msup></mrow><annotation encoding="application/x-tex">\|v\| \leq \sqrt{n} \operatorname{det}(L)^{\frac{1}{n}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">∥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20402em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mord mathrm">d</span><span class="mord mathrm">e</span><span class="mord mathrm">t</span></span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9540200000000001em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∥</mi><mi>v</mi><mi mathvariant="normal">∥</mi></mrow><annotation encoding="application/x-tex">\|v\|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">∥</span></span></span></span>表示格基的数量积，n为维度，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">det</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\operatorname{det}(L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm">d</span><span class="mord mathrm">e</span><span class="mord mathrm">t</span></span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mclose">)</span></span></span></span>为格L(矩阵)的行列式</strong></p><p>以这个题目为例: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∥</mi><mi>v</mi><mi mathvariant="normal">∥</mi><mo>≈</mo><msqrt><mrow><msup><mi>m</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn></mrow></msqrt></mrow><annotation encoding="application/x-tex">\|v\|\approx \sqrt{m^2+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">∥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.12661100000000003em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">det</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>L</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mo stretchy="false">(</mo><mn>0</mn><mo>−</mo><mn>2</mn><mi>π</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo>=</mo><mn>2</mn><mi>π</mi></mrow><annotation encoding="application/x-tex">|\operatorname{det}(L)|=|(0-2\pi)|=2\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mord mathrm">d</span><span class="mord mathrm">e</span><span class="mord mathrm">t</span></span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mclose">)</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mclose">)</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span></p><p>题目中给出len(flag)==47，bit_length(m)<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≈</mo><mn>376</mn><mo separator="true">,</mo><mtext>  </mtext><mi mathvariant="normal">∥</mi><mi>v</mi><mi mathvariant="normal">∥</mi><mo>≈</mo><mn>376</mn><mo separator="true">,</mo><mtext>  </mtext><mi>L</mi></mrow><annotation encoding="application/x-tex">\approx 376,\;\|v\|\approx 376,\;L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.48312em;vertical-align:0em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∥</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord">∥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">L</span></span></span></span>配平后</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt><mi mathvariant="normal">det</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>L</mi><msup><mo stretchy="false">)</mo><mfrac><mn>1</mn><mi>n</mi></mfrac></msup><mo>=</mo><msqrt><mn>3</mn></msqrt><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mo>×</mo><msup><mn>2</mn><mn>1125</mn></msup><msup><mo stretchy="false">)</mo><mfrac><mn>1</mn><mn>3</mn></mfrac></msup><mo>=</mo><msqrt><mn>3</mn></msqrt><mroot><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mo stretchy="false">)</mo></mrow><mn>3</mn></mroot><mo>×</mo><msup><mn>2</mn><mn>375</mn></msup><mo>≥</mo><msup><mn>2</mn><mn>376</mn></msup></mrow><annotation encoding="application/x-tex">\sqrt{n} \operatorname{det}(L)^{\frac{1}{n}}=\sqrt{3}(2\pi\times2^{1125})^{\frac{1}{3}}=\sqrt{3}\sqrt[3]{(2\pi)}\times2^{375}\ge 2^{376}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20402em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mord mathrm">d</span><span class="mord mathrm">e</span><span class="mord mathrm">t</span></span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9540200000000001em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">3</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.20402em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9540200000000001em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">3</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7002200000000001em;"><span style="top:-2.878em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.950078em;vertical-align:-0.13597em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">7</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">7</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">leak = </span><br><span class="line">acos = arccos(leak)</span><br><span class="line">RR = RealField(<span class="number">1000</span>)</span><br><span class="line">pi = RR(pi)</span><br><span class="line">Ge = Matrix(QQ,[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>^<span class="number">750</span>],[<span class="number">0</span>,<span class="number">2</span>^<span class="number">375</span>,<span class="number">2</span>^<span class="number">750</span>*acos],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^<span class="number">750</span>*<span class="number">2</span>*pi]])</span><br><span class="line">Ge = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line">m = <span class="built_in">abs</span>(Ge[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><h2 id="week3-baby_lock"><a class="markdownIt-Anchor" href="#week3-baby_lock"></a> [Week3] baby_lock</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Random</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, s0, s1</span>):</span><br><span class="line">        self.s0 = s0</span><br><span class="line">        self.s1 = s1</span><br><span class="line">        self.state = [s0, s1]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">current</span>(<span class="params">self</span>):</span><br><span class="line">        val = (self.s0 + self.s1) &amp; <span class="number">0x1fffffffffffff</span></span><br><span class="line">        <span class="keyword">return</span> val &gt;&gt; <span class="number">4</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = self.state[<span class="number">0</span>]</span><br><span class="line">        s0 = self.state[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        self.state[<span class="number">0</span>] = s0</span><br><span class="line">        s1 ^= (s1 &lt;&lt; <span class="number">23</span>)</span><br><span class="line">        s1 &amp;= <span class="number">0xffffffffffffffff</span></span><br><span class="line">        self.state[<span class="number">1</span>] = s1 ^ s0 ^ (s1 &gt;&gt; <span class="number">17</span>) ^ (s0 &gt;&gt; <span class="number">26</span>)</span><br><span class="line">                </span><br><span class="line">        random_val = (self.state[<span class="number">1</span>] + s0) &amp; <span class="number">0xffffffffffffffff</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> random_val</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">next</span>(self) &amp; <span class="number">0x1fffffffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> colorama, hashlib, random, string</span><br><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> Fore <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom, getenv</span><br><span class="line"></span><br><span class="line">flag = getenv(<span class="string">&quot;GZCTF_FLAG&quot;</span>,<span class="string">&quot;GZCTF_NOT_DEFINE&quot;</span>)</span><br><span class="line">s0, s1 = [<span class="built_in">int</span>.from_bytes(urandom(<span class="number">8</span>), <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">prng = Random(s0, s1)</span><br><span class="line">colorama.init()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">number_to_circled</span>(<span class="params">num</span>):</span><br><span class="line">    circled_numbers = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;⓪&#x27;</span>, <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;①&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;②&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;③&#x27;</span>, <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;④&#x27;</span>, <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;⑤&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;⑥&#x27;</span>, <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;⑦&#x27;</span>, <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;⑧&#x27;</span>, <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;⑨&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(circled_numbers[d] <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">welcome = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        ╔═══════════════════════════╗</span></span><br><span class="line"><span class="string">        ║  🔒 Smart Lock System 🔒  ║</span></span><br><span class="line"><span class="string">        ╠═══════════════════════════╣</span></span><br><span class="line"><span class="string">        ║                           ║</span></span><br><span class="line"><span class="string">        ║   1.  <span class="subst">&#123;cf.YELLOW&#125;</span> Spy   password<span class="subst">&#123;cf.RESET&#125;</span>     ║</span></span><br><span class="line"><span class="string">        ║   2.  <span class="subst">&#123;cf.YELLOW&#125;</span>Input  password<span class="subst">&#123;cf.RESET&#125;</span>     ║</span></span><br><span class="line"><span class="string">        ║                           ║</span></span><br><span class="line"><span class="string">        ╚═══════════════════════════╝</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(welcome)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof_of_work</span>():</span><br><span class="line">    prefix = <span class="string">&quot;&quot;</span>.join(random.choices(string.ascii_letters, k=<span class="number">8</span>))</span><br><span class="line">    answer = <span class="string">&quot;&quot;</span>.join(random.choices(string.ascii_letters, k=<span class="number">4</span>))</span><br><span class="line">    hashes = hashlib.sha256((prefix + answer).encode()).hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;🔍 Prove you deserve to see the password! Solve this PoW:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;   Find a ANSWER <span class="subst">&#123;cf.LIGHTGREEN_EX&#125;</span>hashlib.sha256((&#x27;<span class="subst">&#123;prefix&#125;</span>&#x27;+<span class="subst">&#123;cf.RED&#125;</span> ANSWER<span class="subst">&#123;cf.LIGHTGREEN_EX&#125;</span>).encode()).hexdigest()[:10] ==&#x27;<span class="subst">&#123;hashes[:<span class="number">10</span>]&#125;</span>&#x27;<span class="subst">&#123;cf.RESET&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    suffix = <span class="built_in">input</span>(<span class="string">f&quot;   Enter your <span class="subst">&#123;cf.RED&#125;</span>ANSWER<span class="subst">&#123;cf.RESET&#125;</span>: &quot;</span>)</span><br><span class="line">    attempt = hashlib.sha256((prefix + suffix).encode()).hexdigest()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> attempt.startswith(hashes[:<span class="number">10</span>]):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;❌ <span class="subst">&#123;cf.RED&#125;</span>Spy failed. <span class="subst">&#123;cf.RESET&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    chose = <span class="built_in">input</span>(<span class="string">&quot;Please make your selection: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> chose == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> proof_of_work():</span><br><span class="line">            password = prng.Next()</span><br><span class="line">            password = number_to_circled(password)</span><br><span class="line">            output_text = <span class="string">f&quot;👀 The Peek at password: <span class="subst">&#123;cf.LIGHTGREEN_EX&#125;</span><span class="subst">&#123;password&#125;</span><span class="subst">&#123;cf.RESET&#125;</span>&quot;</span></span><br><span class="line">            box_width = <span class="built_in">len</span>(output_text) - <span class="number">6</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;╔&quot;</span> + <span class="string">&quot;═&quot;</span> * box_width + <span class="string">&quot;╗&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;║ <span class="subst">&#123;output_text&#125;</span>  ║&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;╚&quot;</span> + <span class="string">&quot;═&quot;</span> * box_width + <span class="string">&quot;╝\n&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> chose == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        password = prng.Next()</span><br><span class="line">        <span class="built_in">print</span>(                  <span class="string">&quot;╔═════════════════════════════════════╗&quot;</span>)</span><br><span class="line">        user_input = <span class="built_in">input</span>(    <span class="string">f&quot;║ 🔑 Enter password: <span class="subst">&#123;cf.YELLOW&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(  <span class="string">f&quot;<span class="subst">&#123;cf.RESET&#125;</span>╚═════════════════════════════════════╝&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_input == <span class="built_in">str</span>(password):</span><br><span class="line">            output_text = <span class="string">f&quot;🔓 <span class="subst">&#123;cf.GREEN&#125;</span>Access Granted!<span class="subst">&#123;cf.RESET&#125;</span> Secret is <span class="subst">&#123;cf.LIGHTMAGENTA_EX&#125;</span><span class="subst">&#123;flag&#125;</span><span class="subst">&#123;cf.RESET&#125;</span>&quot;</span></span><br><span class="line">            box_width = <span class="built_in">len</span>(output_text) - <span class="number">17</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;╔&quot;</span> + <span class="string">&quot;═&quot;</span> * box_width + <span class="string">&quot;╗&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;║ <span class="subst">&#123;output_text&#125;</span> ║&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;╚&quot;</span> + <span class="string">&quot;═&quot;</span> * box_width + <span class="string">&quot;╝\n&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output_text = <span class="string">f&quot;❌ <span class="subst">&#123;cf.RED&#125;</span>Access Denied! Incorrect password.<span class="subst">&#123;cf.RESET&#125;</span>&quot;</span></span><br><span class="line">            box_width = <span class="built_in">len</span>(output_text) - <span class="number">7</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;╔&quot;</span> + <span class="string">&quot;═&quot;</span> * box_width + <span class="string">&quot;╗&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;║ <span class="subst">&#123;output_text&#125;</span> ║&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;╚&quot;</span> + <span class="string">&quot;═&quot;</span> * box_width + <span class="string">&quot;╝\n&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output_text = <span class="string">f&quot;⚠️ <span class="subst">&#123;cf.RED&#125;</span>Invalid selection. Please choose 1 or 2.<span class="subst">&#123;cf.RESET&#125;</span>&quot;</span></span><br><span class="line">        box_width = <span class="built_in">len</span>(output_text) + -<span class="number">8</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;╔&quot;</span> + <span class="string">&quot;═&quot;</span> * box_width + <span class="string">&quot;╗&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;║ <span class="subst">&#123;output_text&#125;</span> ║&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;╚&quot;</span> + <span class="string">&quot;═&quot;</span> * box_width + <span class="string">&quot;╝\n&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Xorshift128Plus</strong>伪随机数算法 <a href="https://www.cnblogs.com/deaf/p/13887855.html">随机数之 xorShift128Plus 板子 - deaf - 博客园</a></p><p>本题有一点改动</p><blockquote><p>这个漏洞在v8的<code>Math.random()</code>中被发现（已修复）</p><p>只需要3个连续state，Z3求解即可</p></blockquote><p><a href="https://xz.aliyun.com/t/14599">JavaScript中Math.random函数的伪随机性解析以及破解方法研究</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">import</span> z3</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># XorShift128+ algorithm in python</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XorShift128Plus</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, s0, s1</span>):</span><br><span class="line">        self.s0 = s0</span><br><span class="line">        self.s1 = s1</span><br><span class="line">        self.state = [s0, s1]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">current_double</span>(<span class="params">self</span>):</span><br><span class="line">        val = (self.s0 + self.s1) &amp; <span class="number">0x1fffffffffffff</span></span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># This function generates another 64-bit integer</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = self.state[<span class="number">0</span>]</span><br><span class="line">        s0 = self.state[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        self.state[<span class="number">0</span>] = s0</span><br><span class="line">        s1 ^= (s1 &lt;&lt; <span class="number">23</span>)</span><br><span class="line">        s1 &amp;= <span class="number">0xffffffffffffffff</span></span><br><span class="line">        self.state[<span class="number">1</span>] = s1 ^ s0 ^ (s1&gt;&gt;<span class="number">17</span>) ^ (s0&gt;&gt;<span class="number">26</span>)</span><br><span class="line">                </span><br><span class="line">        random_val = (self.state[<span class="number">1</span>] + s0) &amp; <span class="number">0xffffffffffffffff</span> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> random_val</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># This function generates another floating point-type number in the range [0,1)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_double</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">next</span>(self) &amp; <span class="number">0x1fffffffffffff</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cracker</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, known_values</span>):</span><br><span class="line">        self.s0 = z3.BitVec(<span class="string">&#x27;s0&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">        self.s1 = z3.BitVec(<span class="string">&#x27;s1&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">        self.state = [self.s0, self.s1]</span><br><span class="line"></span><br><span class="line">        self.solver = z3.Solver()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># The known variable will contain the values that we generated in Firefox</span></span><br><span class="line">        self.known = known_values</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        s1 = self.state[<span class="number">0</span>]</span><br><span class="line">        s0 = self.state[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        self.state[<span class="number">0</span>] = s0</span><br><span class="line">        s1 ^= (s1 &lt;&lt; <span class="number">23</span>)</span><br><span class="line">        self.state[<span class="number">1</span>] = s1 ^ s0 ^ z3.LShR(s1,<span class="number">17</span>) ^ z3.LShR(s0,<span class="number">26</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> self.state[<span class="number">1</span>] + s0</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> self.known:</span><br><span class="line">            nextval = z3.fpToFP(z3.get_default_rounding_mode(), <span class="built_in">next</span>(self) &amp; <span class="number">0x1fffffffffffff</span>, z3.Float64())</span><br><span class="line">            self.solver.add(nextval == val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.solver.check() != z3.sat:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;Not solved!&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        model = self.solver.model()</span><br><span class="line">        s0 = model[self.s0].as_long()</span><br><span class="line">        s1 = model[self.s1].as_long()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (s0, s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">circled_to_num</span>(<span class="params">num</span>):</span><br><span class="line">    circled_numbers = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;⓪&#x27;</span>, <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;①&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;②&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;③&#x27;</span>, <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;④&#x27;</span>, <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;⑤&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;⑥&#x27;</span>, <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;⑦&#x27;</span>, <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;⑧&#x27;</span>, <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;⑨&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    circled_numbers = &#123;y:x <span class="keyword">for</span> x,y <span class="keyword">in</span> circled_numbers.items()&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(circled_numbers[digit] <span class="keyword">for</span> digit <span class="keyword">in</span> <span class="built_in">str</span>(num).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib, itertools, string</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pow</span>(<span class="params">s1,s2</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> itertools.product(string.ascii_letters,repeat=<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256((s1 + <span class="string">&quot;&quot;</span>.join(s)).encode()).hexdigest()[:<span class="number">10</span>] == s2:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;210.44.150.15&#x27;</span>, <span class="number">20786</span>)</span><br><span class="line"></span><br><span class="line">pwd = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_num</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;Please make your selection: &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;Find a ANSWER &#x27;</span>)</span><br><span class="line">    PoW_data = p.recvline().decode()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(PoW_data)</span><br><span class="line">    <span class="keyword">import</span> re</span><br><span class="line">    pattern = <span class="string">r&quot;sha256\(\(&#x27;(\w+)&#x27;\+.*\)\.hexdigest\(\)\[:10\] ==&#x27;(\w+)&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">match</span> = re.search(pattern, PoW_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        p1 = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">        p2 = <span class="keyword">match</span>.group(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(p1,p2)</span><br><span class="line"></span><br><span class="line">    answer = <span class="built_in">pow</span>(p1,p2) </span><br><span class="line">    p.sendline(answer)</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;The Peek at password: &#x27;</span>)</span><br><span class="line">    num = p.recvline().decode()</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    num = num[<span class="number">5</span>:-<span class="number">9</span>]</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">    pwd.append(num)</span><br><span class="line"></span><br><span class="line">get_num()</span><br><span class="line">get_num()</span><br><span class="line">get_num()</span><br><span class="line"></span><br><span class="line">known_values = [circled_to_num(x) <span class="keyword">for</span> x <span class="keyword">in</span> pwd]</span><br><span class="line"></span><br><span class="line">cracker = Cracker(known_values)</span><br><span class="line">(s0, s1) = cracker.crack()</span><br><span class="line"><span class="built_in">print</span>(s0,s1)</span><br><span class="line">prng = XorShift128Plus(s0, s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> prng.next_double()==known_values[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">assert</span> prng.next_double()==known_values[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> prng.next_double()==known_values[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">x3= prng.next_double()</span><br><span class="line">success(<span class="built_in">str</span>(x3))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Please make your selection: &#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Enter password: &#x27;</span>,<span class="built_in">str</span>(x3).encode())</span><br><span class="line"><span class="comment"># p.interactive()</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Access Granted!&#x27;</span>)</span><br><span class="line">success(p.recvline())</span><br></pre></td></tr></table></figure><h2 id="week4-mt19937"><a class="markdownIt-Anchor" href="#week4-mt19937"></a> [Week4] MT19937</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> my_own_flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MT_19937</span>(<span class="params">num,en_c</span>):</span><br><span class="line">    seed1 = os.urandom(<span class="number">16</span>)</span><br><span class="line">    random.seed(seed1)</span><br><span class="line">    number = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        number.append(random.getrandbits(<span class="number">32</span>))</span><br><span class="line">    cal = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num,num+en_c):</span><br><span class="line">        cal += random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> number,cal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">cal,flag</span>):</span><br><span class="line">    key = hashlib.sha256(<span class="built_in">str</span>(cal).encode()).digest()</span><br><span class="line">    A = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    c = A.encrypt(pad(flag,<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    LEN = <span class="built_in">len</span>(flag)</span><br><span class="line">    m1,m2 = flag[:LEN//<span class="number">2</span>],flag[LEN//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    Num = <span class="number">624</span></span><br><span class="line">    <span class="comment"># encrypt m1</span></span><br><span class="line">    K1 = MT_19937(Num,Num)</span><br><span class="line">    c1 = encrypt(K1[<span class="number">1</span>],m1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># encrypt m1</span></span><br><span class="line">    K2 = MT_19937(Num, Num//<span class="number">4</span>)</span><br><span class="line">    c2 = encrypt(K2[<span class="number">1</span>], m2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(K1[<span class="number">0</span>])+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(K2[<span class="number">0</span>][:<span class="number">600</span>])+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(c1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.write(<span class="built_in">str</span>(c2)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1212937457</span>, <span class="number">714280275</span>, <span class="number">2934808054</span>, <span class="number">289447810</span>, <span class="number">634020656</span>, <span class="number">2582053193</span>, <span class="number">2648476152</span>, <span class="number">3584472561</span>, <span class="number">2877037797</span>, <span class="number">1051288028</span>, <span class="number">3007240724</span>, <span class="number">3583122714</span>, <span class="number">2377373219</span>, <span class="number">2233668169</span>, <span class="number">2300136290</span>, <span class="number">4277363949</span>, <span class="number">572508719</span>, <span class="number">3707687803</span>, <span class="number">868724505</span>, <span class="number">2234515288</span>, <span class="number">2182162330</span>, <span class="number">2354654192</span>, <span class="number">3676064525</span>, <span class="number">16386761</span>, <span class="number">1934246009</span>, <span class="number">396534601</span>, <span class="number">3406538372</span>, <span class="number">1978740790</span>, <span class="number">51554945</span>, <span class="number">1642830773</span>, <span class="number">3255471879</span>, <span class="number">249329746</span>, <span class="number">1871028531</span>, <span class="number">1670146144</span>, <span class="number">3955249559</span>, <span class="number">3523216280</span>, <span class="number">4225679888</span>, <span class="number">1979625069</span>, <span class="number">1711120506</span>, <span class="number">4224015378</span>, <span class="number">2357192253</span>, <span class="number">1437719734</span>, <span class="number">1861766583</span>, <span class="number">252037050</span>, <span class="number">3805173581</span>, <span class="number">3845899039</span>, <span class="number">239338040</span>, <span class="number">3335618070</span>, <span class="number">1909354144</span>, <span class="number">2380236080</span>, <span class="number">3120658839</span>, <span class="number">2738735651</span>, <span class="number">1749563272</span>, <span class="number">4028406006</span>, <span class="number">198730175</span>, <span class="number">4095736523</span>, <span class="number">2224365497</span>, <span class="number">1850797931</span>, <span class="number">123559677</span>, <span class="number">277130374</span>, <span class="number">1547602417</span>, <span class="number">2312967225</span>, <span class="number">1064405558</span>, <span class="number">620877831</span>, <span class="number">4182002366</span>, <span class="number">2717144120</span>, <span class="number">2424475877</span>, <span class="number">1261886189</span>, <span class="number">2666842961</span>, <span class="number">1250633055</span>, <span class="number">1445939400</span>, <span class="number">2496676732</span>, <span class="number">46718503</span>, <span class="number">1726056600</span>, <span class="number">2892333819</span>, <span class="number">3874613567</span>, <span class="number">2801764620</span>, <span class="number">3279121957</span>, <span class="number">62950328</span>, <span class="number">14090298</span>, <span class="number">3016963976</span>, <span class="number">235881318</span>, <span class="number">1152787765</span>, <span class="number">3549713637</span>, <span class="number">3184265794</span>, <span class="number">461262349</span>, <span class="number">1835258817</span>, <span class="number">706701716</span>, <span class="number">366259495</span>, <span class="number">2484440259</span>, <span class="number">2306336615</span>, <span class="number">2418024433</span>, <span class="number">107268664</span>, <span class="number">3018120752</span>, <span class="number">3915797798</span>, <span class="number">1685880034</span>, <span class="number">2782876985</span>, <span class="number">2876720582</span>, <span class="number">3803172243</span>, <span class="number">1745503879</span>, <span class="number">1965535595</span>, <span class="number">2831775453</span>, <span class="number">3139448870</span>, <span class="number">770826076</span>, <span class="number">559187920</span>, <span class="number">4292272948</span>, <span class="number">86904027</span>, <span class="number">1821662944</span>, <span class="number">58381562</span>, <span class="number">250790584</span>, <span class="number">2122997254</span>, <span class="number">2937312684</span>, <span class="number">3225034461</span>, <span class="number">1493971528</span>, <span class="number">913420791</span>, <span class="number">2911905254</span>, <span class="number">2938402784</span>, <span class="number">1430747115</span>, <span class="number">2654595902</span>, <span class="number">3315197237</span>, <span class="number">602765188</span>, <span class="number">1471009311</span>, <span class="number">3788529131</span>, <span class="number">913593424</span>, <span class="number">3280524381</span>, <span class="number">1554400422</span>, <span class="number">3250536147</span>, <span class="number">3480550436</span>, <span class="number">821401975</span>, <span class="number">3216026683</span>, <span class="number">762420368</span>, <span class="number">1733854366</span>, <span class="number">2395038075</span>, <span class="number">533527872</span>, <span class="number">3040490234</span>, <span class="number">2855012365</span>, <span class="number">2984904790</span>, <span class="number">2830464734</span>, <span class="number">2200935030</span>, <span class="number">523059886</span>, <span class="number">3795772367</span>, <span class="number">2905400361</span>, <span class="number">667720140</span>, <span class="number">3155311553</span>, <span class="number">1860651089</span>, <span class="number">1053555607</span>, <span class="number">2889478721</span>, <span class="number">1812821011</span>, <span class="number">3391980212</span>, <span class="number">3433665687</span>, <span class="number">2480476597</span>, <span class="number">1319654037</span>, <span class="number">1076583906</span>, <span class="number">2287201297</span>, <span class="number">966928688</span>, <span class="number">2542225146</span>, <span class="number">2246098689</span>, <span class="number">3117124345</span>, <span class="number">1844896511</span>, <span class="number">3104215564</span>, <span class="number">1303510082</span>, <span class="number">2924158615</span>, <span class="number">3648677443</span>, <span class="number">3308489255</span>, <span class="number">3809196505</span>, <span class="number">3199516268</span>, <span class="number">2254502655</span>, <span class="number">2126047470</span>, <span class="number">1763846642</span>, <span class="number">3851973930</span>, <span class="number">1280609700</span>, <span class="number">2415985988</span>, <span class="number">1312349771</span>, <span class="number">2103486452</span>, <span class="number">4229394974</span>, <span class="number">1937464844</span>, <span class="number">2763672456</span>, <span class="number">1366425769</span>, <span class="number">1532462738</span>, <span class="number">1864298394</span>, <span class="number">1203192658</span>, <span class="number">3679892306</span>, <span class="number">4138733297</span>, <span class="number">39437090</span>, <span class="number">1317880030</span>, <span class="number">132948638</span>, <span class="number">2315846286</span>, <span class="number">3394291148</span>, <span class="number">3207221552</span>, <span class="number">3834885856</span>, <span class="number">2367158425</span>, <span class="number">3183864791</span>, <span class="number">3303289072</span>, <span class="number">519407526</span>, <span class="number">4127464161</span>, <span class="number">1556426685</span>, <span class="number">2427155757</span>, <span class="number">2010011401</span>, <span class="number">2823249259</span>, <span class="number">3638339516</span>, <span class="number">2266010959</span>, <span class="number">345885116</span>, <span class="number">471672470</span>, <span class="number">2713191580</span>, <span class="number">731238671</span>, <span class="number">1694687550</span>, <span class="number">2523761501</span>, <span class="number">3533913138</span>, <span class="number">163820753</span>, <span class="number">1829608711</span>, <span class="number">587056408</span>, <span class="number">1129980234</span>, <span class="number">3642159144</span>, <span class="number">2546599527</span>, <span class="number">758703728</span>, <span class="number">1713442774</span>, <span class="number">1864598338</span>, <span class="number">2763096157</span>, <span class="number">2308766766</span>, <span class="number">1132350895</span>, <span class="number">2776604596</span>, <span class="number">1921085522</span>, <span class="number">1409581297</span>, <span class="number">2643399928</span>, <span class="number">3285649744</span>, <span class="number">1248611904</span>, <span class="number">2694186262</span>, <span class="number">2676127368</span>, <span class="number">2579578748</span>, <span class="number">3784393865</span>, <span class="number">2655293049</span>, <span class="number">1378866508</span>, <span class="number">1251610536</span>, <span class="number">1048557165</span>, <span class="number">3045231444</span>, <span class="number">4236456301</span>, <span class="number">2496231577</span>, <span class="number">4118010676</span>, <span class="number">3079411364</span>, <span class="number">2425576144</span>, <span class="number">2431718306</span>, <span class="number">543894373</span>, <span class="number">118186072</span>, <span class="number">2594647421</span>, <span class="number">1833894329</span>, <span class="number">3876640493</span>, <span class="number">1916631983</span>, <span class="number">2765860034</span>, <span class="number">3905895682</span>, <span class="number">2207230275</span>, <span class="number">2554838603</span>, <span class="number">3199831939</span>, <span class="number">2516271151</span>, <span class="number">3080023814</span>, <span class="number">3594335532</span>, <span class="number">1197450849</span>, <span class="number">2621744299</span>, <span class="number">447615180</span>, <span class="number">1616950869</span>, <span class="number">3109651542</span>, <span class="number">2553431350</span>, <span class="number">4165466937</span>, <span class="number">2130063794</span>, <span class="number">1459492895</span>, <span class="number">1141470511</span>, <span class="number">948009682</span>, <span class="number">325807524</span>, <span class="number">1681494454</span>, <span class="number">3137320840</span>, <span class="number">4219461371</span>, <span class="number">609761579</span>, <span class="number">942363481</span>, <span class="number">2404858793</span>, <span class="number">1697226342</span>, <span class="number">830264373</span>, <span class="number">230968933</span>, <span class="number">831865647</span>, <span class="number">4164463522</span>, <span class="number">2968510743</span>, <span class="number">1464271639</span>, <span class="number">1397831008</span>, <span class="number">2559413030</span>, <span class="number">3515044508</span>, <span class="number">772056268</span>, <span class="number">3152446673</span>, <span class="number">3117754594</span>, <span class="number">833212973</span>, <span class="number">4252629747</span>, <span class="number">2565179775</span>, <span class="number">3005093783</span>, <span class="number">3595030314</span>, <span class="number">4042182692</span>, <span class="number">298671165</span>, <span class="number">3183128227</span>, <span class="number">3429794312</span>, <span class="number">4122368172</span>, <span class="number">1900961662</span>, <span class="number">3589294443</span>, <span class="number">3190786481</span>, <span class="number">1744404482</span>, <span class="number">1921785452</span>, <span class="number">3011999869</span>, <span class="number">642164068</span>, <span class="number">3695788414</span>, <span class="number">2275346981</span>, <span class="number">1428956574</span>, <span class="number">2697326707</span>, <span class="number">2202213004</span>, <span class="number">3287889517</span>, <span class="number">919861723</span>, <span class="number">726410498</span>, <span class="number">337174656</span>, <span class="number">2417998504</span>, <span class="number">2752587611</span>, <span class="number">3856581958</span>, <span class="number">141509063</span>, <span class="number">1762431188</span>, <span class="number">2065705145</span>, <span class="number">2031960873</span>, <span class="number">1892209091</span>, <span class="number">2395039500</span>, <span class="number">1058479586</span>, <span class="number">1537034270</span>, <span class="number">502217054</span>, <span class="number">3102018820</span>, <span class="number">1433274316</span>, <span class="number">1372952271</span>, <span class="number">2918921770</span>, <span class="number">239909451</span>, <span class="number">1398298200</span>, <span class="number">2339489735</span>, <span class="number">372558373</span>, <span class="number">2263872236</span>, <span class="number">2426192905</span>, <span class="number">337209508</span>, <span class="number">3983991978</span>, <span class="number">2574803724</span>, <span class="number">2837664572</span>, <span class="number">1569892789</span>, <span class="number">2625063195</span>, <span class="number">3262762020</span>, <span class="number">24150029</span>, <span class="number">2016099290</span>, <span class="number">2239153990</span>, <span class="number">85602273</span>, <span class="number">973040529</span>, <span class="number">2956276779</span>, <span class="number">4218049523</span>, <span class="number">2043716624</span>, <span class="number">2788573458</span>, <span class="number">1218787308</span>, <span class="number">939708241</span>, <span class="number">2861205992</span>, <span class="number">2427634523</span>, <span class="number">4128874493</span>, <span class="number">2326852266</span>, <span class="number">2593724377</span>, <span class="number">1680473968</span>, <span class="number">2763572707</span>, <span class="number">4240616686</span>, <span class="number">2863701585</span>, <span class="number">3551633590</span>, <span class="number">1765256405</span>, <span class="number">2110583291</span>, <span class="number">357590304</span>, <span class="number">2511138801</span>, <span class="number">859903599</span>, <span class="number">35591840</span>, <span class="number">3786321031</span>, <span class="number">3559501147</span>, <span class="number">3107666783</span>, <span class="number">2356867678</span>, <span class="number">1369801910</span>, <span class="number">2488594855</span>, <span class="number">2148205170</span>, <span class="number">3944224524</span>, <span class="number">2219844222</span>, <span class="number">466009157</span>, <span class="number">2328231114</span>, <span class="number">2777059464</span>, <span class="number">1585865212</span>, <span class="number">2871297568</span>, <span class="number">2558165993</span>, <span class="number">1561563095</span>, <span class="number">438633926</span>, <span class="number">2619385032</span>, <span class="number">2185942244</span>, <span class="number">2501145168</span>, <span class="number">2161107203</span>, <span class="number">912485991</span>, <span class="number">3956413626</span>, <span class="number">4065963551</span>, <span class="number">1527306118</span>, <span class="number">378382496</span>, <span class="number">1016367697</span>, <span class="number">82832444</span>, <span class="number">2484726280</span>, <span class="number">867566307</span>, <span class="number">1037338825</span>, <span class="number">4291735272</span>, <span class="number">901722138</span>, <span class="number">3956112428</span>, <span class="number">1060890097</span>, <span class="number">4210262544</span>, <span class="number">2525835262</span>, <span class="number">786274933</span>, <span class="number">2563584713</span>, <span class="number">2738164238</span>, <span class="number">3438656534</span>, <span class="number">564065202</span>, <span class="number">3288501195</span>, <span class="number">1074332184</span>, <span class="number">2947775555</span>, <span class="number">3790174897</span>, <span class="number">3607901153</span>, <span class="number">2332098514</span>, <span class="number">3648669449</span>, <span class="number">3879104921</span>, <span class="number">3983960923</span>, <span class="number">548882335</span>, <span class="number">1817587379</span>, <span class="number">1555057777</span>, <span class="number">2705918139</span>, <span class="number">2755720626</span>, <span class="number">2706833366</span>, <span class="number">2947946695</span>, <span class="number">3082750952</span>, <span class="number">2323554320</span>, <span class="number">1804494628</span>, <span class="number">1677086381</span>, <span class="number">2771841028</span>, <span class="number">2470056271</span>, <span class="number">3431120732</span>, <span class="number">4073503495</span>, <span class="number">2929631518</span>, <span class="number">80800254</span>, <span class="number">605951710</span>, <span class="number">1664206366</span>, <span class="number">2498279527</span>, <span class="number">360922649</span>, <span class="number">2590660538</span>, <span class="number">3724444465</span>, <span class="number">3559953317</span>, <span class="number">3002864163</span>, <span class="number">3369368155</span>, <span class="number">1569518356</span>, <span class="number">3831143803</span>, <span class="number">4184782515</span>, <span class="number">1602338537</span>, <span class="number">2640186368</span>, <span class="number">2864951447</span>, <span class="number">514648741</span>, <span class="number">887020932</span>, <span class="number">166121609</span>, <span class="number">476244781</span>, <span class="number">2238614863</span>, <span class="number">3039706334</span>, <span class="number">3586500526</span>, <span class="number">3038068930</span>, <span class="number">3989751746</span>, <span class="number">3699955508</span>, <span class="number">3559348520</span>, <span class="number">884358906</span>, <span class="number">444882591</span>, <span class="number">3769021913</span>, <span class="number">3665754928</span>, <span class="number">1911261614</span>, <span class="number">1234192084</span>, <span class="number">3450557803</span>, <span class="number">3232410240</span>, <span class="number">494096069</span>, <span class="number">660552292</span>, <span class="number">1365481833</span>, <span class="number">520081058</span>, <span class="number">1027987838</span>, <span class="number">3165505556</span>, <span class="number">1257833693</span>, <span class="number">2146291679</span>, <span class="number">3634622224</span>, <span class="number">589123893</span>, <span class="number">1195030125</span>, <span class="number">1602406253</span>, <span class="number">772753497</span>, <span class="number">2661121530</span>, <span class="number">2938530200</span>, <span class="number">1070706826</span>, <span class="number">3890477657</span>, <span class="number">2112901265</span>, <span class="number">4253917692</span>, <span class="number">2291562806</span>, <span class="number">67613984</span>, <span class="number">2608069358</span>, <span class="number">1726139310</span>, <span class="number">3018885048</span>, <span class="number">367067728</span>, <span class="number">3838771641</span>, <span class="number">1357927847</span>, <span class="number">2616452172</span>, <span class="number">722979624</span>, <span class="number">4153031784</span>, <span class="number">607660099</span>, <span class="number">3164865398</span>, <span class="number">3199368055</span>, <span class="number">1885230388</span>, <span class="number">1055777913</span>, <span class="number">3475913336</span>, <span class="number">1546318749</span>, <span class="number">578282810</span>, <span class="number">1558944130</span>, <span class="number">2955660875</span>, <span class="number">2214838829</span>, <span class="number">4202836988</span>, <span class="number">1405916968</span>, <span class="number">2593459723</span>, <span class="number">3648360966</span>, <span class="number">3644813488</span>, <span class="number">598912719</span>, <span class="number">876098814</span>, <span class="number">355483438</span>, <span class="number">685352898</span>, <span class="number">4099087273</span>, <span class="number">2983380912</span>, <span class="number">450980374</span>, <span class="number">2753208777</span>, <span class="number">429297943</span>, <span class="number">3462109454</span>, <span class="number">3134522829</span>, <span class="number">2064548393</span>, <span class="number">2200750558</span>, <span class="number">4247753845</span>, <span class="number">251220053</span>, <span class="number">1556849099</span>, <span class="number">2022648175</span>, <span class="number">3563632884</span>, <span class="number">2175932589</span>, <span class="number">1463719656</span>, <span class="number">1887673611</span>, <span class="number">3541708446</span>, <span class="number">3033219582</span>, <span class="number">3255799816</span>, <span class="number">534398633</span>, <span class="number">3481196045</span>, <span class="number">825005812</span>, <span class="number">1629237540</span>, <span class="number">640085217</span>, <span class="number">899503755</span>, <span class="number">3105157116</span>, <span class="number">488231507</span>, <span class="number">2708835929</span>, <span class="number">2648663900</span>, <span class="number">2048030022</span>, <span class="number">1503411342</span>, <span class="number">4059850866</span>, <span class="number">1281156549</span>, <span class="number">3171426598</span>, <span class="number">2637361895</span>, <span class="number">1110841056</span>, <span class="number">606897504</span>, <span class="number">3001264062</span>, <span class="number">912267483</span>, <span class="number">148124465</span>, <span class="number">202684836</span>, <span class="number">1425732680</span>, <span class="number">3637635336</span>, <span class="number">1455737055</span>, <span class="number">2977077407</span>, <span class="number">54987379</span>, <span class="number">1056796337</span>, <span class="number">1832170261</span>, <span class="number">1870208138</span>, <span class="number">4074249428</span>, <span class="number">2993704297</span>, <span class="number">381772606</span>, <span class="number">2362720677</span>, <span class="number">2164369676</span>, <span class="number">250156737</span>, <span class="number">3409786877</span>, <span class="number">1590821450</span>, <span class="number">2959971180</span>, <span class="number">3682255149</span>, <span class="number">302283211</span>, <span class="number">4204651015</span>, <span class="number">1294232346</span>, <span class="number">3088162584</span>, <span class="number">4209012441</span>, <span class="number">784333825</span>, <span class="number">1275400791</span>, <span class="number">885466807</span>, <span class="number">1249631254</span>, <span class="number">1236809354</span>, <span class="number">2627231325</span>, <span class="number">2391839654</span>, <span class="number">1638467843</span>, <span class="number">2797229961</span>, <span class="number">3799496431</span>, <span class="number">237846505</span>, <span class="number">3432655604</span>, <span class="number">1690038717</span>, <span class="number">1493561006</span>, <span class="number">4229115929</span>, <span class="number">3784624191</span>, <span class="number">2891696687</span>, <span class="number">3557702324</span>, <span class="number">1120718375</span>, <span class="number">2593253432</span>, <span class="number">1415584860</span>, <span class="number">551110044</span>, <span class="number">1510986691</span>, <span class="number">3267929936</span>, <span class="number">2341598281</span>, <span class="number">247215742</span>, <span class="number">3192053018</span>, <span class="number">2856032615</span>, <span class="number">3290505354</span>, <span class="number">907961089</span>, <span class="number">4128700570</span>, <span class="number">4195745607</span>, <span class="number">2035634741</span>, <span class="number">1047086449</span>, <span class="number">216435127</span>, <span class="number">1997121891</span>, <span class="number">3391563810</span>, <span class="number">2813128796</span>, <span class="number">1517545322</span>]</span><br><span class="line">[<span class="number">2137201486</span>, <span class="number">2243095490</span>, <span class="number">3817098931</span>, <span class="number">229608464</span>, <span class="number">73854451</span>, <span class="number">2470370137</span>, <span class="number">647955184</span>, <span class="number">1997583099</span>, <span class="number">2122796155</span>, <span class="number">3754429965</span>, <span class="number">915090235</span>, <span class="number">3330907022</span>, <span class="number">4045925639</span>, <span class="number">1616378187</span>, <span class="number">3477748127</span>, <span class="number">3235608209</span>, <span class="number">4168058459</span>, <span class="number">137624259</span>, <span class="number">2992531650</span>, <span class="number">509166204</span>, <span class="number">3920545433</span>, <span class="number">1915159362</span>, <span class="number">3901263233</span>, <span class="number">4228481818</span>, <span class="number">2816405167</span>, <span class="number">1786108715</span>, <span class="number">3305752402</span>, <span class="number">2384763695</span>, <span class="number">227465801</span>, <span class="number">1052658065</span>, <span class="number">3153900057</span>, <span class="number">117311308</span>, <span class="number">1595474528</span>, <span class="number">1087880165</span>, <span class="number">3166831564</span>, <span class="number">1588364714</span>, <span class="number">528237288</span>, <span class="number">617272354</span>, <span class="number">618281932</span>, <span class="number">1618791873</span>, <span class="number">3810883062</span>, <span class="number">894018392</span>, <span class="number">2575794219</span>, <span class="number">103568311</span>, <span class="number">3298607681</span>, <span class="number">536028939</span>, <span class="number">3467146346</span>, <span class="number">2201685940</span>, <span class="number">1076138845</span>, <span class="number">918210863</span>, <span class="number">1341794665</span>, <span class="number">3456513087</span>, <span class="number">1710914773</span>, <span class="number">1894309846</span>, <span class="number">2312381988</span>, <span class="number">127727152</span>, <span class="number">876614149</span>, <span class="number">1709878784</span>, <span class="number">1156541415</span>, <span class="number">1555452594</span>, <span class="number">182448271</span>, <span class="number">408344822</span>, <span class="number">2898434231</span>, <span class="number">1998211488</span>, <span class="number">3592206445</span>, <span class="number">1085073460</span>, <span class="number">3397525879</span>, <span class="number">663024038</span>, <span class="number">3434587726</span>, <span class="number">2768736843</span>, <span class="number">617681814</span>, <span class="number">2865397550</span>, <span class="number">3463093384</span>, <span class="number">2746629701</span>, <span class="number">2006818690</span>, <span class="number">1121017677</span>, <span class="number">2047400279</span>, <span class="number">1921768902</span>, <span class="number">528024592</span>, <span class="number">2892263293</span>, <span class="number">2798869302</span>, <span class="number">3481658697</span>, <span class="number">2848153687</span>, <span class="number">1134481165</span>, <span class="number">3720776629</span>, <span class="number">486120970</span>, <span class="number">2683483151</span>, <span class="number">3252410704</span>, <span class="number">2891974166</span>, <span class="number">2121509882</span>, <span class="number">4160792826</span>, <span class="number">2915283137</span>, <span class="number">4014112386</span>, <span class="number">1792273527</span>, <span class="number">805496405</span>, <span class="number">1407962158</span>, <span class="number">3622679727</span>, <span class="number">3512697173</span>, <span class="number">2901255951</span>, <span class="number">3111681208</span>, <span class="number">2877903904</span>, <span class="number">827923100</span>, <span class="number">3729787569</span>, <span class="number">925768344</span>, <span class="number">923906770</span>, <span class="number">3606973890</span>, <span class="number">1181029191</span>, <span class="number">689515782</span>, <span class="number">1651144572</span>, <span class="number">3459362488</span>, <span class="number">2412684107</span>, <span class="number">1362064386</span>, <span class="number">4159398924</span>, <span class="number">2922809145</span>, <span class="number">1602978249</span>, <span class="number">3705882625</span>, <span class="number">4293462677</span>, <span class="number">764953390</span>, <span class="number">4178674632</span>, <span class="number">2074025926</span>, <span class="number">1925824438</span>, <span class="number">2523046149</span>, <span class="number">1263372335</span>, <span class="number">1677306491</span>, <span class="number">760292173</span>, <span class="number">3736532489</span>, <span class="number">2036587975</span>, <span class="number">514100070</span>, <span class="number">706857874</span>, <span class="number">1060105302</span>, <span class="number">2578078966</span>, <span class="number">2320134376</span>, <span class="number">3639164974</span>, <span class="number">1710455599</span>, <span class="number">45505402</span>, <span class="number">2407597519</span>, <span class="number">2537656373</span>, <span class="number">56251495</span>, <span class="number">1630733521</span>, <span class="number">519864415</span>, <span class="number">1444518872</span>, <span class="number">513906964</span>, <span class="number">3852284907</span>, <span class="number">800496493</span>, <span class="number">872675679</span>, <span class="number">3155530732</span>, <span class="number">683268660</span>, <span class="number">3856797215</span>, <span class="number">137673146</span>, <span class="number">3607443770</span>, <span class="number">3700387644</span>, <span class="number">965766446</span>, <span class="number">2454233777</span>, <span class="number">954672952</span>, <span class="number">2855774032</span>, <span class="number">3552757435</span>, <span class="number">3025907069</span>, <span class="number">1402938518</span>, <span class="number">3041387870</span>, <span class="number">3456472325</span>, <span class="number">447871942</span>, <span class="number">1327563590</span>, <span class="number">620160190</span>, <span class="number">1007188755</span>, <span class="number">180115074</span>, <span class="number">52020277</span>, <span class="number">1774723235</span>, <span class="number">2887773879</span>, <span class="number">3508414970</span>, <span class="number">3631951842</span>, <span class="number">1763635376</span>, <span class="number">1924307117</span>, <span class="number">4204987693</span>, <span class="number">2494477117</span>, <span class="number">4017134019</span>, <span class="number">368620157</span>, <span class="number">2814392181</span>, <span class="number">2199699352</span>, <span class="number">1158269085</span>, <span class="number">2580589087</span>, <span class="number">1747804339</span>, <span class="number">1012560482</span>, <span class="number">933361529</span>, <span class="number">176586313</span>, <span class="number">2808905110</span>, <span class="number">83750114</span>, <span class="number">3090684109</span>, <span class="number">1767704883</span>, <span class="number">4189833886</span>, <span class="number">4249260150</span>, <span class="number">2157821862</span>, <span class="number">2112716220</span>, <span class="number">261010276</span>, <span class="number">3168798078</span>, <span class="number">1920566780</span>, <span class="number">1823590666</span>, <span class="number">2244335700</span>, <span class="number">2816218464</span>, <span class="number">3295774792</span>, <span class="number">2283997010</span>, <span class="number">3733740723</span>, <span class="number">3169836042</span>, <span class="number">1782097885</span>, <span class="number">1421909608</span>, <span class="number">3071286976</span>, <span class="number">2529056825</span>, <span class="number">2917504380</span>, <span class="number">2500113967</span>, <span class="number">1340022169</span>, <span class="number">1325786585</span>, <span class="number">2696541388</span>, <span class="number">3763160733</span>, <span class="number">3603998832</span>, <span class="number">72655495</span>, <span class="number">2892272720</span>, <span class="number">2785458061</span>, <span class="number">1724578654</span>, <span class="number">2144338844</span>, <span class="number">2899719547</span>, <span class="number">318345339</span>, <span class="number">2511462884</span>, <span class="number">3220707099</span>, <span class="number">1676208778</span>, <span class="number">2586878575</span>, <span class="number">3209502577</span>, <span class="number">3013180194</span>, <span class="number">2700788434</span>, <span class="number">3611106949</span>, <span class="number">1712906930</span>, <span class="number">3381158761</span>, <span class="number">962420077</span>, <span class="number">1928661992</span>, <span class="number">1241692316</span>, <span class="number">3587734972</span>, <span class="number">2361851891</span>, <span class="number">729570171</span>, <span class="number">1255993130</span>, <span class="number">2059230370</span>, <span class="number">3819451535</span>, <span class="number">2490865889</span>, <span class="number">1229457976</span>, <span class="number">3062266381</span>, <span class="number">3350574651</span>, <span class="number">1861939269</span>, <span class="number">3074031276</span>, <span class="number">1122137253</span>, <span class="number">3267903554</span>, <span class="number">2691684836</span>, <span class="number">3042505532</span>, <span class="number">1103427454</span>, <span class="number">2126863565</span>, <span class="number">3686667924</span>, <span class="number">4181984974</span>, <span class="number">238390653</span>, <span class="number">2037278833</span>, <span class="number">2930470784</span>, <span class="number">424623283</span>, <span class="number">3074336567</span>, <span class="number">4019540123</span>, <span class="number">447553681</span>, <span class="number">491252047</span>, <span class="number">2134100060</span>, <span class="number">3683266682</span>, <span class="number">2218397687</span>, <span class="number">1535505498</span>, <span class="number">628745497</span>, <span class="number">445350701</span>, <span class="number">186184731</span>, <span class="number">3190072310</span>, <span class="number">1084556173</span>, <span class="number">277509904</span>, <span class="number">2898643406</span>, <span class="number">4292667973</span>, <span class="number">2903270520</span>, <span class="number">2565372604</span>, <span class="number">303440546</span>, <span class="number">1808627640</span>, <span class="number">3069152665</span>, <span class="number">2075086265</span>, <span class="number">350493108</span>, <span class="number">3426866771</span>, <span class="number">1167370872</span>, <span class="number">2856612905</span>, <span class="number">1133769957</span>, <span class="number">2168578594</span>, <span class="number">361418126</span>, <span class="number">1788736419</span>, <span class="number">3450707887</span>, <span class="number">1988560242</span>, <span class="number">3106183307</span>, <span class="number">420765626</span>, <span class="number">1595814948</span>, <span class="number">813997149</span>, <span class="number">2474462651</span>, <span class="number">3945801301</span>, <span class="number">1785414095</span>, <span class="number">4177305184</span>, <span class="number">3071687740</span>, <span class="number">1273724577</span>, <span class="number">4178527412</span>, <span class="number">2536332142</span>, <span class="number">2692000853</span>, <span class="number">2172897829</span>, <span class="number">1472311250</span>, <span class="number">1630835977</span>, <span class="number">2274186143</span>, <span class="number">3947343331</span>, <span class="number">1836099636</span>, <span class="number">3955763613</span>, <span class="number">271610193</span>, <span class="number">2479541262</span>, <span class="number">3666471942</span>, <span class="number">4217699594</span>, <span class="number">341808580</span>, <span class="number">1517926781</span>, <span class="number">3311123634</span>, <span class="number">1738600938</span>, <span class="number">3870938757</span>, <span class="number">2309182531</span>, <span class="number">3189576099</span>, <span class="number">1594683626</span>, <span class="number">1900151562</span>, <span class="number">3625455382</span>, <span class="number">3527220315</span>, <span class="number">471268317</span>, <span class="number">4085391597</span>, <span class="number">1205291118</span>, <span class="number">1903466784</span>, <span class="number">934489768</span>, <span class="number">717103328</span>, <span class="number">407385599</span>, <span class="number">1146912039</span>, <span class="number">2148396650</span>, <span class="number">3906209540</span>, <span class="number">3002211292</span>, <span class="number">4003244728</span>, <span class="number">1595357238</span>, <span class="number">4224659669</span>, <span class="number">3679773598</span>, <span class="number">1554305724</span>, <span class="number">1879798896</span>, <span class="number">856183762</span>, <span class="number">2448013518</span>, <span class="number">2839667183</span>, <span class="number">3541976537</span>, <span class="number">1201501683</span>, <span class="number">2210517506</span>, <span class="number">3074699110</span>, <span class="number">2545660131</span>, <span class="number">3696626258</span>, <span class="number">1684534318</span>, <span class="number">3093429986</span>, <span class="number">2603224784</span>, <span class="number">3784468515</span>, <span class="number">1931537793</span>, <span class="number">570789340</span>, <span class="number">376758771</span>, <span class="number">2307788100</span>, <span class="number">2180860578</span>, <span class="number">201860820</span>, <span class="number">3293433128</span>, <span class="number">1396840567</span>, <span class="number">2231737923</span>, <span class="number">3343569549</span>, <span class="number">890147328</span>, <span class="number">3369945506</span>, <span class="number">3155052764</span>, <span class="number">4225372249</span>, <span class="number">3097945008</span>, <span class="number">1976073442</span>, <span class="number">1939061106</span>, <span class="number">3009821364</span>, <span class="number">3636790064</span>, <span class="number">1722351481</span>, <span class="number">571067187</span>, <span class="number">3660829870</span>, <span class="number">625774796</span>, <span class="number">962877120</span>, <span class="number">4093260308</span>, <span class="number">2994561947</span>, <span class="number">1780515932</span>, <span class="number">4180215026</span>, <span class="number">4252365298</span>, <span class="number">2947348994</span>, <span class="number">2484307881</span>, <span class="number">1869054839</span>, <span class="number">1567538899</span>, <span class="number">2381016872</span>, <span class="number">650248596</span>, <span class="number">2837463974</span>, <span class="number">3547259433</span>, <span class="number">1653667021</span>, <span class="number">276270749</span>, <span class="number">1685266082</span>, <span class="number">3605301102</span>, <span class="number">3560229703</span>, <span class="number">3732548108</span>, <span class="number">3643340502</span>, <span class="number">2787020632</span>, <span class="number">301650068</span>, <span class="number">1692193275</span>, <span class="number">3053122330</span>, <span class="number">446613045</span>, <span class="number">753748541</span>, <span class="number">3639322954</span>, <span class="number">2521151846</span>, <span class="number">3846032512</span>, <span class="number">2540737292</span>, <span class="number">1022192711</span>, <span class="number">4242180248</span>, <span class="number">2050165414</span>, <span class="number">2033316505</span>, <span class="number">3063183472</span>, <span class="number">2547887329</span>, <span class="number">1562411323</span>, <span class="number">2846186023</span>, <span class="number">1057549601</span>, <span class="number">200005518</span>, <span class="number">2515317663</span>, <span class="number">614142733</span>, <span class="number">2822762719</span>, <span class="number">1111596810</span>, <span class="number">730033186</span>, <span class="number">3539522165</span>, <span class="number">2876952827</span>, <span class="number">1093300071</span>, <span class="number">2988803720</span>, <span class="number">2788643910</span>, <span class="number">1815173676</span>, <span class="number">923492540</span>, <span class="number">1571870569</span>, <span class="number">1732017323</span>, <span class="number">3912738621</span>, <span class="number">1932484987</span>, <span class="number">1369226061</span>, <span class="number">1043943980</span>, <span class="number">659920686</span>, <span class="number">87860672</span>, <span class="number">3117771700</span>, <span class="number">536701</span>, <span class="number">1276716714</span>, <span class="number">399069847</span>, <span class="number">675178237</span>, <span class="number">4148780498</span>, <span class="number">2293633457</span>, <span class="number">510556418</span>, <span class="number">3306441120</span>, <span class="number">3969884840</span>, <span class="number">931665570</span>, <span class="number">1269866789</span>, <span class="number">1486094185</span>, <span class="number">1896845492</span>, <span class="number">2955478105</span>, <span class="number">3949294788</span>, <span class="number">2483398248</span>, <span class="number">2792552965</span>, <span class="number">367597061</span>, <span class="number">955979053</span>, <span class="number">4141216471</span>, <span class="number">3162398417</span>, <span class="number">783759084</span>, <span class="number">605101703</span>, <span class="number">3200303074</span>, <span class="number">1835668453</span>, <span class="number">3586071304</span>, <span class="number">2174558649</span>, <span class="number">2997422459</span>, <span class="number">3634493394</span>, <span class="number">4138976583</span>, <span class="number">164027380</span>, <span class="number">490279465</span>, <span class="number">2469644175</span>, <span class="number">43130477</span>, <span class="number">1547916166</span>, <span class="number">2406583577</span>, <span class="number">1303190434</span>, <span class="number">1431585058</span>, <span class="number">1519905099</span>, <span class="number">1079834268</span>, <span class="number">231749295</span>, <span class="number">1635997362</span>, <span class="number">1423407810</span>, <span class="number">2814537500</span>, <span class="number">2894136671</span>, <span class="number">3686889877</span>, <span class="number">1812711299</span>, <span class="number">4226627996</span>, <span class="number">3754118359</span>, <span class="number">20804048</span>, <span class="number">4285391186</span>, <span class="number">2958387414</span>, <span class="number">2233166520</span>, <span class="number">3070925064</span>, <span class="number">1320913219</span>, <span class="number">2976334802</span>, <span class="number">4041836979</span>, <span class="number">382095839</span>, <span class="number">1388937175</span>, <span class="number">1819247059</span>, <span class="number">3838255239</span>, <span class="number">3380204370</span>, <span class="number">3935811842</span>, <span class="number">2751480313</span>, <span class="number">164540071</span>, <span class="number">2340071112</span>, <span class="number">610666648</span>, <span class="number">595972300</span>, <span class="number">2011517128</span>, <span class="number">213838138</span>, <span class="number">4255091509</span>, <span class="number">3777157969</span>, <span class="number">2402199559</span>, <span class="number">3852693289</span>, <span class="number">4206005132</span>, <span class="number">3787527275</span>, <span class="number">1471785983</span>, <span class="number">2589388076</span>, <span class="number">631286274</span>, <span class="number">3524096200</span>, <span class="number">590972337</span>, <span class="number">1887865600</span>, <span class="number">1760603763</span>, <span class="number">643231370</span>, <span class="number">2643740969</span>, <span class="number">2388499010</span>, <span class="number">1722852753</span>, <span class="number">645073667</span>, <span class="number">3177739276</span>, <span class="number">1242181637</span>, <span class="number">2984331308</span>, <span class="number">567911875</span>, <span class="number">753620395</span>, <span class="number">3743678155</span>, <span class="number">4278357119</span>, <span class="number">2815496781</span>, <span class="number">1270587449</span>, <span class="number">4259346098</span>, <span class="number">589049437</span>, <span class="number">3257834517</span>, <span class="number">3637173709</span>, <span class="number">2882662502</span>, <span class="number">2892380404</span>, <span class="number">1843952012</span>, <span class="number">2832065071</span>, <span class="number">1053718106</span>, <span class="number">330418109</span>, <span class="number">3909969653</span>, <span class="number">916711438</span>, <span class="number">3709287944</span>, <span class="number">2455153252</span>, <span class="number">763050070</span>, <span class="number">1667025352</span>, <span class="number">3019273370</span>, <span class="number">3814458403</span>, <span class="number">1093369006</span>, <span class="number">3332713718</span>, <span class="number">752637853</span>, <span class="number">100085835</span>, <span class="number">523535862</span>, <span class="number">4068027345</span>, <span class="number">1845694557</span>, <span class="number">2754500540</span>, <span class="number">3395089568</span>, <span class="number">2675873208</span>, <span class="number">525907800</span>, <span class="number">937117572</span>, <span class="number">3313729567</span>, <span class="number">1112554253</span>, <span class="number">114888315</span>, <span class="number">619966459</span>, <span class="number">1641381760</span>, <span class="number">1017743298</span>, <span class="number">1178701646</span>, <span class="number">1581336326</span>, <span class="number">362103885</span>, <span class="number">3516308826</span>, <span class="number">869224156</span>, <span class="number">376989708</span>, <span class="number">633412018</span>, <span class="number">1074308065</span>, <span class="number">3818889570</span>, <span class="number">4249601414</span>, <span class="number">2417156426</span>, <span class="number">2229939059</span>, <span class="number">1313267093</span>, <span class="number">2929434755</span>, <span class="number">783116601</span>, <span class="number">1643811645</span>, <span class="number">996372459</span>, <span class="number">3352907069</span>, <span class="number">953035592</span>, <span class="number">1641549976</span>, <span class="number">2112115418</span>, <span class="number">1350813227</span>, <span class="number">3528081888</span>, <span class="number">1136982588</span>, <span class="number">1390912242</span>, <span class="number">2659886726</span>, <span class="number">1031606598</span>, <span class="number">2617877628</span>]</span><br><span class="line"><span class="string">b&#x27;\x04\xd6k\xe5:\x9a\xabu\xb3\r\x06\xd9\x8e\x04\x87\xc7\x10\xecv\x0bG,\x9c\xb5\xb5q\xd6\x9c\xb8\xb7\xb1d&#x27;</span></span><br><span class="line"><span class="string">b&#x27;CT\x1a&gt;\x12\x8ff&quot;\x89\xde\x9a\x0f\xf4\xac\xa2\xe7\xd2%\x15\xdd`\x03\xf4?u\x07#\xf9\x03\xde\xd4\x97&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Python的random库用的MT19937伪随机数算法，生成范围在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2^{32}-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 的均匀分布的32位整数，该算法的周期为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>19937</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{19937}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span><span class="mord mtight">9</span><span class="mord mtight">3</span><span class="mord mtight">7</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，故名为 MT19937</p><ul><li><p><a href="https://cryptography-wiki.github.io/stream/prng/MT19937/">MT19937 - Cryptography-Wiki</a></p></li><li><p><a href="https://www.cnblogs.com/master-lio/p/17615301.html">mt19937 - Liooooo - 博客园</a></p></li><li><p><a href="https://www.anquanke.com/post/id/205861">浅析MT19937伪随机数生成算法-安全客 - 安全资讯平台</a></p></li></ul><p>MT19937算法实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_int32</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">0xFFFFFFFF</span> &amp; x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MT19937</span>:</span><br><span class="line">    <span class="comment"># 用于初始化伪随机数生成器的类的构造函数</span></span><br><span class="line">    <span class="comment"># 根据seed初始化624的state</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed</span>):</span><br><span class="line">   <span class="comment">#创建一个名为 mt 的列表，包含624个元素，初始值都为0。这是用于存储生成器状态的主要数据结构。</span></span><br><span class="line">        self.mt = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">   <span class="comment">#将输入参数 seed 的值赋给 mt 列表的第一个元素。它用于初始化生成器的种子。</span></span><br><span class="line">        self.mt[<span class="number">0</span>] = seed</span><br><span class="line">   <span class="comment">#mti 是用于追踪 mt 列表中当前使用的元素的索引。</span></span><br><span class="line">        self.mti = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">624</span>):</span><br><span class="line">            self.mt[i] = _int32(<span class="number">1812433253</span> * (self.mt[i - <span class="number">1</span>] ^ self.mt[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>) + i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取伪随机数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_number</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.mti == <span class="number">0</span>:</span><br><span class="line">            self.twist()</span><br><span class="line">        y = self.mt[self.mti]</span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">        self.mti = (self.mti + <span class="number">1</span>) % <span class="number">624</span></span><br><span class="line">        <span class="keyword">return</span> _int32(y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对状态进行旋转</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">624</span>):</span><br><span class="line">            y = _int32((self.mt[i] &amp; <span class="number">0x80000000</span>) + (self.mt[(i + <span class="number">1</span>) % <span class="number">624</span>] &amp; <span class="number">0x7fffffff</span>))</span><br><span class="line">            self.mt[i] = (y &gt;&gt; <span class="number">1</span>) ^ self.mt[(i + <span class="number">397</span>) % <span class="number">624</span>]</span><br><span class="line">            <span class="keyword">if</span> y % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">                self.mt[i] = self.mt[i] ^ <span class="number">0x9908b0df</span></span><br></pre></td></tr></table></figure><p>需要已知624个32bit的数来预测输出，<code>flag1</code>符合情况</p><p>可以用<code>randcrack</code>库或<code>extend_mt19937_predictor</code>库来解决</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line">l = </span><br><span class="line">c = </span><br><span class="line">Num = <span class="number">624</span></span><br><span class="line"></span><br><span class="line">rc = RandCrack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    rc.submit(i)</span><br><span class="line">cal = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Num):</span><br><span class="line">    cal += rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(cal).encode()).digest()</span><br><span class="line">A = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag1 = unpad(A.decrypt(c), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> extend_mt19937_predictor <span class="keyword">import</span> ExtendMT19937Predictor</span><br><span class="line"></span><br><span class="line">L = </span><br><span class="line">c = </span><br><span class="line">Num = <span class="number">624</span></span><br><span class="line"></span><br><span class="line">predictor = ExtendMT19937Predictor()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">    predictor.setrandbits(i, <span class="number">32</span>)</span><br><span class="line">cal = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Num):</span><br><span class="line">    cal += predictor.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(cal).encode()).digest()</span><br><span class="line">A = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag1 = unpad(A.decrypt(c), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(flag1)</span><br></pre></td></tr></table></figure><p>但<code>flag2</code>部分只给出了600个随机数，无法直接预测。</p><p>MT19937在前624个随机数生成完毕之后，整个state会做一次twist，twist代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">twist</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">624</span>):</span><br><span class="line">        y = _int32((self.mt[i] &amp; <span class="number">0x80000000</span>) + (self.mt[(i + <span class="number">1</span>) % <span class="number">624</span>] &amp; <span class="number">0x7fffffff</span>))</span><br><span class="line">        self.mt[i] = (y &gt;&gt; <span class="number">1</span>) ^ self.mt[(i + <span class="number">397</span>) % <span class="number">624</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> y % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            self.mt[i] = self.mt[i] ^ <span class="number">0x9908b0df</span></span><br></pre></td></tr></table></figure><blockquote><p>state经过twist后，其第i个位置其实也只与原来state的三个位置有关，分别是：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>s</mi><mrow><mi>i</mi><mo>+</mo><mn>397</mn></mrow></msub></mrow><annotation encoding="application/x-tex">s_i,s_{i+1},s_{i+397}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">3</span><span class="mord mtight">9</span><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></p><p>由于对于m2来讲，我们只需要预测twist过后的前156个数，所以只要有397+156=553个数字就足够了。而我们拥有前600个随机数，也就拥有state的前600个位置，绰绰有余。</p><p>而最简单的实现依然是用randcrack，由于它要求提交满624个32bit的数字才能预测，所以553-624之间的数字可以随便提交一些，不会影响加密m2的key值。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> randcrack <span class="keyword">import</span> RandCrack</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">rc2 = RandCrack()</span><br><span class="line">num1 = <span class="number">553</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num1):</span><br><span class="line">    rc2.submit(t2[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>-num1):</span><br><span class="line">    rc2.submit(getrandbits(<span class="number">32</span>))</span><br><span class="line"> </span><br><span class="line">cal = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>//<span class="number">4</span>):</span><br><span class="line">    cal += rc2.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(cal).encode()).digest()</span><br><span class="line">A = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag2 = A.decrypt(c2)</span><br><span class="line"><span class="built_in">print</span>(flag2)</span><br></pre></td></tr></table></figure><h2 id="week4-babyhash1"><a class="markdownIt-Anchor" href="#week4-babyhash1"></a> [Week4] babyHash1</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b&quot;SHCTF&#123;XXX_FAKE_FLAG_XXX&#125;&quot;</span></span><br><span class="line">p = <span class="number">334641907675981737343904379204876337859127829299172648068105540032137951559908027120450949854596026146898543</span></span><br><span class="line">G = [random_matrix(GF(p), <span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line">I = identity_matrix(GF(p), <span class="number">2</span>)</span><br><span class="line">save(G, <span class="string">&quot;G.sobj&quot;</span>)</span><br><span class="line">key = os.urandom(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">H = <span class="keyword">lambda</span> m: prod([G[i%<span class="number">64</span>] <span class="keyword">if</span> <span class="built_in">int</span>(j) <span class="keyword">else</span> I <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">bin</span>(<span class="built_in">int</span>(m.<span class="built_in">hex</span>(), <span class="number">16</span>))[<span class="number">2</span>:])])</span><br><span class="line">Q = <span class="built_in">list</span>(H(key))</span><br><span class="line">c = AES.new(<span class="number">2</span>*key, AES.MODE_ECB).encrypt(pad(FLAG,<span class="number">16</span>)).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;Q = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Q = [(92408373140638310582912266568541040708090711689280871505631689622417484347016487049244869849344848494009962, 53959869712387349430336059834241967356744173550876450413296700728311848545577500067458604734684838108665050), (252347024205859090718692136370078190718071419535216876332667850755617010322625175614169994287981074023442001, 248109129148524862390611680382928105844063942809716627922076622327580907465285046951446750474905265881834033)]</span></span><br><span class="line"><span class="string">c = &#x27;bbf4e7820865cc2fa3739a1d86006d83015180776a3285d4c14f5ee95685ac1ef64122e0f3603a794b4f170ec827dbb1&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">334641907675981737343904379204876337859127829299172648068105540032137951559908027120450949854596026146898543</span></span><br><span class="line">F = GF(p)</span><br><span class="line">Q = [(<span class="number">92408373140638310582912266568541040708090711689280871505631689622417484347016487049244869849344848494009962</span>, <span class="number">53959869712387349430336059834241967356744173550876450413296700728311848545577500067458604734684838108665050</span>), (<span class="number">252347024205859090718692136370078190718071419535216876332667850755617010322625175614169994287981074023442001</span>, <span class="number">248109129148524862390611680382928105844063942809716627922076622327580907465285046951446750474905265881834033</span>)]</span><br><span class="line">c = <span class="string">&#x27;bbf4e7820865cc2fa3739a1d86006d83015180776a3285d4c14f5ee95685ac1ef64122e0f3603a794b4f170ec827dbb1&#x27;</span></span><br><span class="line"></span><br><span class="line">G = load(<span class="string">&quot;G.sobj&quot;</span>)</span><br><span class="line">delta = []</span><br><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> G:</span><br><span class="line">    delta.append(g.det())</span><br><span class="line"></span><br><span class="line">target = matrix(F, Q).det()</span><br><span class="line">q = <span class="number">1327433362304639193864290941923656426545922990449</span></span><br><span class="line">qs = factor((p-<span class="number">1</span>)//q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dlog</span>(<span class="params">y, g</span>):</span><br><span class="line">    y, g = <span class="built_in">pow</span>(y, q, p), <span class="built_in">pow</span>(g, q, p)</span><br><span class="line">    <span class="keyword">return</span> log(F(y), F(g))</span><br><span class="line"></span><br><span class="line">ds = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> delta:</span><br><span class="line">    ds.append(dlog(i, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">e = dlog(target, <span class="number">5</span>)</span><br><span class="line">w = <span class="number">2</span>**<span class="number">128</span></span><br><span class="line">A = matrix(ZZ, <span class="number">64</span>+<span class="number">2</span>, <span class="number">64</span>+<span class="number">2</span>)</span><br><span class="line">A[:<span class="number">64</span>,:<span class="number">64</span>] = identity_matrix(<span class="number">64</span>)*<span class="number">2</span></span><br><span class="line">A[<span class="number">64</span>,:<span class="number">65</span>] = matrix(ZZ, <span class="number">1</span>, <span class="number">65</span>, [<span class="number">1</span>]*<span class="number">65</span>)</span><br><span class="line">A[:<span class="number">65</span>,<span class="number">65</span>] = matrix(ZZ, <span class="number">65</span>, <span class="number">1</span>, ds+[e])*w</span><br><span class="line">A[-<span class="number">1</span>,-<span class="number">1</span>] = (p-<span class="number">1</span>)//q*w</span><br><span class="line">AL = A.LLL()</span><br><span class="line">key = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> AL[<span class="number">0</span>][:-<span class="number">2</span>]]), <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(AES.new(<span class="number">2</span>*long_to_bytes(key), AES.MODE_ECB).decrypt(<span class="built_in">bytes</span>.fromhex(c)))</span><br></pre></td></tr></table></figure><h2 id="week4-babyhash2"><a class="markdownIt-Anchor" href="#week4-babyhash2"></a> [Week4] babyHash2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FLAG = <span class="string">&quot;SHCTF&#123;XXX_FAKE_FLAG_XXX&#125;&quot;</span></span><br><span class="line">p = <span class="number">1167195242552699154956050457</span></span><br><span class="line">A = matrix(Zmod(p), [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">B = matrix(Zmod(p), [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">H = <span class="keyword">lambda</span> m: prod([A <span class="keyword">if</span> <span class="built_in">int</span>(i) <span class="keyword">else</span> B <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(<span class="built_in">int</span>(m.<span class="built_in">hex</span>(), <span class="number">16</span>))[<span class="number">2</span>:]])</span><br><span class="line">msg = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&quot;msg &gt; &quot;</span>))</span><br><span class="line"><span class="keyword">assert</span> msg != <span class="string">b&quot;$ Welcome to SHCTF!!! :)&quot;</span></span><br><span class="line"><span class="keyword">if</span> H(msg) == H(<span class="string">b&quot;$ Welcome to SHCTF!!! :)&quot;</span>) <span class="keyword">and</span> <span class="built_in">len</span>(msg) &lt; <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Congrats&quot;</span>, FLAG)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solver</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">2</span>**<span class="number">15</span>):</span><br><span class="line">        p_ = random_prime(<span class="number">2</span>**<span class="number">90</span>)</span><br><span class="line">        PR.&lt;x&gt; = PolynomialRing(GF(p_))</span><br><span class="line">        f = x**<span class="number">2</span>-c*p*x-c</span><br><span class="line">        root = f.roots()</span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            k1 = ZZ(root[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">            k4 = c*p-k1</span><br><span class="line">            k2 = -(k1**<span class="number">2</span>-c*p*k1-c)//p_</span><br><span class="line">            <span class="keyword">return</span> (k1, k2, p_, k4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b, q</span>):</span><br><span class="line">    r = a%b</span><br><span class="line">    q.append(<span class="built_in">int</span>(a//b))</span><br><span class="line">    <span class="keyword">if</span> r: <span class="keyword">return</span> gcd(b,r,q)</span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> b</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fac</span>(<span class="params">I</span>):</span><br><span class="line">    q = []</span><br><span class="line">    gcd(I[<span class="number">0</span>,<span class="number">0</span>], I[<span class="number">0</span>,<span class="number">1</span>], q)</span><br><span class="line">    m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(q) %<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(q)):</span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">2</span>: I *= A^-q[i]; m += <span class="string">&#x27;1&#x27;</span>*q[i]</span><br><span class="line">            <span class="keyword">else</span>: I *= B^-q[i]; m += <span class="string">&#x27;0&#x27;</span>*q[i]</span><br><span class="line">        alpha = <span class="built_in">int</span>(I[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">        m += <span class="string">&#x27;0&#x27;</span>*alpha</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">p = <span class="number">1167195242552699154956050457</span></span><br><span class="line">msg = <span class="string">b&quot;$ Welcome to SHCTF!!! :)&quot;</span></span><br><span class="line">A = matrix(ZZ, [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">B = matrix(ZZ, [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    k1, k2, k3, k4 = solver(p)</span><br><span class="line">    I_ = matrix(ZZ, [[<span class="number">1</span>+k1*p, k2*p],</span><br><span class="line">                    [k3*p, <span class="number">1</span>+k4*p]])</span><br><span class="line">    pad = Fac(I_)</span><br><span class="line">    <span class="keyword">if</span> pad:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(pad)%<span class="number">8</span> == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(pad) &lt; <span class="number">100</span>*<span class="number">8</span>-<span class="number">24</span>*<span class="number">8</span>:</span><br><span class="line">            <span class="built_in">print</span>(msg.<span class="built_in">hex</span>()+long_to_bytes(<span class="built_in">int</span>(pad, <span class="number">2</span>)).<span class="built_in">hex</span>())</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="week4-sidh"><a class="markdownIt-Anchor" href="#week4-sidh"></a> [Week4] siDH</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_param</span>(<span class="params">B</span>):</span><br><span class="line"> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  a = randint(B &gt;&gt; <span class="number">1</span>, B)</span><br><span class="line">  b = randint(B &gt;&gt; <span class="number">2</span>, B &gt;&gt; <span class="number">1</span>)</span><br><span class="line">  p = <span class="number">2</span>**a * <span class="number">3</span>**b - <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> is_prime(p):</span><br><span class="line">   <span class="keyword">return</span> a, b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_dmap</span>(<span class="params">E</span>):</span><br><span class="line"> <span class="keyword">return</span> E.isogeny(E.lift_x(ZZ(<span class="number">1</span>)), codomain = E)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_tpt</span>(<span class="params">E, a, b</span>):</span><br><span class="line"> P, Q = [((p + <span class="number">1</span>) // <span class="number">2</span>**a) * _ <span class="keyword">for</span> _ <span class="keyword">in</span> E.gens()]</span><br><span class="line"> R, S = [((p + <span class="number">1</span>) // <span class="number">3</span>**b) * _ <span class="keyword">for</span> _ <span class="keyword">in</span> E.gens()]</span><br><span class="line"> <span class="keyword">return</span> P, Q, R, S</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">EC, b, P, Q, R, S</span>):</span><br><span class="line"> skey = randint(<span class="number">1</span>, <span class="number">3</span>**b)</span><br><span class="line"> T = R + skey * S</span><br><span class="line"> phi = EC.isogeny(T, algorithm = <span class="string">&quot;factored&quot;</span>)</span><br><span class="line"> _phi_dom, _phi_P, _phi_Q = phi.codomain(), phi(P), phi(Q)</span><br><span class="line"> <span class="keyword">return</span> skey, _phi_dom, _phi_P, _phi_Q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1,b1 = gen_param(<span class="number">350</span>)</span><br><span class="line">p1 = <span class="number">2</span>**a1 * <span class="number">3</span>**b1 - <span class="number">1</span></span><br><span class="line">F1.&lt;x&gt; = GF(p1^<span class="number">2</span>, modulus = x**<span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">EC1 = EllipticCurve(F1, [<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">P1, Q1, R1, S1 = gen_tpt(EC, a1, b1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;P1=<span class="subst">&#123;P1.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Q1=<span class="subst">&#123;Q1.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;R1=<span class="subst">&#123;R1.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;S1=<span class="subst">&#123;S1.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sk1, _phi1_dom, _phi1_P, _phi1_Q = keygen(EC, b1, P1, Q1, R1, S1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;EC1:<span class="subst">&#123;_phi1_dom&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;PB1=<span class="subst">&#123;_phi1_P.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;QB2=<span class="subst">&#123;_phi1_Q.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a2,b2 = gen_param(<span class="number">610</span>)</span><br><span class="line">p2 = <span class="number">2</span>**a2 * <span class="number">3</span>**b2 - <span class="number">1</span></span><br><span class="line">F2.&lt;x&gt; = GF(p2^<span class="number">2</span>, modulus = x**<span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">EC2 = EllipticCurve(F2, [<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">P2, Q2, R2, S2 = gen_tpt(EC, a2, b2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;P2=<span class="subst">&#123;P2.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Q2=<span class="subst">&#123;Q2.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;R2=<span class="subst">&#123;R2.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;S2=<span class="subst">&#123;S2.xy()&#125;</span>&#x27;</span>)</span><br><span class="line">sk2, _phi2_dom, _phi2_P, _phi2_Q = keygen(EC, b2, P2, Q2, R2, S2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;EC2:<span class="subst">&#123;_phi2_dom&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;PB2=<span class="subst">&#123;_phi1_P.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;QB2=<span class="subst">&#123;_phi1_Q.xy()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">key = md5(long_to_bytes(sk1)).digest()</span><br><span class="line">iv = md5(<span class="built_in">str</span>(sk2).encode()).digest()</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_CFB, iv=iv)</span><br><span class="line">enc = cipher.encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc = <span class="subst">&#123;enc.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P1=(<span class="number">3722377589495565619388409947786216655637784681305941494147641084588810631146007176891913880271007127410796381111369183814847421656105900790804342643108</span>*x + <span class="number">8802687499644901060050022727432797409089156524380319488542634490587555795650045132570968389279817924873049502727897060507742746276768059101617693509917</span> , <span class="number">3719477936206364187390068985145413157800621156741491559595580900652585286439418248577575633342364501408686579893456793185782751143171546872666909621050</span>*x + <span class="number">11747436493943707843147767337329761069262174137296210697323632536020627422974942280457502098526627796314363833333722260721915312017545212458579310144482</span>)</span><br><span class="line">Q1=(<span class="number">12915018802277618444467947405666732828949451340216601075081682365787173754226880050603374384885896424371918951679575583901988634116566784032229862869167</span>*x + <span class="number">9007776929782360909455509476806206197092770009777355629134584109191428394613216631397127762352766433731005414625380856231942679613039804604556902750121</span> , <span class="number">3337874847860908062006392359743970721822062807701776864258214454048414930046512179257997474360178458090070482273898812428917737854703385268693787730341</span>*x + <span class="number">2466887347330511324773080125454207491097000379360268269630202404092782122675750917288514012045044575681782320156449148824691799574240195537304046598804</span>)</span><br><span class="line">R1 =(<span class="number">5658557527226961352379349695298022272034591708614537846197946821664407815672677132716039709980366402273967153471450029112980202032504963557614554232081</span>*x + <span class="number">11551357271600404735819563619419067751607101807322269228277150670297507970164565732253196369722035427850219878923530600036342343824249401164519444699925</span> ,<span class="number">265897976893439254153074131180525503299599682872457003045711147421296792144844696453821448204074723372166153583764179699404006841669171292261372682675</span>*x + <span class="number">724107740695298992152442683362664457782010273239642672266143745994073399611599972677572553191510548840256649548349879064220814619385494208383928832803</span>)</span><br><span class="line">S1 = (<span class="number">4449849950679627875144313300296652171690240777751013993956114741413640793976703228710890484448481014950788184128005223666200974595989394007996227889227</span>*x + <span class="number">10221990584477216572376167606081943897583234679837301896971110421576150195418475700069646493255665879797854652838863654289069021445601907647135585418877</span> , <span class="number">2307462255914883623706392794727437281947383985198148884124180699306428786822285241218884618081037544088797503669931959199490244566153811635971236094925</span>*x + <span class="number">12114989818233896956637793499130020016761661447768788981097230464243285295294294464715758630408703103345278454759389501739054553571870662915301521850727</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EB1:Elliptic Curve defined by y^<span class="number">2</span> = x^<span class="number">3</span> + <span class="number">6</span>*x^<span class="number">2</span> + (<span class="number">4189289089477997468544979453822695400500584265495091803346578638134562448932335970687326793676571649785862746844702037419185523428130990204162507604142</span>*x+<span class="number">8453144899752979274082603184674998770084621842778345709593026085665609787243919407101520453085615209143595825360981888699031968367621444521989681207925</span>)*x + (<span class="number">10876663327831437262436092946202594533286519870258843389665958485316202856443113411424811891669071467324995879309148604251803514827408043800152902428079</span>*x+<span class="number">4101994484351838878118339435531362623951299298760741543454654959627592905764432016193446997841956209731202742983657859454109374390742351108699397540937</span>) over Finite Field <span class="keyword">in</span> i of size <span class="number">13175843156907117380839252916199345042492186767578363998445663477035843932020761233518914911546024351608607150390087656982982306331019593961154237431807</span>^<span class="number">2</span></span><br><span class="line">PB1=(<span class="number">400743151686086340244873453949520840608574156208868642818110176396852951486095204394646889447695188912538995843668914636276137300969251924860731987594</span>*x + <span class="number">8066723303558125260716197269861828046216772084431033719257537396188532673015028142277860187197048570426361924628036485855109504692435989532466549892337</span> : <span class="number">7857822094787553865337300888116802881139911120764957076597259295643802343603595437056405429678918577452653990040253270552510408546662517341930347472071</span>*x + <span class="number">10256174272055348496449952390378894222811363081031264681923652307005325570743231607657784873505317820364596562401946711140198577008958311498216702686123</span>)</span><br><span class="line">QB1=(<span class="number">11265527532569587904111577151486645315441536837729457283471778056974474854267045024868622287870300007236540035625960216806930485893214503444708227243383</span>*x + <span class="number">11572347052548869297030219234396257199641564118601390459458935400217229709294039384097088201478090062341631595370187207194936531910796633969532025890187</span> : <span class="number">1238001162632333913423959416649793026045237600008578022715875560482397022195744581004778851687493893610142113162366180305156034033668836817430095906149</span>*x + <span class="number">9355808802624221590053977160056741459388657876928397271333623542173291286953283614788931011423156931539777202646167976404136542556319294668512474371234</span> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P2 =(<span class="number">26532669647185534216919632454563012758176036840369727404445318596643186844961014237696589494044586519996222505129162421855623059726778064289730847721912630181732006537411094550079658466738877742707225452302161480055637595147605056943238961551962912726857744351864942655080809408252483764908</span>*x + <span class="number">5812125798407648530557806453276971100052617607817970289640758782839745787156978571675000742270104615849816276857241701143604798144853734688276746422525568056414894955227600694186327090639953921900591841375148784726343182974080826517494429823506784951108570345230509782432748957198973176557</span> , <span class="number">18170912231945774226275509320755918597241684399013829358085583068620150918112942721642278196145025327426502604698222039788533590901192438632167767861918617714856305276236364591982716806931138652301078418873525926290927769922064835154806942253196121491744473872376873132890629881196649490629</span>*x + <span class="number">63449364629814972232211370797703143791798005155742711649921757750076247418977215094671070824854640922496466244527853596337389541043547252641029497892777720706149127263347252874027177102007048788926192874731602916383267663436392366016251960068968104701970215355153537253807070741855232748775</span>)</span><br><span class="line">Q2 =(<span class="number">42136584137812471055239712605979664248723194584329825504113325543473782453710246311097778204257972969988889548651858896024346287087771416233601557428774910464027636344801801157477551245445626845622940230448413907258474601435777417704217302132342224824779399945380325818482777959384425291202</span>*x + <span class="number">28296368679146068828136641681710295025336645284295264101756993260272669740048044336924939223851691772872478126511624718538627825216594660061759605074294632848971213782292601886969141003803207582527211891134999395005856333909777310102168312969406698423350527993168642419225166941765898216372</span> , <span class="number">24252723040347680701413751304028021538994021203882796882406562234397335939592763757242534129915362456370369381794876781527365640074695381315843810927200394729665283960373930566280914193406969798955462142448747998461967647076878739164506097299031556840321385018392828143097654049003741477775</span>*x + <span class="number">33267720985746675210299288173839504448704818085049573573782475394127405092079693799437115220623519093827817268067436033899592961243028616775476581238880321680412934083591896010475885530871761321530855678932407897123073884230850264069659060055805157529775052479253840099694804476053775909667</span> )</span><br><span class="line"></span><br><span class="line">R2 =(<span class="number">38436619031110865991923879368273825144591134194842250127138499745263028798151562949280051166055337764784928604655345143493484071370950291098970176327526604356876742861468639960728907306223619531997103795068973049143179040759482549370743939713683059322455935027250781363099017038267572070382</span>*x + <span class="number">41093937892203747071226497194460174684840688215389654564992940699770179304781361874671172244464825887258292329587141807444383894136057220808847808753364679351973663750364054669449905253193218352790909945369307367433850610807189354403253554148345197834701648188048050606356011567979827517009</span> , <span class="number">9875876467935369638084938067896432182208690144531378403534745071976760997736224070951195614692508013003420177331978612557059092387961951203758997069353790956443826183851256825228023334285334341067097662506368272794278783481229345549459566223386198635792121370861583720130236996379339906174</span>*x + <span class="number">19447561977724594192572514756713004769718033798185884029348217371868425699196934174482768588729693090959863175090532851846013603063398325098484647069673894219675495546444516464516218477904028091215303855695854982251862178713199631677332189311907166991170300285734973720209408448016404386279</span> )</span><br><span class="line"></span><br><span class="line">S2 =(<span class="number">71249861083363466146240185589742072416947001294427348758335822282789347285654895938446726327788096800499999553209177039582953195361659982428068926448233527913023420037219259936495112851482429822958147790870077230730091177257985429649031364838060427183913400513554819344862904827490880772682</span>*x + <span class="number">39578052854960012026255637126705373821483266678906490093269284444545750491201374187150247754423052586191953109246769525121762606083950469754696333553496751583744856481664734887761273029389862834902994256675947446700980363194864181267638836314434750455189422736876156451018780319594859427229</span> , <span class="number">39197547329694719539529974714972757635993347219971485992350815969532199306333306049850413360278269128003596216529445446572820778213349500212847637573581492691769295796335260726180320712869520367834322990402467146959135659931987007965917989228442334598796126593765472147605031327475567701086</span>*x + <span class="number">78070033755581537489222113608059840236619421090183039048402466605471070294742099301510439400541337232022512116279912957923221843363406417706677109027135474092494932420033158293877172615616465938036108381979097606754379539534265853790205211707045379351990977911885255397786139615991362742209</span> )</span><br><span class="line"></span><br><span class="line">EB2:Elliptic Curve defined by y^<span class="number">2</span> = x^<span class="number">3</span> + <span class="number">6</span>*x^<span class="number">2</span> + (<span class="number">59535702210902206632057724266122403485782121930269490904764357850731481931811358892291834226309250891450990328900036049280010419604141194291637296730727328703913164680567403783556426953678285004014585121686544887056773006148356101004676806983339649844157509652742849487058509475632164255987</span>*x+<span class="number">64852232435177399443640158784531454040944394241934383260903245435876484235545723851033335774817478661385417394748201477353536461419931926490835275348734525706542632524107755972171394421922803412948624633078480838779833967459391738992623265735881364492275499237263259819337503800949666114300</span>)*x + (<span class="number">61050690806389187934769383126786350986004548885068804715147802394614409167263078704960954888018441383310078678346054616498251041749628728818830924510356529523120808407048389377565446266649410216170097464816755297151018034985942268859099759375206161519933062527753348065060632492394513384086</span>*x+<span class="number">8077074439258024172434168944099867368398890225954529153626574422394594541950204447361509876049948251527290252332533540126109187259353923004317852092303146292126930346834737856487032520566066787020590518347408517607586872466242304341998561230199735904938577495873392435708081679419091264767</span>) over Finxte Field <span class="keyword">in</span> x of size <span class="number">82049429049937972170744454730593345160514304243739159904783417843550315750231928581899391756256783736403989271048847542926715937076900048775072545358407957727845645357780713979087402767756607414183416359287811818280895339396273490061030555956264309782382325666413874887621917291859821985791</span>^<span class="number">2</span></span><br><span class="line">PB2=(<span class="number">416996386611953912381825671411217896862273056276393640633857992847371853210568257096183885552618362723081850781382485053310040111838223298831389037016745104797263137119258673015585863160793951306139520262051168484452018201607146541321879548245965120060708406056548188263109428770184470679</span>*x + <span class="number">20592158493675665198495392336832601510295492846540435551041621150757189812529173392073328659255009380759876334891966292009700608091292588069484836373960820208560629600373809653827704658519366030767296831927997226766001416180323174025471476178795433544546769173932191085724053540646639944729</span> : <span class="number">71934255319779473319456231037521357239577461842639834638995781561962276154205648471319881543016508220120521945006188958766711918515927736666300390531510013013219752222136876849357120821173182094753920757720079350217559660597480161836396311343966037676936442963053804573072914962152460674663</span>*x + <span class="number">79176415376881574459252426057416542844132750411766663750705407197328587941817178923562720329407116594864696212948749892818055154804078699130984677442760292980510087006005991843768472531019069389511942796903023273249068773581958501468457621161962887712050221461681839141585467402591793645894</span> )</span><br><span class="line">QB2= (<span class="number">81399207896220104838523199229123942836223942998672721447617471088799933546789833887166127001116791183009155784956302068892276943497990222792723633019021458579696541635684638373573953057978849292600240170943085361633813448722609135351165092224283296296707819206674751128093132678767574518299</span>*x + <span class="number">59565272697509141787703630456883972192553675699784211987893422193583642170431575906952477269198392298815160807657217599332116732898901549042831683061911999197598082798698793498902676161570298508553574866686598052406458954435987817164049241700002339342165193999242704894297418052166335638731</span> : <span class="number">21930351134214703951291759959503306221382335091685056420498342039206078305903361133512863350368812584471061688170029056369164678056492881926814997907481142982389978084439411052754236340914978327950474951824251797939798502875399920157660381059113442352137267881283959649753286318015289023163</span>*x + <span class="number">32177434323242823799795301005877693615760991886819458542076959058162762244773500905362804118528323187241784967539643917408903962138638896033673432863920521413676017199387780524917678271106039934571641676244524711655457465408480508716026824510901729812960266245895067755449573368867399411326</span> )</span><br><span class="line"></span><br><span class="line">enc = 2ba4fd55c06bfcc9d253d3a60ec1eaaa82d482ff671d088b4f1354ebad2400d54a3bdd1dd1e38bf25a334f5fd3ec98ea89</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>又学到了，这个是SIDH（超奇异同源Diffie-Hellman秘钥交换算法），一种后量子安全秘钥交换协议</p><ul><li><a href="https://zhuanlan.zhihu.com/p/113113268">后量子安全秘钥交换协议SIDH简介 - 知乎</a></li><li><a href="https://lbwang.github.io/2020/04/07/sidh/">后量子安全密钥交换协议SIDH简介 | Bintou’s Blog</a></li></ul><p>Castryck-Decru攻击是一种针对Supersingular Isogeny Diffie-Hellman (SIDH)协议的密钥恢复攻击。该攻击由Wouter Castryck和Thomas Decru于2022年提出，旨在利用椭圆曲线上的扭点信息和秘密同态的度数来计算所需的同态。攻击的核心在于利用椭圆曲线上的小非标量自同态的存在性，从而在多项式时间内恢复出用于生成秘密同态的整数。</p><p>论文原文： <a href="https://eprint.iacr.org/2022/975.pdf">975.pdf</a></p><p>攻击代码：<a href="https://github.com/GiacomoPope/Castryck-Decru-SageMath">GiacomoPope/Castryck-Decru-SageMath: A SageMath implementation of the Castryck-Decru Key Recovery attack on SIDH</a></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>=</mo><msup><mn>2</mn><mi>a</mi></msup><mo>∗</mo><msup><mn>3</mn><mi>b</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p=2^a * 3^b-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span></span></span></span>在EB1最后面找到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">13175843156907117380839252916199345042492186767578363998445663477035843932020761233518914911546024351608607150390087656982982306331019593961154237431807</span></span><br></pre></td></tr></table></figure><p>分解找到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: Got function &#039;\newline&#039; with no arguments as argument to &#039;\begin{array}&#039; at position 1: \̲n̲e̲w̲l̲i̲n̲e̲'>\begin{array}\\a_1 = 250 \\b_1 = 159 \\a_2 = 486 \\b_2 = 301\end{array}</p><p>构造椭圆曲线，后面有点超模了</p><p>官方wp下来了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(sage-build)$ sage sol1.sage --parallel</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> public_values_aux</span><br><span class="line"><span class="keyword">from</span> public_values_aux <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">load(<span class="string">&#x27;castryck_decru_shortcut.sage&#x27;</span>)</span><br><span class="line">load(<span class="string">&#x27;sandwich_attack.sage&#x27;</span>)</span><br><span class="line"></span><br><span class="line">SIKE_parameters = &#123;</span><br><span class="line">    <span class="string">&quot;SIKEp434&quot;</span> : (<span class="number">216</span>, <span class="number">137</span>),</span><br><span class="line">    <span class="string">&quot;SIKEp503&quot;</span> : (<span class="number">250</span>, <span class="number">159</span>),</span><br><span class="line">    <span class="string">&quot;SIKEp610&quot;</span> : (<span class="number">305</span>, <span class="number">192</span>),</span><br><span class="line">    <span class="string">&quot;SIKEp751&quot;</span> : (<span class="number">372</span>, <span class="number">239</span>),</span><br><span class="line">    <span class="string">&quot;SIKEp964&quot;</span> : (<span class="number">486</span>, <span class="number">301</span>), <span class="comment"># removed after NIST round 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change me to attack different parameter sets</span></span><br><span class="line">NIST_submission = <span class="string">&quot;SIKEp503&quot;</span></span><br><span class="line">a, b = SIKE_parameters[NIST_submission]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Running the attack against <span class="subst">&#123;NIST_submission&#125;</span> parameters, which has a prime: 2^<span class="subst">&#123;a&#125;</span>*3^<span class="subst">&#123;b&#125;</span> - 1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Generating public data for the attack...&quot;</span>)</span><br><span class="line"><span class="comment"># Set the prime, finite fields and starting curve</span></span><br><span class="line"><span class="comment"># with known endomorphism</span></span><br><span class="line">p = <span class="number">2</span>^a*<span class="number">3</span>^b - <span class="number">1</span></span><br><span class="line">public_values_aux.p = p</span><br><span class="line">Fp2.&lt;i&gt; = GF(p^<span class="number">2</span>, modulus=x^<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Fp2)</span><br><span class="line"></span><br><span class="line">E_start = EllipticCurve(Fp2, [<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">E_start.set_order((p+<span class="number">1</span>)^<span class="number">2</span>, num_checks=<span class="number">0</span>) <span class="comment"># Speeds things up in Sage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generation of the endomorphism 2i</span></span><br><span class="line">two_i = generate_distortion_map(E_start)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate public torsion points, for SIKE implementations</span></span><br><span class="line"><span class="comment"># these are fixed but to save loading in constants we can</span></span><br><span class="line"><span class="comment"># just generate them on the fly</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P =(<span class="number">3722377589495565619388409947786216655637784681305941494147641084588810631146007176891913880271007127410796381111369183814847421656105900790804342643108</span>*i + <span class="number">8802687499644901060050022727432797409089156524380319488542634490587555795650045132570968389279817924873049502727897060507742746276768059101617693509917</span> , <span class="number">3719477936206364187390068985145413157800621156741491559595580900652585286439418248577575633342364501408686579893456793185782751143171546872666909621050</span>*i + <span class="number">11747436493943707843147767337329761069262174137296210697323632536020627422974942280457502098526627796314363833333722260721915312017545212458579310144482</span>)</span><br><span class="line">Q =(<span class="number">12915018802277618444467947405666732828949451340216601075081682365787173754226880050603374384885896424371918951679575583901988634116566784032229862869167</span>*i + <span class="number">9007776929782360909455509476806206197092770009777355629134584109191428394613216631397127762352766433731005414625380856231942679613039804604556902750121</span> , <span class="number">3337874847860908062006392359743970721822062807701776864258214454048414930046512179257997474360178458090070482273898812428917737854703385268693787730341</span>*i + <span class="number">2466887347330511324773080125454207491097000379360268269630202404092782122675750917288514012045044575681782320156449148824691799574240195537304046598804</span>)</span><br><span class="line">R =(<span class="number">5658557527226961352379349695298022272034591708614537846197946821664407815672677132716039709980366402273967153471450029112980202032504963557614554232081</span>*i + <span class="number">11551357271600404735819563619419067751607101807322269228277150670297507970164565732253196369722035427850219878923530600036342343824249401164519444699925</span> ,<span class="number">265897976893439254153074131180525503299599682872457003045711147421296792144844696453821448204074723372166153583764179699404006841669171292261372682675</span>*i + <span class="number">724107740695298992152442683362664457782010273239642672266143745994073399611599972677572553191510548840256649548349879064220814619385494208383928832803</span>)</span><br><span class="line">S = (<span class="number">4449849950679627875144313300296652171690240777751013993956114741413640793976703228710890484448481014950788184128005223666200974595989394007996227889227</span>*i + <span class="number">10221990584477216572376167606081943897583234679837301896971110421576150195418475700069646493255665879797854652838863654289069021445601907647135585418877</span> , <span class="number">2307462255914883623706392794727437281947383985198148884124180699306428786822285241218884618081037544088797503669931959199490244566153811635971236094925</span>*i + <span class="number">12114989818233896956637793499130020016761661447768788981097230464243285295294294464715758630408703103345278454759389501739054553571870662915301521850727</span>)</span><br><span class="line">P2, Q2, P3, Q3 = E_start(P), E_start(Q), E_start(R), E_start(S)</span><br><span class="line">check_torsion_points(E_start, a, b, P2, Q2, P3, Q3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate Bob&#x27;s key pair</span></span><br><span class="line">EB = EllipticCurve(Fp2, [<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,(<span class="number">4189289089477997468544979453822695400500584265495091803346578638134562448932335970687326793676571649785862746844702037419185523428130990204162507604142</span>*i+<span class="number">8453144899752979274082603184674998770084621842778345709593026085665609787243919407101520453085615209143595825360981888699031968367621444521989681207925</span>),(<span class="number">10876663327831437262436092946202594533286519870258843389665958485316202856443113411424811891669071467324995879309148604251803514827408043800152902428079</span>*i+<span class="number">4101994484351838878118339435531362623951299298760741543454654959627592905764432016193446997841956209731202742983657859454109374390742351108699397540937</span>)])</span><br><span class="line">EB.set_order((p+<span class="number">1</span>)**<span class="number">2</span>, num_checks=<span class="number">0</span>)</span><br><span class="line">PB =EB(<span class="number">400743151686086340244873453949520840608574156208868642818110176396852951486095204394646889447695188912538995843668914636276137300969251924860731987594</span>*i + <span class="number">8066723303558125260716197269861828046216772084431033719257537396188532673015028142277860187197048570426361924628036485855109504692435989532466549892337</span> ,<span class="number">7857822094787553865337300888116802881139911120764957076597259295643802343603595437056405429678918577452653990040253270552510408546662517341930347472071</span>*i + <span class="number">10256174272055348496449952390378894222811363081031264681923652307005325570743231607657784873505317820364596562401946711140198577008958311498216702686123</span>)</span><br><span class="line">QB =EB(<span class="number">11265527532569587904111577151486645315441536837729457283471778056974474854267045024868622287870300007236540035625960216806930485893214503444708227243383</span>*i + <span class="number">11572347052548869297030219234396257199641564118601390459458935400217229709294039384097088201478090062341631595370187207194936531910796633969532025890187</span>, <span class="number">1238001162632333913423959416649793026045237600008578022715875560482397022195744581004778851687493893610142113162366180305156034033668836817430095906149</span>*i + <span class="number">9355808802624221590053977160056741459388657876928397271333623542173291286953283614788931011423156931539777202646167976404136542556319294668512474371234</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># =====  ATTACK  ====================</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RunAttack</span>(<span class="params">num_cores</span>):</span><br><span class="line">    <span class="keyword">return</span> CastryckDecruAttack(E_start, P2, Q2, EB, PB, QB, two_i, num_cores=num_cores)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;__file__&#x27;</span> <span class="keyword">in</span> <span class="built_in">globals</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;--parallel&#x27;</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">        <span class="comment"># Set number of cores for parallel computation</span></span><br><span class="line">        num_cores = os.cpu_count()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Performing the attack in parallel using <span class="subst">&#123;num_cores&#125;</span> cores&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num_cores = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;--sandwich&#x27;</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">        <span class="comment"># Use the fact that 2^a - 5*3^b is a sum of squares</span></span><br><span class="line">        <span class="keyword">assert</span> NIST_submission == <span class="string">&quot;SIKEp964&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> two_squares(<span class="number">2</span>^a - <span class="number">5</span>*<span class="number">3</span>^b)</span><br><span class="line">        recovered_key = SandwichAttack(E_start, P2, Q2, EB, PB, QB, two_i, k=<span class="number">5</span>, alp=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        recovered_key = RunAttack(num_cores)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Computing image of 3-adic torsion in split factor CB</span></span><br><span class="line"><span class="string">Glue-and-split! These are most likely the secret digits.</span></span><br><span class="line"><span class="string">Bob&#x27;s secret key revealed as: 3599349351989826939257244168875987905412334469321466246296914822246846713144</span></span><br><span class="line"><span class="string">In ternary, this is: [2, 1, 0, 2, 2, 1, 0, 1, 0, 1, 1, 1, 1, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2, 2, 1, 2, 0, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 2, 1, 1, 0, 0, 1, 2, 0, 2, 2, 2, 1, 0, 1, 1, 1, 0, 0, 1, 2, 2, 1, 0, 2, 2, 1, 1, 1, 2, 2, 2, 0, 1, 0, 0, 1, 0, 0, 2, 1, 2, 1, 1, 2, 2, 1, 0, 0, 0, 2, 1, 2, 0, 2, 1, 0, 2, 2, 1, 1, 2, 1, 1, 1, 0, 0, 1, 2, 2, 0, 1, 0, 1, 2, 0, 2, 1, 0, 2, 1, 0, 1, 1, 2, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1]</span></span><br><span class="line"><span class="string">Altogether this took 20.913691997528076 seconds.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#sk1 = 3599349351989826939257244168875987905412334469321466246296914822246846713144</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(sage-build)$ sage sol2.sage --parallel --sandwich</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> public_values_aux</span><br><span class="line"><span class="keyword">from</span> public_values_aux <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">load(<span class="string">&#x27;castryck_decru_shortcut.sage&#x27;</span>)</span><br><span class="line">load(<span class="string">&#x27;sandwich_attack.sage&#x27;</span>)</span><br><span class="line"></span><br><span class="line">SIKE_parameters = &#123;</span><br><span class="line">    <span class="string">&quot;SIKEp434&quot;</span> : (<span class="number">216</span>, <span class="number">137</span>),</span><br><span class="line">    <span class="string">&quot;SIKEp503&quot;</span> : (<span class="number">250</span>, <span class="number">159</span>),</span><br><span class="line">    <span class="string">&quot;SIKEp610&quot;</span> : (<span class="number">305</span>, <span class="number">192</span>),</span><br><span class="line">    <span class="string">&quot;SIKEp751&quot;</span> : (<span class="number">372</span>, <span class="number">239</span>),</span><br><span class="line">    <span class="string">&quot;SIKEp964&quot;</span> : (<span class="number">486</span>, <span class="number">301</span>), <span class="comment"># removed after NIST round 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change me to attack different parameter sets</span></span><br><span class="line">NIST_submission = <span class="string">&quot;SIKEp964&quot;</span></span><br><span class="line">a, b = SIKE_parameters[NIST_submission]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Running the attack against <span class="subst">&#123;NIST_submission&#125;</span> parameters, which has a prime: 2^<span class="subst">&#123;a&#125;</span>*3^<span class="subst">&#123;b&#125;</span> - 1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Generating public data for the attack...&quot;</span>)</span><br><span class="line"><span class="comment"># Set the prime, finite fields and starting curve</span></span><br><span class="line"><span class="comment"># with known endomorphism</span></span><br><span class="line">p = <span class="number">2</span>^a*<span class="number">3</span>^b - <span class="number">1</span></span><br><span class="line">public_values_aux.p = p</span><br><span class="line">Fp2.&lt;i&gt; = GF(p^<span class="number">2</span>, modulus=x^<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Fp2)</span><br><span class="line"></span><br><span class="line">E_start = EllipticCurve(Fp2, [<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">E_start.set_order((p+<span class="number">1</span>)^<span class="number">2</span>, num_checks=<span class="number">0</span>) <span class="comment"># Speeds things up in Sage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generation of the endomorphism 2i</span></span><br><span class="line">two_i = generate_distortion_map(E_start)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate public torsion points, for SIKE implementations</span></span><br><span class="line"><span class="comment"># these are fixed but to save loading in constants we can</span></span><br><span class="line"><span class="comment"># just generate them on the fly</span></span><br><span class="line"></span><br><span class="line">P =(<span class="number">26532669647185534216919632454563012758176036840369727404445318596643186844961014237696589494044586519996222505129162421855623059726778064289730847721912630181732006537411094550079658466738877742707225452302161480055637595147605056943238961551962912726857744351864942655080809408252483764908</span>*i + <span class="number">5812125798407648530557806453276971100052617607817970289640758782839745787156978571675000742270104615849816276857241701143604798144853734688276746422525568056414894955227600694186327090639953921900591841375148784726343182974080826517494429823506784951108570345230509782432748957198973176557</span> , <span class="number">18170912231945774226275509320755918597241684399013829358085583068620150918112942721642278196145025327426502604698222039788533590901192438632167767861918617714856305276236364591982716806931138652301078418873525926290927769922064835154806942253196121491744473872376873132890629881196649490629</span>*i + <span class="number">63449364629814972232211370797703143791798005155742711649921757750076247418977215094671070824854640922496466244527853596337389541043547252641029497892777720706149127263347252874027177102007048788926192874731602916383267663436392366016251960068968104701970215355153537253807070741855232748775</span>)</span><br><span class="line">Q =(<span class="number">42136584137812471055239712605979664248723194584329825504113325543473782453710246311097778204257972969988889548651858896024346287087771416233601557428774910464027636344801801157477551245445626845622940230448413907258474601435777417704217302132342224824779399945380325818482777959384425291202</span>*i + <span class="number">28296368679146068828136641681710295025336645284295264101756993260272669740048044336924939223851691772872478126511624718538627825216594660061759605074294632848971213782292601886969141003803207582527211891134999395005856333909777310102168312969406698423350527993168642419225166941765898216372</span> , <span class="number">24252723040347680701413751304028021538994021203882796882406562234397335939592763757242534129915362456370369381794876781527365640074695381315843810927200394729665283960373930566280914193406969798955462142448747998461967647076878739164506097299031556840321385018392828143097654049003741477775</span>*i + <span class="number">33267720985746675210299288173839504448704818085049573573782475394127405092079693799437115220623519093827817268067436033899592961243028616775476581238880321680412934083591896010475885530871761321530855678932407897123073884230850264069659060055805157529775052479253840099694804476053775909667</span> )</span><br><span class="line"></span><br><span class="line">R =(<span class="number">38436619031110865991923879368273825144591134194842250127138499745263028798151562949280051166055337764784928604655345143493484071370950291098970176327526604356876742861468639960728907306223619531997103795068973049143179040759482549370743939713683059322455935027250781363099017038267572070382</span>*i + <span class="number">41093937892203747071226497194460174684840688215389654564992940699770179304781361874671172244464825887258292329587141807444383894136057220808847808753364679351973663750364054669449905253193218352790909945369307367433850610807189354403253554148345197834701648188048050606356011567979827517009</span> , <span class="number">9875876467935369638084938067896432182208690144531378403534745071976760997736224070951195614692508013003420177331978612557059092387961951203758997069353790956443826183851256825228023334285334341067097662506368272794278783481229345549459566223386198635792121370861583720130236996379339906174</span>*i + <span class="number">19447561977724594192572514756713004769718033798185884029348217371868425699196934174482768588729693090959863175090532851846013603063398325098484647069673894219675495546444516464516218477904028091215303855695854982251862178713199631677332189311907166991170300285734973720209408448016404386279</span> )</span><br><span class="line"></span><br><span class="line">S =(<span class="number">71249861083363466146240185589742072416947001294427348758335822282789347285654895938446726327788096800499999553209177039582953195361659982428068926448233527913023420037219259936495112851482429822958147790870077230730091177257985429649031364838060427183913400513554819344862904827490880772682</span>*i + <span class="number">39578052854960012026255637126705373821483266678906490093269284444545750491201374187150247754423052586191953109246769525121762606083950469754696333553496751583744856481664734887761273029389862834902994256675947446700980363194864181267638836314434750455189422736876156451018780319594859427229</span> , <span class="number">39197547329694719539529974714972757635993347219971485992350815969532199306333306049850413360278269128003596216529445446572820778213349500212847637573581492691769295796335260726180320712869520367834322990402467146959135659931987007965917989228442334598796126593765472147605031327475567701086</span>*i + <span class="number">78070033755581537489222113608059840236619421090183039048402466605471070294742099301510439400541337232022512116279912957923221843363406417706677109027135474092494932420033158293877172615616465938036108381979097606754379539534265853790205211707045379351990977911885255397786139615991362742209</span> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P2, Q2, P3, Q3 = E_start(P), E_start(Q), E_start(R), E_start(S)</span><br><span class="line">check_torsion_points(E_start, a, b, P2, Q2, P3, Q3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate Bob&#x27;s key pair</span></span><br><span class="line">EB = EllipticCurve(Fp2, [<span class="number">0</span>,<span class="number">6</span>,<span class="number">0</span>,(<span class="number">59535702210902206632057724266122403485782121930269490904764357850731481931811358892291834226309250891450990328900036049280010419604141194291637296730727328703913164680567403783556426953678285004014585121686544887056773006148356101004676806983339649844157509652742849487058509475632164255987</span>*i+<span class="number">64852232435177399443640158784531454040944394241934383260903245435876484235545723851033335774817478661385417394748201477353536461419931926490835275348734525706542632524107755972171394421922803412948624633078480838779833967459391738992623265735881364492275499237263259819337503800949666114300</span>),(<span class="number">61050690806389187934769383126786350986004548885068804715147802394614409167263078704960954888018441383310078678346054616498251041749628728818830924510356529523120808407048389377565446266649410216170097464816755297151018034985942268859099759375206161519933062527753348065060632492394513384086</span>*i+<span class="number">8077074439258024172434168944099867368398890225954529153626574422394594541950204447361509876049948251527290252332533540126109187259353923004317852092303146292126930346834737856487032520566066787020590518347408517607586872466242304341998561230199735904938577495873392435708081679419091264767</span>)])</span><br><span class="line">EB.set_order((p+<span class="number">1</span>)**<span class="number">2</span>, num_checks=<span class="number">0</span>)</span><br><span class="line">PB =EB(<span class="number">416996386611953912381825671411217896862273056276393640633857992847371853210568257096183885552618362723081850781382485053310040111838223298831389037016745104797263137119258673015585863160793951306139520262051168484452018201607146541321879548245965120060708406056548188263109428770184470679</span>*i + <span class="number">20592158493675665198495392336832601510295492846540435551041621150757189812529173392073328659255009380759876334891966292009700608091292588069484836373960820208560629600373809653827704658519366030767296831927997226766001416180323174025471476178795433544546769173932191085724053540646639944729</span> , <span class="number">71934255319779473319456231037521357239577461842639834638995781561962276154205648471319881543016508220120521945006188958766711918515927736666300390531510013013219752222136876849357120821173182094753920757720079350217559660597480161836396311343966037676936442963053804573072914962152460674663</span>*i + <span class="number">79176415376881574459252426057416542844132750411766663750705407197328587941817178923562720329407116594864696212948749892818055154804078699130984677442760292980510087006005991843768472531019069389511942796903023273249068773581958501468457621161962887712050221461681839141585467402591793645894</span> )</span><br><span class="line">QB =EB(<span class="number">81399207896220104838523199229123942836223942998672721447617471088799933546789833887166127001116791183009155784956302068892276943497990222792723633019021458579696541635684638373573953057978849292600240170943085361633813448722609135351165092224283296296707819206674751128093132678767574518299</span>*i + <span class="number">59565272697509141787703630456883972192553675699784211987893422193583642170431575906952477269198392298815160807657217599332116732898901549042831683061911999197598082798698793498902676161570298508553574866686598052406458954435987817164049241700002339342165193999242704894297418052166335638731</span> , <span class="number">21930351134214703951291759959503306221382335091685056420498342039206078305903361133512863350368812584471061688170029056369164678056492881926814997907481142982389978084439411052754236340914978327950474951824251797939798502875399920157660381059113442352137267881283959649753286318015289023163</span>*i + <span class="number">32177434323242823799795301005877693615760991886819458542076959058162762244773500905362804118528323187241784967539643917408903962138638896033673432863920521413676017199387780524917678271106039934571641676244524711655457465408480508716026824510901729812960266245895067755449573368867399411326</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"><span class="comment"># =====  ATTACK  ====================</span></span><br><span class="line"><span class="comment"># ===================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RunAttack</span>(<span class="params">num_cores</span>):</span><br><span class="line">    <span class="keyword">return</span> CastryckDecruAttack(E_start, P2, Q2, EB, PB, QB, two_i, num_cores=num_cores)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;__file__&#x27;</span> <span class="keyword">in</span> <span class="built_in">globals</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;--parallel&#x27;</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">        <span class="comment"># Set number of cores for parallel computation</span></span><br><span class="line">        num_cores = os.cpu_count()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Performing the attack in parallel using <span class="subst">&#123;num_cores&#125;</span> cores&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num_cores = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;--sandwich&#x27;</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">        <span class="comment"># Use the fact that 2^a - 5*3^b is a sum of squares</span></span><br><span class="line">        <span class="keyword">assert</span> NIST_submission == <span class="string">&quot;SIKEp964&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> two_squares(<span class="number">2</span>^a - <span class="number">5</span>*<span class="number">3</span>^b)</span><br><span class="line">        recovered_key = SandwichAttack(E_start, P2, Q2, EB, PB, QB, two_i, k=<span class="number">5</span>, alp=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        recovered_key = RunAttack(num_cores)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Running the attack against SIKEp964 parameters, which has a prime: 2^486*3^301 - 1</span></span><br><span class="line"><span class="string">Generating public data for the attack...</span></span><br><span class="line"><span class="string">Performing the attack in parallel using 14 cores</span></span><br><span class="line"><span class="string">Computed image of 3-adic torsion in split factor C_B</span></span><br><span class="line"><span class="string">Bob&#x27;s secret key revealed as: 265224889924040230352809890018188742288829460808797625767564487574491813646343173069577492003667305149036083853277964262066159526193356944364624</span></span><br><span class="line"><span class="string">In ternary, this is: [2, 0, 1, 1, 2, 2, 1, 1, 2, 1, 1, 0, 2, 0, 1, 2, 1, 1, 2, 2, 2, 2, 0, 0, 0, 1, 2, 1, 2, 0, 2, 1, 1, 2, 2, 2, 2, 2, 0, 0, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 0, 2, 1, 0, 1, 2, 0, 1, 1, 1, 2, 0, 1, 0, 2, 1, 0, 0, 0, 2, 0, 1, 2, 1, 2, 0, 1, 2, 2, 2, 1, 1, 2, 0, 0, 2, 1, 1, 2, 0, 0, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 0, 2, 2, 1, 0, 0, 0, 2, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 0, 1, 0, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 1, 2, 0, 2, 1, 1, 1, 0, 2, 2, 0, 0, 0, 1, 2, 0, 1, 2, 2, 2, 1, 0, 1, 1, 0, 1, 2, 2, 1, 0, 0, 0, 0, 0, 2, 1, 0, 1, 2, 1, 1, 0, 1, 2, 2, 1, 0, 1, 0, 0, 0, 0, 2, 2, 1, 1, 2, 0, 2, 2, 2, 1, 1, 2, 0, 0, 1, 1, 1, 1, 0, 2, 1, 2, 1, 2, 2, 1, 1, 0, 1, 1, 2, 2, 2, 1, 1, 2, 2, 0, 2, 2, 1, 0, 1, 1, 1, 2, 1, 0, 2, 0, 2, 0, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 1, 1, 1, 1, 2, 1, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 1, 1, 1, 0, 2, 2, 0, 1, 2, 0, 1, 1, 2, 0, 1, 2, 2, 0, 1, 2, 2, 1]</span></span><br><span class="line"><span class="string">Altogether this took 11.799392223358154 seconds.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sk2 = 265224889924040230352809890018188742288829460808797625767564487574491813646343173069577492003667305149036083853277964262066159526193356944364624</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python sol3.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sk1 = <span class="number">3599349351989826939257244168875987905412334469321466246296914822246846713144</span></span><br><span class="line">sk2 = <span class="number">265224889924040230352809890018188742288829460808797625767564487574491813646343173069577492003667305149036083853277964262066159526193356944364624</span></span><br><span class="line">key = md5(long_to_bytes(sk1)).digest()</span><br><span class="line">iv = md5(<span class="built_in">str</span>(sk2).encode()).digest()</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_CFB, iv=iv)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&#x27;2ba4fd55c06bfcc9d253d3a60ec1eaaa82d482ff671d088b4f1354ebad2400d54a3bdd1dd1e38bf25a334f5fd3ec98ea89&#x27;</span></span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(enc)</span><br><span class="line">dec = cipher.decrypt(enc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;flag = <span class="subst">&#123;dec&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="week4-baby_rsa"><a class="markdownIt-Anchor" href="#week4-baby_rsa"></a> [Week4] baby_rsa</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://github.com/jvdsn/crypto-attacks</span></span><br><span class="line">n = <span class="number">149172698687247343307484774427463947040435385939538317995577802933708356659744781308849658149199463270402946054959026247011496643609722381036883462993606208405454448793748282856217226973570288117498818638210423816294135228225752144034736417495450129714250843040389723696691326017062575682989124677170212774709</span></span><br><span class="line">e = <span class="number">117932126002671581139669626170313849654365346787524775666511151162210096339679521576248537514813055641658722582914817481701142826861992970974206985137736311670025047752207632786439134855261541672012123572997654885689727972923659090161642085293034838535696206768459211817851404605357080649176502772728128885161</span></span><br><span class="line">c = <span class="number">5560665954852260703690321742771294743847646190564920056638605621636133720600072404637746086157764356927591996611862975162275415163691292729424412545560091018172812509230401361899309377868998693154480684535377865697939714965280441927137203589475324582174585416573174423912557361267766810988676863548944796515</span></span><br><span class="line">dm = <span class="number">0x2498aa4c85de5a33d5766f28d879f0df7175f43dd71cd4ab56ab67bf76334e6e3dcb</span></span><br><span class="line">dl = <span class="number">0x4c21c14305c34ed8f5e8879452c4ce569ce0789e6b39</span></span><br><span class="line">d_zj=???</span><br></pre></td></tr></table></figure><p>论文题 <a href="https://iacr.org/archive/eurocrypt2005/34940373/34940373.pdf">34940373.pdf</a></p><p>今年高校密码挑战赛也出了 <a href="https://tangcuxiaojikuai.xyz/post/4a67318c.html">2024-高校密码挑战赛赛题一-wp-crypto | 糖醋小鸡块的blog</a></p><blockquote><p>这里题目没给出d的位数，bitlen(d)猜测512位</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment">#coppersmith</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficients_monomials()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = <span class="number">149172698687247343307484774427463947040435385939538317995577802933708356659744781308849658149199463270402946054959026247011496643609722381036883462993606208405454448793748282856217226973570288117498818638210423816294135228225752144034736417495450129714250843040389723696691326017062575682989124677170212774709</span></span><br><span class="line">e = <span class="number">117932126002671581139669626170313849654365346787524775666511151162210096339679521576248537514813055641658722582914817481701142826861992970974206985137736311670025047752207632786439134855261541672012123572997654885689727972923659090161642085293034838535696206768459211817851404605357080649176502772728128885161</span></span><br><span class="line">c = <span class="number">5560665954852260703690321742771294743847646190564920056638605621636133720600072404637746086157764356927591996611862975162275415163691292729424412545560091018172812509230401361899309377868998693154480684535377865697939714965280441927137203589475324582174585416573174423912557361267766810988676863548944796515</span></span><br><span class="line">dm = <span class="number">0x2498aa4c85de5a33d5766f28d879f0df7175f43dd71cd4ab56ab67bf76334e6e3dcb</span></span><br><span class="line">dl = <span class="number">0x4c21c14305c34ed8f5e8879452c4ce569ce0789e6b39</span></span><br><span class="line"></span><br><span class="line">leakh = <span class="number">270</span></span><br><span class="line">leakl = <span class="number">175</span></span><br><span class="line">dbits = <span class="number">512</span></span><br><span class="line">dh = dm * <span class="number">2</span>^(dbits-leakh)</span><br><span class="line"></span><br><span class="line">k_ = e*dh // n</span><br><span class="line"></span><br><span class="line">PR.&lt;x,y&gt; = PolynomialRing(Zmod(e*<span class="number">2</span>^leakl))</span><br><span class="line">f = <span class="number">1</span> + (k_ + x) * ((n+<span class="number">1</span>) - y) - e*dl</span><br><span class="line"></span><br><span class="line">bounds = (<span class="number">2</span>^(dbits - leakh),<span class="number">2</span>^<span class="number">513</span>)</span><br><span class="line">res = small_roots(f,bounds,m=<span class="number">4</span>,d=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pplusq = res[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">pminusq = iroot(pplusq^<span class="number">2</span>-<span class="number">4</span>*n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p = (pplusq + pminusq) // <span class="number">2</span></span><br><span class="line">q = n // p</span><br><span class="line"></span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d =&quot;</span>,d)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q =&quot;</span>,q)</span><br><span class="line"><span class="keyword">assert</span> p*q == n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PatriotCTF 2024 Crypto Writeup</title>
      <link href="/post/11600/"/>
      <url>/post/11600/</url>
      
        <content type="html"><![CDATA[<h1 id="patriotctf-2024-crypto-writeup"><a class="markdownIt-Anchor" href="#patriotctf-2024-crypto-writeup"></a> PatriotCTF 2024 Crypto Writeup</h1><p>Author: <em>dawn1ight</em></p><p>About: PatriotCTF is a beginner-friendly capture-the-flag competition hosted by GMU’s cybersecurity club, MasonCC. All are welcome to participate, including students and security professionals. Challenges will range from beginner to expert, so there should be something for everyone. This is a jeopardy-style CTF, meaning there will be various challenges from the different categories described below.</p><p>Challenges：<a href="https://pctf.competitivecyber.club/challenges">https://pctf.competitivecyber.club/challenges</a></p><p>References:</p><ul><li><a href="https://blog.csdn.net/weixin_52640415/article/details/142500402">https://blog.csdn.net/weixin_52640415/article/details/142500402</a></li><li><a href="https://www.ctfiot.com/206569.html">https://www.ctfiot.com/206569.html</a></li><li><a href="https://s19ma.github.io/posts/PatriotCTF/">https://s19ma.github.io/posts/PatriotCTF/</a></li></ul><hr /><h2 id="bigger-is-better"><a class="markdownIt-Anchor" href="#bigger-is-better"></a> Bigger is Better</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">0xa0d9f425fe1246c25b8c3708b9f6d7747dd5b5e7f79719831c5cbe19fb7bab66ed62719b3fc6090120d2cfe1410583190cd650c32a4151550732b0fc97130e5f02aa26cb829600b6ab452b5b11373ec69d4eaae6c392d92da8bcbea85344af9d4699e36fdca075d33f58049fd0a9f6919f3003512a261a00985dc3d9843a822974df30b81732a91ce706c44bde5ff48491a45a5fa8d5d73bba5022af803ab7bd85250e71fc0254fcf078d21eaa5d38724014a85f679e8a7a1aad6ed22602465f90e6dd8ef95df287628832850af7e3628ad09ff90a6dbdf7a0e6d74f508d2a6235d4eae5a828ac95558bbdf72f39af5641dfe3edb0cdaab362805d926106e2af</span></span><br><span class="line">e = <span class="number">0x5af5dbe4af4005564908a094e0eabb0a921b7482483a753e2a4d560700cb2b2dc9399b608334e05140f54d90fcbef70cec097e3f75395d0c4799d9ec3e670aca41da0892a7b3d038acb7a518be1ced8d5224354ce39e465450c12be653639a8215afb1ba70b1f8f71fc1a0549853998e2337604fca7edac67dd1e7ddeb897308ebf26ade781710e6a2fe4c533a584566ea42068d0452c1b1ecef00a781b6d31fbab893de0c9e46fce69c71cefad3119e8ceebdab25726a96aaf02a7c4a6a38d2f75f413f89064fef14fbd5762599ca8eb3737122374c5e34a7422ea1b3d7c43a110d3209e1c5e23e4eece9e964da2c447c9e5e1c8a6038dc52d699f9324fd6b9</span></span><br><span class="line">c = <span class="number">0x731ceb0ac8f10c8ff82450b61b414c4f7265ccf9f73b8e238cc7265f83c635575a9381aa625044bde7b34ad7cce901fe7512c934b7f6729584d2a77c47e8422c8c0fe2d3dd12aceda8ef904ad5896b971f8b79048e3e2f99f600bf6bac6cad32f922899c00fdc2d21fcf3d0093216bfc5829f02c08ba5e534379cc9118c347763567251c0fe57c92efe0a96c8595bac2c759837211aac914ea3b62aae096ebb8cb384c481b086e660f0c6249c9574289fe91b683609154c066de7a94eafa749c9e92d83a9d473cc88accd9d4c5754ccdbc5aa77ba9a790bc512404a81fc566df42b652a55b9b8ffb189f734d1c007b6cbdb67e14399182016843e27e6d4e5fca</span></span><br></pre></td></tr></table></figure><p>大加密指数e，经典wiener攻击</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> RSAwienerHacker.RSAwienerHacker <span class="keyword">import</span> hack_RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">n = <span class="number">0xa0d9f425fe1246c25b8c3708b9f6d7747dd5b5e7f79719831c5cbe19fb7bab66ed62719b3fc6090120d2cfe1410583190cd650c32a4151550732b0fc97130e5f02aa26cb829600b6ab452b5b11373ec69d4eaae6c392d92da8bcbea85344af9d4699e36fdca075d33f58049fd0a9f6919f3003512a261a00985dc3d9843a822974df30b81732a91ce706c44bde5ff48491a45a5fa8d5d73bba5022af803ab7bd85250e71fc0254fcf078d21eaa5d38724014a85f679e8a7a1aad6ed22602465f90e6dd8ef95df287628832850af7e3628ad09ff90a6dbdf7a0e6d74f508d2a6235d4eae5a828ac95558bbdf72f39af5641dfe3edb0cdaab362805d926106e2af</span></span><br><span class="line">e = <span class="number">0x5af5dbe4af4005564908a094e0eabb0a921b7482483a753e2a4d560700cb2b2dc9399b608334e05140f54d90fcbef70cec097e3f75395d0c4799d9ec3e670aca41da0892a7b3d038acb7a518be1ced8d5224354ce39e465450c12be653639a8215afb1ba70b1f8f71fc1a0549853998e2337604fca7edac67dd1e7ddeb897308ebf26ade781710e6a2fe4c533a584566ea42068d0452c1b1ecef00a781b6d31fbab893de0c9e46fce69c71cefad3119e8ceebdab25726a96aaf02a7c4a6a38d2f75f413f89064fef14fbd5762599ca8eb3737122374c5e34a7422ea1b3d7c43a110d3209e1c5e23e4eece9e964da2c447c9e5e1c8a6038dc52d699f9324fd6b9</span></span><br><span class="line">c = <span class="number">0x731ceb0ac8f10c8ff82450b61b414c4f7265ccf9f73b8e238cc7265f83c635575a9381aa625044bde7b34ad7cce901fe7512c934b7f6729584d2a77c47e8422c8c0fe2d3dd12aceda8ef904ad5896b971f8b79048e3e2f99f600bf6bac6cad32f922899c00fdc2d21fcf3d0093216bfc5829f02c08ba5e534379cc9118c347763567251c0fe57c92efe0a96c8595bac2c759837211aac914ea3b62aae096ebb8cb384c481b086e660f0c6249c9574289fe91b683609154c066de7a94eafa749c9e92d83a9d473cc88accd9d4c5754ccdbc5aa77ba9a790bc512404a81fc566df42b652a55b9b8ffb189f734d1c007b6cbdb67e14399182016843e27e6d4e5fca</span></span><br><span class="line">d = hack_RSA(e,n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="idk-cipher"><a class="markdownIt-Anchor" href="#idk-cipher"></a> idk cipher</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">********************************************</span></span><br><span class="line"><span class="string">*                                          *</span></span><br><span class="line"><span class="string">*                                          *</span></span><br><span class="line"><span class="string">********************************************</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># WARNING: This is a secret key. Do not expose it.</span></span><br><span class="line">srt_key = <span class="string">&#x27;secretkey&#x27;</span> <span class="comment"># // <span class="doctag">TODO:</span> change the placeholder</span></span><br><span class="line">usr_input = <span class="built_in">input</span>(<span class="string">&quot;\t:&quot;</span>*<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(usr_input) &lt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;PT must be greater than 1&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(usr_input) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;PT can only be an even number&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> usr_input.isalnum():</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Only alphabets and numbers supported&quot;</span>)</span><br><span class="line"><span class="comment"># WARNING: Reversing input might expose sensitive information.</span></span><br><span class="line">rsv_input = usr_input[::-<span class="number">1</span>]</span><br><span class="line">output_arr = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(usr_input) / <span class="number">2</span>)):</span><br><span class="line">    c1 = <span class="built_in">ord</span>(usr_input[i])</span><br><span class="line">    c2 = <span class="built_in">ord</span>(rsv_input[i])</span><br><span class="line">    enc_p1 = <span class="built_in">chr</span>(c1 ^ <span class="built_in">ord</span>(srt_key[i % <span class="built_in">len</span>(srt_key)]))</span><br><span class="line">    enc_p2 = <span class="built_in">chr</span>(c2 ^ <span class="built_in">ord</span>(srt_key[i % <span class="built_in">len</span>(srt_key)]))</span><br><span class="line">    output_arr.append(enc_p1)</span><br><span class="line">    output_arr.append(enc_p2)</span><br><span class="line"><span class="comment"># WARNING: Encoded text should not be decoded without proper authorization.</span></span><br><span class="line">encoded_val = <span class="string">&#x27;&#x27;</span>.join(output_arr)</span><br><span class="line">b64_enc_val = base64.b64encode(encoded_val.encode())</span><br><span class="line">R = <span class="string">&quot;R&quot;</span>*<span class="number">20</span></span><br><span class="line">E = <span class="string">&quot;E&quot;</span>*<span class="number">5</span></span><br><span class="line">EXCLAMATION = <span class="string">&quot;!&quot;</span>*<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ULTRA SUPE<span class="subst">&#123;R&#125;</span> SECUR<span class="subst">&#123;E&#125;</span> Encoded Cipher Text<span class="subst">&#123;EXCLAMATION&#125;</span>:&quot;</span>, b64_enc_val.decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>字符串加密，对加密脚本逆向可得解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">srt_key = <span class="string">&#x27;secretkey&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设这是从上面的加密脚本中得到的Base64编码的字符串</span></span><br><span class="line">b64_enc_val = <span class="string">&quot;QRVWUFdWEUpdXEVGCF8DVEoYEEIBBlEAE0dQAURFD1I=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码Base64字符串</span></span><br><span class="line">encoded_val = base64.b64decode(b64_enc_val).decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密过程</span></span><br><span class="line">decoded_arr1 = []</span><br><span class="line">decoded_arr2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encoded_val), <span class="number">2</span>):</span><br><span class="line">    c1 = <span class="built_in">ord</span>(encoded_val[i])</span><br><span class="line">    c2 = <span class="built_in">ord</span>(encoded_val[i + <span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用相同的密钥对字符进行异或操作</span></span><br><span class="line">    dec_p1 = <span class="built_in">chr</span>(c1 ^ <span class="built_in">ord</span>(srt_key[i // <span class="number">2</span> % <span class="built_in">len</span>(srt_key)]))</span><br><span class="line">    dec_p2 = <span class="built_in">chr</span>(c2 ^ <span class="built_in">ord</span>(srt_key[i // <span class="number">2</span> % <span class="built_in">len</span>(srt_key)]))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加解密后的字符到数组中</span></span><br><span class="line">    decoded_arr1.append(dec_p1)</span><br><span class="line">    decoded_arr2.append(dec_p2)</span><br><span class="line"></span><br><span class="line">first_half = decoded_arr1</span><br><span class="line">second_half = decoded_arr2[::-<span class="number">1</span>]  <span class="comment"># 反转第二部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并两部分得到最终解密结果</span></span><br><span class="line">usr_input = <span class="string">&#x27;&#x27;</span>.join(first_half + second_half)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Input:&quot;</span>, usr_input)</span><br></pre></td></tr></table></figure><h2 id="high-roller"><a class="markdownIt-Anchor" href="#high-roller"></a> High Roller</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3.10</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">random.seed(<span class="built_in">int</span>(time.time()))</span><br><span class="line">p, q = getPrime(<span class="number">512</span>, random.randbytes), getPrime(<span class="number">512</span>, random.randbytes)</span><br><span class="line">n = p*q</span><br><span class="line">e = getPrime(<span class="number">512</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> GCD(e, phi) == <span class="number">1</span></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line"></span><br><span class="line">key = RSA.construct((n, e, d, p, q))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;public_key.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(key.publickey().export_key(<span class="string">&quot;PEM&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;private_key.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(key.export_key(<span class="string">&quot;PEM&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIHdMA0GCSqGSIb3DQEBAQUAA4HLADCBxwKBgQCMdauT2revYJrutp7eqQfrMkse</span><br><span class="line">TqfgRdLlMddaVRxiG04qJneVtpzkeLQTZqniJWx5YsUwMDeISeQjmVkr2a+Ob9S8</span><br><span class="line">+xsqVQ0XTW3xPjwKaZhW8jXAlX13ClhAxk1FvPbl6ASsPGUMX6gRSXArRYFx3Kev</span><br><span class="line">C9xng/ZKEhsC5FzBBwJBALKsZCm9FGHXvyJChFDt7vDZUCyU1jbOgS9EhNz+HrrU</span><br><span class="line">K9OCgOoZGfcjIHAcrM+w4AdF48NQELqttmKlcko6ock=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>openssl读取公钥</p><p><code>openssl rsa -pubin -in public.pem</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">9357885447383373532894895505085381556066479232870333782284357317530689434635519527644215046975239651802146048650000941858355721661518511867620441456288201</span></span><br><span class="line">n = <span class="number">98634120039089098694716541094010585689286433311349526663366541706397717606400616707193452046001090589663396231287196347120718771479123852243352063594083947086372781079441835003204477521976780690108126553882967223715412003897334440698277808850595475155858935951484345749354296015842014107721137899755292901639</span></span><br></pre></td></tr></table></figure><p>提取出了n,e，但分解不出来</p><p>注意到<code>random.seed(int(time.time()))</code></p><blockquote><p>The seed was used is <code>int(time.time())</code> and converted into .pem file so we can use command to find time</p><p>给了公钥和p,q的生成方法，是用时间作种子，求利用random来求的。根据题目文件的时间向前可以爆破出来。</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stat -c &#x27;%n %y&#x27; public_key.pem</span><br></pre></td></tr></table></figure><p>看这里复习一下stat命令 <a href="https://blog.csdn.net/u012294618/article/details/72630092">https://blog.csdn.net/u012294618/article/details/72630092</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">pubkey = RSA.import_key(<span class="built_in">open</span>(<span class="string">&quot;public_key.pem&quot;</span>, <span class="string">&quot;r&quot;</span>).read())</span><br><span class="line">c = bytes_to_long(<span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>).read())</span><br><span class="line">time_i = <span class="built_in">int</span>(time.mktime((<span class="number">2024</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time_i, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    random.seed(i)</span><br><span class="line">    p, q = getPrime(<span class="number">512</span>, random.randbytes), getPrime(<span class="number">512</span>, random.randbytes)</span><br><span class="line">    <span class="keyword">if</span> p*q == pubkey.n:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">pow</span>(pubkey.e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, pubkey.n)))</span><br></pre></td></tr></table></figure><h2 id="textbook-schnorr-right"><a class="markdownIt-Anchor" href="#textbook-schnorr-right"></a> Textbook Schnorr right??</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EllipticCurveCrypto</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Elliptic Curve Cryptography using the secp256k1 curve.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = [&lt;REDACTED&gt;]</span><br><span class="line">        self.q = [&lt;REDACTED&gt;]</span><br><span class="line">        self.K = GF(self.p)</span><br><span class="line">        self.a = self.K([&lt;REDACTED&gt;])</span><br><span class="line">        self.b = self.K([&lt;REDACTED&gt;])</span><br><span class="line">        self.curve = EllipticCurve(self.K, [self.a, self.b])</span><br><span class="line">        self.generator = self.curve(</span><br><span class="line">            [&lt;REDACTED&gt;],</span><br><span class="line">            [&lt;REDACTED&gt;],</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># Generate private and public keys</span></span><br><span class="line">        self.private_key = secrets.randbelow(self.q)</span><br><span class="line">        self.public_key = self.private_key * self.generator</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Public Key: <span class="subst">&#123;self.public_key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bytes_to_int</span>(<span class="params">b</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(b, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">int_to_bytes</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">return</span> i.to_bytes((i.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_hash</span>(<span class="params">self, target</span>):</span><br><span class="line">        hash_int = <span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(target).encode()).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> hash_int % self.q</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, message</span>):</span><br><span class="line">        r = secrets.randbelow(self.q)</span><br><span class="line">        R = r * self.generator</span><br><span class="line">        R_int = <span class="built_in">int</span>(R.xy()[<span class="number">0</span>] + R.xy()[<span class="number">1</span>])</span><br><span class="line">        h = self.compute_hash(R_int | message)</span><br><span class="line">        s = (r + self.private_key * h) % self.q</span><br><span class="line">        <span class="keyword">return</span> s, R</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, message, signature</span>):</span><br><span class="line">        s, R = signature</span><br><span class="line">        R_int = <span class="built_in">int</span>(R.xy()[<span class="number">0</span>] + R.xy()[<span class="number">1</span>])</span><br><span class="line">        h = self.compute_hash(R_int | message)</span><br><span class="line">        left_side = s * self.generator</span><br><span class="line">        right_side = R + h * self.public_key</span><br><span class="line">        <span class="keyword">return</span> left_side == right_side</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeoutInput</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TimeoutError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Custom exception for input timeout.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutInput.TimeoutError(<span class="string">&quot;Input timed out!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_input</span>(<span class="params">prompt, timeout=<span class="number">10</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get user input with a timeout.</span></span><br><span class="line"><span class="string">        :param prompt: The prompt to display to the user.</span></span><br><span class="line"><span class="string">        :param timeout: The time limit for input in seconds.</span></span><br><span class="line"><span class="string">        :return: The user&#x27;s input as a string.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Set the signal for a timeout</span></span><br><span class="line">        signal.signal(signal.SIGALRM, TimeoutInput.timeout_handler)</span><br><span class="line">        signal.alarm(timeout)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user_input = <span class="built_in">input</span>(prompt)</span><br><span class="line">            signal.alarm(<span class="number">0</span>)  <span class="comment"># Cancel the timer</span></span><br><span class="line">            <span class="keyword">return</span> user_input</span><br><span class="line">        <span class="keyword">except</span> TimeoutInput.TimeoutError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No input received within the time limit.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_flag</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Read and display the flag from the &#x27;flag.txt&#x27; file.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            flag = f.read().strip()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Congratulations! Your flag is: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Flag file not found.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_message</span>(<span class="params">separator, words, signature, ecc_instance</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Verify the provided signature for the message constructed from words and separator.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    message_bytes = separator.join(word.encode() <span class="keyword">for</span> word <span class="keyword">in</span> words) + separator</span><br><span class="line">    message_int = <span class="built_in">int</span>.from_bytes(message_bytes, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> ecc_instance.verify(message_int, signature):</span><br><span class="line">        display_flag()</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Verification failed.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># Initialize the elliptic curve cryptography instance</span></span><br><span class="line">    ecc = EllipticCurveCrypto()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Test the signing and verification process</span></span><br><span class="line">    test_message = ecc.bytes_to_int(<span class="string">&quot;test&quot;</span>.encode())</span><br><span class="line">    s_test, R_test = ecc.sign(test_message)</span><br><span class="line">    <span class="keyword">assert</span> ecc.verify(test_message, (s_test, R_test))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Regular expression patterns for input validation</span></span><br><span class="line">    separator_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^[0-9a-fA-F]&#123;2&#125;$&#x27;</span>)</span><br><span class="line">    word_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^[0-9a-fA-F]&#123;6&#125;$&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get separator input</span></span><br><span class="line">    separator_hex = TimeoutInput.get_input(<span class="string">&quot;Enter separator as a hex value (2 digits): &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> separator_pattern.<span class="keyword">match</span>(separator_hex):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid separator format.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    separator = <span class="built_in">bytes</span>.fromhex(separator_hex)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get words input</span></span><br><span class="line">    words_hex = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        prompt = <span class="string">f&quot;Enter 3-letter word <span class="subst">&#123;i + <span class="number">1</span>&#125;</span> as a hex value (6 digits): &quot;</span></span><br><span class="line">        word_hex = TimeoutInput.get_input(prompt)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> word_pattern.<span class="keyword">match</span>(word_hex):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Invalid word format.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        words_hex.append(word_hex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        words = [<span class="built_in">bytes</span>.fromhex(word_hex).decode(<span class="string">&#x27;ascii&#x27;</span>) <span class="keyword">for</span> word_hex <span class="keyword">in</span> words_hex]</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid ASCII encoding in words.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(<span class="built_in">len</span>(word) != <span class="number">3</span> <span class="keyword">for</span> word <span class="keyword">in</span> words):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Words must be 3-letter ASCII words.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get signature components</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        hex_x_R = <span class="built_in">input</span>(<span class="string">&quot;Enter the x-coordinate of signature R (in hex): &quot;</span>)</span><br><span class="line">        x_R = <span class="built_in">int</span>(hex_x_R, <span class="number">16</span>)</span><br><span class="line">        hex_y_R = <span class="built_in">input</span>(<span class="string">&quot;Enter the y-coordinate of signature R (in hex): &quot;</span>)</span><br><span class="line">        y_R = <span class="built_in">int</span>(hex_y_R, <span class="number">16</span>)</span><br><span class="line">        hex_signature_s = <span class="built_in">input</span>(<span class="string">&quot;Enter signature s (in hex): &quot;</span>)</span><br><span class="line">        signature_s = <span class="built_in">int</span>(hex_signature_s, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid input for signature components.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt; signature_s &lt; ecc.q):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Illegal value of s.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct the point R</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        R = ecc.curve(x_R, y_R)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Point R does not lie on the curve.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Verify the message and signature</span></span><br><span class="line">    verify_message(separator, words, (signature_s, R), ecc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>这个题用了schnorr-digital-signature数字签名算法</p><p>它是将经典的<a href="https://www.geeksforgeeks.org/schnorr-digital-signature/">schnorr数字签名算法</a>移到secp256k1椭圆曲线上</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 经典Schnorr签名算法</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个大素数 p 和它的大素因子 q</span></span><br><span class="line">p = <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000001</span>  <span class="comment"># 一个大素数</span></span><br><span class="line">q = <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span>  <span class="comment"># 大素因子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个原根 g</span></span><br><span class="line">g = <span class="number">2</span>  <span class="comment"># 通常选择 2 作为原根</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成签名者的私钥 a 和公钥 A</span></span><br><span class="line">a = random.randint(<span class="number">1</span>, q - <span class="number">1</span>)  <span class="comment"># 私钥 a</span></span><br><span class="line">A = <span class="built_in">pow</span>(g, a, p)  <span class="comment"># 公钥 A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 哈希函数 H</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_message</span>(<span class="params">message, x</span>):</span><br><span class="line">    combined = <span class="string">f&quot;<span class="subst">&#123;message&#125;</span><span class="subst">&#123;x&#125;</span>&quot;</span>.encode()</span><br><span class="line">    h = hashlib.sha256(combined).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(h, <span class="number">16</span>) % q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 签名函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, a, g, p, q</span>):</span><br><span class="line">    r = random.randint(<span class="number">1</span>, q - <span class="number">1</span>)  <span class="comment"># 随机数 r</span></span><br><span class="line">    X = <span class="built_in">pow</span>(g, r, p)  <span class="comment"># 计算 X</span></span><br><span class="line">    e = hash_message(message, X)  <span class="comment"># 计算 e</span></span><br><span class="line">    s = (r + a * e) % q  <span class="comment"># 计算 s</span></span><br><span class="line">    <span class="keyword">return</span> (e, s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">message, signature, A, g, p, q</span>):</span><br><span class="line">    e, s = signature</span><br><span class="line">    X_prime = (<span class="built_in">pow</span>(A, e, p) * <span class="built_in">pow</span>(g, s, p)) % p  <span class="comment"># 计算 X&#x27;</span></span><br><span class="line">    e_prime = hash_message(message, X_prime)  <span class="comment"># 计算 e&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> e_prime == e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例消息</span></span><br><span class="line">message = <span class="string">&quot;Hello, Schnorr!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成签名</span></span><br><span class="line">signature = sign(message, a, g, p, q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证签名</span></span><br><span class="line">is_valid = verify(message, signature, A, g, p, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Signature is <span class="subst">&#123;<span class="string">&#x27;valid&#x27;</span> <span class="keyword">if</span> is_valid <span class="keyword">else</span> <span class="string">&#x27;invalid&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 椭圆曲线上的Schnorr签名</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 secp256k1 椭圆曲线参数</span></span><br><span class="line">p = <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F</span></span><br><span class="line">q = <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span></span><br><span class="line">curve = EllipticCurve(GF(p), [<span class="number">0</span>, <span class="number">7</span>])</span><br><span class="line">G = curve(<span class="number">0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798</span>, <span class="number">0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">private_key = Integer(get_random_bytes(<span class="number">32</span>).<span class="built_in">hex</span>(), base=<span class="number">16</span>) % q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算公钥</span></span><br><span class="line">public_key = private_key * G</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_message</span>(<span class="params">message, x</span>):</span><br><span class="line">    combined = <span class="string">f&quot;<span class="subst">&#123;message&#125;</span><span class="subst">&#123;x&#125;</span>&quot;</span>.encode()</span><br><span class="line">    h = SHA256.new(combined).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(h, <span class="number">16</span>) % q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, private_key, G, q</span>):</span><br><span class="line">    <span class="comment"># 选择随机数 r</span></span><br><span class="line">    r = Integer(get_random_bytes(<span class="number">32</span>).<span class="built_in">hex</span>(), base=<span class="number">16</span>) % q</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算点 R</span></span><br><span class="line">    R = r * G</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算挑战值 e</span></span><br><span class="line">    e = hash_message(message, R.xy()[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算签名分量 s</span></span><br><span class="line">    s = (r + e * private_key) % q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (R.xy()[<span class="number">0</span>], s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">message, signature, public_key, G, q</span>):</span><br><span class="line">    x_R, s = signature</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算挑战值 e</span></span><br><span class="line">    e = hash_message(message, x_R)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算验证点 U</span></span><br><span class="line">    U = s * G - e * public_key</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查验证点的 x 坐标是否等于签名中的 x_R</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(U.xy()[<span class="number">0</span>]) == x_R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例消息</span></span><br><span class="line">message = <span class="string">&quot;Hello, Schnorr!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成签名</span></span><br><span class="line">signature = sign(message, private_key, G, q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证签名</span></span><br><span class="line">is_valid = verify(message, signature, public_key, G, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Signature is <span class="subst">&#123;<span class="string">&#x27;valid&#x27;</span> <span class="keyword">if</span> is_valid <span class="keyword">else</span> <span class="string">&#x27;invalid&#x27;</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以看出题目给出的Schnorr签名算法问题出在<code>compute_hash</code>函数上</p><p>正常的算法中<code>e = H(M||X)</code> where H() is the hash function</p><p>而题目给出的是<code>e = H(M|X)</code></p><p>所以当输入为全1时得到的hash为固定值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">separator = <span class="string">&quot;FF&quot;</span></span><br><span class="line">payload = <span class="string">&quot;7F7F7F&quot;</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;Enter separator as a hex value (2 digits): &quot;</span>, separator.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 1 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 2 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 3 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 4 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 5 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 6 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 7 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 8 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line"></span><br><span class="line">TARGET = <span class="number">0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span></span><br><span class="line">MESSAGE_OR_MASK = <span class="built_in">int</span>(<span class="string">&quot;7F7F7FFF&quot;</span> * <span class="number">8</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_hash</span>(<span class="params">target</span>):</span><br><span class="line">    hash_int = <span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(target).encode()).hexdigest(), <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> hash_int % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_sig</span>(<span class="params">s, R_test</span>):</span><br><span class="line">    R_test_str = <span class="built_in">str</span>(R_test).strip(<span class="string">&quot;()&quot;</span>)</span><br><span class="line">    R_test_parts = [part.strip() <span class="keyword">for</span> part <span class="keyword">in</span> R_test_str.split(<span class="string">&quot;:&quot;</span>)]</span><br><span class="line">    xR = R_test_parts[<span class="number">0</span>]</span><br><span class="line">    yR = R_test_parts[<span class="number">1</span>]</span><br><span class="line">    sendxR = <span class="built_in">hex</span>(xR)[<span class="number">2</span>:]</span><br><span class="line">    sendyR = <span class="built_in">hex</span>(yR)[<span class="number">2</span>:]</span><br><span class="line">    send_s = <span class="built_in">hex</span>(s)[<span class="number">2</span>:]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;sendxR = &#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;sendyR = &#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;send_s = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Enter the x-coordinate of signature R (in hex):&quot;</span>, sendxR)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Enter the y-coordinate of signature R (in hex):&quot;</span>, sendyR)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;EEnter signature s (in hex): &quot;</span>, send_s)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruforce_signature</span>(<span class="params">P, G</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Brute-forcing to find a valid signature...&quot;</span>)</span><br><span class="line">    h = compute_hash(TARGET)</span><br><span class="line">    hP = h*P</span><br><span class="line">    s = secrets.randbelow(n)</span><br><span class="line">    sG = s*G</span><br><span class="line">    <span class="keyword">with</span> tqdm(total=<span class="number">0</span>, unit=<span class="string">&#x27; iterations&#x27;</span>, unit_scale=<span class="literal">True</span>) <span class="keyword">as</span> pbar:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            R_test = sG - hP</span><br><span class="line">            R_test_binary = <span class="built_in">int</span>(R_test.xy()[<span class="number">0</span>] + R_test.xy()[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> (R_test_binary | MESSAGE_OR_MASK) == TARGET:</span><br><span class="line">                <span class="keyword">assert</span> s*G - h*P == R_test</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;found&quot;</span>)</span><br><span class="line">                verify_sig(s, R_test)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            s = (s*<span class="number">2</span>) %n</span><br><span class="line">            sG = <span class="number">2</span>*sG</span><br><span class="line">            pbar.update(<span class="built_in">int</span>(<span class="number">1</span>))</span><br><span class="line">bruforce_signature(P, G)</span><br></pre></td></tr></table></figure><h2 id="hard-to-implement"><a class="markdownIt-Anchor" href="#hard-to-implement"></a> Hard to Implement</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> external <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socketserver, signal</span><br><span class="line"> </span><br><span class="line">listen = <span class="number">1337</span></span><br><span class="line">attempts = <span class="number">1500</span></span><br><span class="line">flag = getflag()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key,plaintext</span>):</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">pt = pad(plaintext + flag.encode(), <span class="number">16</span>)</span><br><span class="line"><span class="keyword">return</span> cipher.encrypt(pt).<span class="built_in">hex</span>()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serve</span>(<span class="params">req</span>):</span><br><span class="line">key = get_random_bytes(<span class="number">16</span>)</span><br><span class="line">tries = <span class="number">0</span></span><br><span class="line">req.sendall(<span class="string">b&quot;Thank you for using our secure communications channel.\nThis channel uses top-shelf military-grade encryption.\nIf you are not the intended recepient, you can&#x27;t read our secret.&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> tries &lt; attempts:</span><br><span class="line">req.sendall(<span class="string">b&#x27;\n(&#x27;</span>+<span class="built_in">str</span>.encode(<span class="built_in">str</span>(tries))+<span class="string">b&#x27;/&#x27;</span>+<span class="built_in">str</span>.encode(<span class="built_in">str</span>(attempts))+<span class="string">b&#x27;) &#x27;</span>)</span><br><span class="line">req.sendall(<span class="string">b&#x27;Send challenge &gt; &#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">ct = encrypt(key, req.recv(<span class="number">4096</span>).strip(<span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line">req.sendall(<span class="string">b&quot;Response &gt; &quot;</span> + ct.encode() + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">req.sendall(<span class="string">b&quot;An error occured!\n&quot;</span>)</span><br><span class="line">tries += <span class="number">1</span></span><br><span class="line">req.sendall(<span class="string">b&#x27;\nMax attempts exceeded, have a good day.\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">incoming</span>(socketserver.BaseRequestHandler):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">signal.alarm(<span class="number">1500</span>)</span><br><span class="line">req = self.request</span><br><span class="line">serve(req)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">socketserver.TCPServer.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">server = ReusableTCPServer((<span class="string">&quot;0.0.0.0&quot;</span>, listen), incoming)</span><br><span class="line">server.serve_forever()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>AES ECB的padding oracle:  <a href="https://lazzzaro.github.io/2020/11/07/crypto-%E5%9D%97%E5%AF%86%E7%A0%81/#%E6%A8%A1%E5%BC%8F%E6%94%BB%E5%87%BB-1">块密码 | Lazzaro (lazzzaro.github.io)</a></p><blockquote><p>1.由于是ECB的模式，所以当我们输入十五个’0’后，服务会将十五个<code>’0’+flag</code>加密，而此时第一组就是十五个’0’和flag的第一个字符。即，返回的明文的第一组是<code>’0’*15 + flag[0]</code>的密文。</p><p>2.我们遍历0-255，发送<code>’0’*15+chr(i)</code>，看返回的密文是不是和最初获得的密文的第一组一致，如果一致，那么此时的chr(i)就是flag的第一位。</p><p>3.有了第一位我们就可以发送<code>’0’*14+flag[0]</code>过去，此时返回的第一组密文就是<code>’0’*14+flag[0]+flag[1]</code>的密文了，我们继续用第2步的方法就可以恢复flag[1]了。</p><p>4.如此循环往复，逐位爆破flag。</p></blockquote><p>exp: [<a href="https://blog.csdn.net/weixin_52640415/article/details/142500402">Patriot CTF 2024]-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oracle</span>(<span class="params">data</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Send challenge &gt; &#x27;</span>, data)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;Response &gt; &quot;</span>)</span><br><span class="line">    s=r.recvline().strip().decode()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(s)</span><br><span class="line"> </span><br><span class="line">r=remote(<span class="string">&#x27;chal.competitivecyber.club&#x27;</span>, <span class="number">6001</span>)</span><br><span class="line">flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    padding=<span class="string">b&#x27;A&#x27;</span>*(<span class="number">32</span>-<span class="number">1</span>-i)</span><br><span class="line">    test=oracle(padding) <span class="comment">#尾部漏出flag  1个字符</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">        <span class="keyword">if</span> oracle(padding+flag+c.encode())[:<span class="number">32</span>]==test[:<span class="number">32</span>]: <span class="comment">#pad+已知的flag+猜</span></span><br><span class="line">            flag=flag+c.encode()</span><br><span class="line">            <span class="built_in">print</span>(flag, i)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF 2024 Crypto WriteUp</title>
      <link href="/post/30110/"/>
      <url>/post/30110/</url>
      
        <content type="html"><![CDATA[<h1 id="sctf-2024-crypto-writeup"><a class="markdownIt-Anchor" href="#sctf-2024-crypto-writeup"></a> SCTF 2024 Crypto WriteUp</h1><p>Author: <em>dawn1ight</em></p><p>这次题目质量都可以，每一个题都能学到新东西。</p><p>References:</p><ul><li><a href="https://blog.wm-team.cn/index.php/archives/82/">SCTF 2024 By W&amp;M - W&amp;M Team (wm-team.cn)</a></li><li><a href="https://xz.aliyun.com/t/15764">SCTF2024-Crypto - 先知社区</a></li></ul><hr /><h2 id="signin"><a class="markdownIt-Anchor" href="#signin"></a> Signin</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nbits</span>):</span><br><span class="line">        self.nbits = nbits</span><br><span class="line">        self.p, self.q = self.getPrimes()</span><br><span class="line">        self.n = self.p*self.q</span><br><span class="line">        self.Gift = self.Gift()</span><br><span class="line">        self.priv, self.pub = self.keyGen()</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPrimes</span>(<span class="params">self</span>):</span><br><span class="line">        nbits = self.nbits</span><br><span class="line">        p = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        q = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">while</span> p == q:</span><br><span class="line">            q = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> p,q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Gift</span>(<span class="params">self</span>):</span><br><span class="line">        p,q = self.p, self.q</span><br><span class="line">        <span class="keyword">return</span> (p^<span class="number">2</span> + p + <span class="number">1</span>)*(q^<span class="number">2</span> + q + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyGen</span>(<span class="params">self</span>):</span><br><span class="line">        nbits = self.nbits</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            d = randint(<span class="number">2</span>^(nbits//<span class="number">4</span>),<span class="number">2</span>^(nbits//<span class="number">2</span>))</span><br><span class="line">            <span class="keyword">if</span> gcd(d,self.Gift) != <span class="number">1</span>:</span><br><span class="line">                d = randint(<span class="number">2</span>^(nbits//<span class="number">4</span>),<span class="number">2</span>^(nbits//<span class="number">2</span>))</span><br><span class="line">            e = <span class="built_in">pow</span>(d,-<span class="number">1</span>,self.phi)</span><br><span class="line">            <span class="keyword">return</span> (self.p,self.q,self.n,e,d),(self.n,e)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">RRR = RSA(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">bp = long_to_bytes(<span class="built_in">int</span>(RRR.p))</span><br><span class="line">FLAG = <span class="string">&#x27;SCTF&#123;&#x27;</span>+md5(bp).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N = <span class="subst">&#123;RRR.n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;RRR.pub[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">N = 32261421478213846055712670966502489204755328170115455046538351164751104619671102517649635534043658087736634695616391757439732095084483689790126957681118278054587893972547230081514687941476504846573346232349396528794022902849402462140720882761797608629678538971832857107919821058604542569600500431547986211951</span></span><br><span class="line"><span class="string">e = 334450817132213889699916301332076676907807495738301743367532551341259554597455532787632746522806063413194057583998858669641413549469205803510032623432057274574904024415310727712701532706683404590321555542304471243731711502894688623443411522742837178384157350652336133957839779184278283984964616921311020965540513988059163842300284809747927188585982778365798558959611785248767075169464495691092816641600277394649073668575637386621433598176627864284154484501969887686377152288296838258930293614942020655916701799531971307171423974651394156780269830631029915305188230547099840604668445612429756706738202411074392821840</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开始算了很久，发现题中的<code>e = pow(d,-1,self.phi)</code>中的<code>self.phi</code>并没有在<code>__init__(self, nbits)</code>中说明</p><p>结合题目提示：Oops! Ψ is not good for encrypt, but good for gift.</p><p>这个<code>self.phi = self.Gift</code>（实际上<code>gcd(d,self.Gift) != 1</code>也是提示这个）</p><p>然后就是推导</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: gather* at position 7: \begin{̲g̲a̲t̲h̲e̲r̲*̲}̲e \times d \eq…'>\begin{gather*}e \times d \equiv 1 \mod phi \\e \times d = 1 + k \times phi \\e \times d = 1 + k \times (p^2+p+1) \times (q^2+q+1) \\e \times d = 1+k\times((n^2)+n\times(p+q)+n+p^2+q^2+p+q+1) \\let\;s = p + q \\1+1+k\times(n^2+n\times s+s^2-n+s+1) = 0 \mod e\end{gather*}</p><p>上面模方程中有两个未知量<code>k</code>和<code>s</code></p><p>根据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>×</mo><mi>d</mi><mo>=</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo>×</mo><mo stretchy="false">(</mo><msup><mi>p</mi><mn>2</mn></msup><mo>+</mo><mi>p</mi><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><msup><mi>q</mi><mn>2</mn></msup><mo>+</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e \times d = 1 + k \times (p^2+p) \times (q^2+q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span> ，其中e.bit_length=4*nbits，nbits//4&lt;d.bit_length&lt;nbits//2，所以k.bit_length&lt;nbits//2，</p><p>用二元coppersmith解</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">d = f.degree()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(f, Polynomial):</span><br><span class="line">x, = polygens(f.base_ring(), f.variable_name(), <span class="number">1</span>)</span><br><span class="line">f = f(x)</span><br><span class="line"></span><br><span class="line">R = f.base_ring()</span><br><span class="line">N = R.cardinality()</span><br><span class="line"></span><br><span class="line">f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">base = N^(m-i) * f^i</span><br><span class="line"><span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">G.append(g)</span><br><span class="line"></span><br><span class="line">B, monomials = G.coefficient_matrix()</span><br><span class="line">monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">B = B.change_ring(QQ)</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line"></span><br><span class="line">H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B*monomials):</span><br><span class="line">H.append(h)</span><br><span class="line">I = H.ideal()</span><br><span class="line"><span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">H.pop()</span><br><span class="line"><span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">roots = []</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">roots.append(root)</span><br><span class="line"><span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = <span class="number">32261421478213846055712670966502489204755328170115455046538351164751104619671102517649635534043658087736634695616391757439732095084483689790126957681118278054587893972547230081514687941476504846573346232349396528794022902849402462140720882761797608629678538971832857107919821058604542569600500431547986211951</span></span><br><span class="line">e = <span class="number">334450817132213889699916301332076676907807495738301743367532551341259554597455532787632746522806063413194057583998858669641413549469205803510032623432057274574904024415310727712701532706683404590321555542304471243731711502894688623443411522742837178384157350652336133957839779184278283984964616921311020965540513988059163842300284809747927188585982778365798558959611785248767075169464495691092816641600277394649073668575637386621433598176627864284154484501969887686377152288296838258930293614942020655916701799531971307171423974651394156780269830631029915305188230547099840604668445612429756706738202411074392821840</span></span><br><span class="line"></span><br><span class="line">R.&lt;s,k&gt; = PolynomialRing(Zmod(e))</span><br><span class="line">f = <span class="number">1</span>+k*(n^<span class="number">2</span>+n*s+s^<span class="number">2</span>-n+s+<span class="number">1</span>)</span><br><span class="line">bounds=(<span class="number">2</span>^<span class="number">513</span>,<span class="number">2</span>^<span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(small_roots(f , bounds , m=<span class="number">3</span> , d=<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(root)</span><br></pre></td></tr></table></figure><h2 id="不完全阻塞干扰"><a class="markdownIt-Anchor" href="#不完全阻塞干扰"></a> 不完全阻塞干扰</h2><p>一个intelligence.pkl文件，从文件中读取序列化的对象并还原为原来的Python对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个文件用于读取</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;intelligence.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 使用pickle.load()从文件中读取序列化的对象并还原为原来的Python对象</span></span><br><span class="line">    loaded_data = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印加载的数据</span></span><br><span class="line"><span class="built_in">print</span>(loaded_data)</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The ship crashed into the sun, causing a massive magnetic storm</span></span><br><span class="line"><span class="comment">#part of script</span></span><br><span class="line">msg = bytes_to_long(FLAG)</span><br><span class="line">n = p^<span class="number">5</span>*q^<span class="number">2</span></span><br><span class="line">phi = p^<span class="number">4</span>*(p-<span class="number">1</span>)*q*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(d,phi)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="comment"># c = 145554802564989933772666853449758467748433820771006616874558211691441588216921262672588167631397770260815821197485462873358280668164496459053150659240485200305314288108259163251006446515109018138298662011636423264380170119025895000021651886702521266669653335874489612060473962259596489445807308673497717101487224092493721535129391781431853820808463529747944795809850314965769365750993208968116864575686200409653590102945619744853690854644813177444995458528447525184291487005845375945194236352007426925987404637468097524735905540030962884807790630389799495153548300450435815577962308635103143187386444035094151992129110267595908492217520416633466787688326809639286703608138336958958449724993250735997663382433125872982238289419769011271925043792124263306262445811864346081207309546599603914842331643196984128658943528999381048833301951569809038023921101787071345517702911344900151843968213911899353962451480195808768038035044446206153179737023140055693141790385662942050774439391111437140968754546526191031278186881116757268998843581015398070043778631790328583529667194481319953424389090869226474999123124532354330671462280959215310810005231660418399403337476289138527331553267291013945347058144254374287422377547369897793812634181778309679601143245890494670013019155942690562552431527149178906855998534415120428884098317318129659099377634006938812654262148522236268027388683027513663867042278407716812565374141362015467076472409873946275500942547114202939578755575249750674734066843408758067001891408572444119999801055605577737379889503505649865554353749621313679734666376467890526136184241450593948838055612677564667946098308716892133196862716086041690426537245252116765796203427832657608512488619438752378624483485364908432609100523022628791451171084583484294929190998796485805496852608557456380717623462846198636093701726099310737244471075079541022111303662778829695340275795782631315412134758717966727565043332335558077486037869874106819581519353856396937832498623662166446395755447101393825864584024239951058366713573567250863658531585064635727070458886746791722270803893438211751165831616861912569513431821959562450032831904268205845224077709362068478</span></span><br></pre></td></tr></table></figure><p>另有一个损毁的私钥文件cert.pem</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIIFQKCA4AGfwqk6XSmOh/+jVwj5dPEMWU65BzHRvMF9iqfGT8iSGy37xsnVjSB</span><br><span class="line">j0bQdSpROeGZGCcfoNfSe8Zg0rckFNCOpSyIN/lJx7rswwKboxcn7zvxINmSbALX</span><br><span class="line">QS8YfpjcVt0HuYfSzBka1WFkoUTyiy9woV0QVYik8n+7KJH8UnvWiQpfeVtcSEdq</span><br><span class="line">a/nftnt+Hrx7Gwhs0otYxolVv99E7M4R/6zfZUVRsVm3gyBAzCjujr6kj4Zy1T49</span><br><span class="line">6I/Pu1+ydrUDiA3TTVmTM13fjMuWwbTXn1AtchBHZa2cKxhYoXrz1b5E+jy/S47r</span><br><span class="line">lCqjlCo4cdLGWscCiRI/wun5sly/y9eEEJYGD6UEw6B7WRSTxkyI0LtFKFqFtffV</span><br><span class="line">nbmPqgDCzT+7Y9pZkgXxyrDfUs97QxoO5KfjVpZUbOnQPvWV7O6S0hQskul9J0ST</span><br><span class="line">lwNFW0xw3sJ8Mh7GuDwCliLoOp4NVdCyWNldTmEpGGXdp23GGfzpV3mQQpxud+nU</span><br><span class="line">B4HjsvRJcBuD6LDGxm6zgPlkc+XUIu/uiysOiLcWsAp5ydUUyjrZ0t7lJmCf+VQX</span><br><span class="line">MqQZjRG52/uy5Vwk2A6lItB4bjNV8jYGpdOKct5O78i2v8SCJIooYstp2ODj0xZZ</span><br><span class="line">fanYCCi+hQVPrxX8NpyqyvuBXGlzwXGUBoPVahoZZ7Cbf/o/vlsuCGmXWdhNcWA/</span><br><span class="line">UWRHaWuycyKmnzn2yiU+ANyVVdX5cygHDEZ/NmPMSJqtEw8oxC81v4jFcZIKuSrL</span><br><span class="line">j3XQPjWnUQPFvZbwYclr0Cr24dGRsN0WS8chN3AD7b9dPvZaXpBGOFNWtSFiO+<span class="number">43</span></span><br><span class="line">8WSFCgp6+w7U5+i9mv4SmPfVMrya2UGBLTMq7OddHMyx/2n9QrMfJIrledng1qFL</span><br><span class="line">BUbnhLqUDjK9AcOV34/0WEBARitUefoHM21QPcMy5w/AbZRjKX/AQrYj1W+H76pS</span><br><span class="line">WptYDjFNkNEhGJPtQHomUI3qoKE8nujJArnhw6Av6aUUUsAu573MhcDv9jiR4kcD</span><br><span class="line">vSZdnJ2/RW4q+UCVOLzg/sx+urICZqqrBsdmw+ps2py5ul4dAkt9w9c+dvajMxl7</span><br><span class="line">rYfE+zTVZaABSqxygl5Brc/q2tyHrO9ArYS3xVaRq61WG+BVDqCpiEcMQnQyrLj+</span><br><span class="line">srnS0lmPsgibuRu9nLGZ6JLTYWTYvz7NVFdqlxNAR6EtqEIHSFu05QIDAQABAoID</span><br><span class="line">gAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGBAIBj0KIYduXOHiEB</span><br><span class="line">wgAVUpBm7Zl2iC0QAqKe/g8v38wnQ/yaS1tlHMlxCGmeyi+x89kxdbrjQ+fJLkpB</span><br><span class="line">xy0F5XAZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGBAOTw/kn5rhSSwJegqYj6cYdmJf5PzgWw</span><br><span class="line">IE8f30PsZLTaxpnSjhZu/fx1YtGeWMNJPZEANlzyhAtGwPbujZZIBxcP8sE8TrgB</span><br><span class="line">LsqzeGKjkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAA</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件以损坏，无法用openssl读取，写代码将base64转为16进制hex</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cert.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">key_64 = <span class="string">&#x27;&#x27;</span>.join(data.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">key_num = libnum.s2n(base64.b64decode(key_64))</span><br><span class="line">key_hex = <span class="built_in">hex</span>(key_num)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(key_hex)</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">3082081502820380067f0aa4e974a63a1ffe8d5c23e5d3c431653ae41cc746f305f62a9f193f22486cb7ef1b275634818f46d0752a5139e19918271fa0d7d27bc660d2b72414d08ea52c8837f949c7baecc3029ba31727ef3bf120d9926c02d7412f187e98dc56dd07b987d2cc191ad56164a144f28b2f70a15d105588a4f27fbb2891fc527bd6890a5f795b5c48476a6bf9dfb67b7e1ebc7b1b086cd28b58c68955bfdf44ecce11ffacdf654551b159b7832040cc28ee8ebea48f8672d53e3de88fcfbb5fb276b503880dd34d5993335ddf8ccb96c1b4d79f502d72104765ad9c2b1858a17af3d5be44fa3cbf4b8eeb942aa3942a3871d2c65ac70289123fc2e9f9b25cbfcbd7841096060fa504c3a07b591493c64c88d0bb45285a85b5f7d59db98faa00c2cd3fbb63da599205f1cab0df52cf7b431a0ee4a7e35696546ce9d03ef595ecee92d2142c92e97d2744939703455b4c70dec27c321ec6b83c029622e83a9e0d55d0b258d95d4e61291865dda76dc619fce9577990429c6e77e9d40781e3b2f449701b83e8b0c6c66eb380f96473e5d422efee8b2b0e88b716b00a79c9d514ca3ad9d2dee526609ff9541732a4198d11b9dbfbb2e55c24d80ea522d0786e3355f23606a5d38a72de4eefc8b6bfc482248a2862cb69d8e0e3d316597da9d80828be85054faf15fc369caacafb815c6973c171940683d56a1a1967b09b7ffa3fbe5b2e08699759d84d71603f516447696bb27322a69f39f6ca253e00dc9555d5f97328070c467f3663cc489aad130f28c42f35bf88c571920ab92acb8f75d03e35a75103c5bd96f061c96bd02af6e1d191b0dd164bc721377003edbf5d3ef65a5e9046385356b521623bee37f164850a0a7afb0ed4e7e8bd9afe1298f7d532bc9ad941812d332aece75d1cccb1ff69fd42b31f248ae579d9e0d6a14b0546e784ba940e32bd01c395df8ff4584040462b5479fa07336d503dc332e70fc06d9463297fc042b623d56f87efaa525a9b580e314d90d1211893ed407a26508deaa0a13c9ee8c902b9e1c3a02fe9a51452c02ee7bdcc85c0eff63891e24703bd265d9c9dbf456e2af9409538bce0fecc7ebab20266aaab06c766c3ea6cda9cb9ba5e1d024b7dc3d73e76f6a333197bad87c4fb34d565a0014aac72825e41adcfeadadc87acef40ad84b7c55691abad561be0550ea0a988470c427432acb8feb2b9d2d2598fb2089bb91bbd9cb199e892d36164d8bf3ecd54576a97134047a12da84207485bb4ed0a21876e5ce1e2101c20015529066ed9976882d1002a29efe0f2fdfcc2743fc9a4b5b651cc97108699eca2fb1f3d93175bae343e7c92e4a41c72d05e5701940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002818100e4f0fe49f9ae1492c097a0a988fa71876625fe4fce05b0204f1fdf43ec64b4dac699d28e166efdfc7562d19e58c3493d9100365cf2840b46c0f6ee8d964807170ff2c13c4eb8012ecab37862a3900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure><p>找资料学习了一下RSA私钥文件格式</p><ul><li><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#RSA%E7%A7%81%E9%92%A5">RSA | Lazzaro (lazzzaro.github.io)</a></li><li><a href="https://www.cnblogs.com/jukan/p/5527922.html">OPENSSL中RSA私钥文件（PEM格式）解析【一】 - mydddfly - 博客园 (cnblogs.com)</a></li></ul><p>私钥中各参数顺序<code>n,e,d,p,q,dp,dq,iq</code>，后面几个参数非必须写入私钥中</p><p>私钥文件首先是标签头<code>30820815</code>，其中<code>82</code>表示后面的两个字节<code>0815</code>为文件长度（这里注意是字节长度，换算成bit位要再×8），即私钥长<code>0x0815bytes</code></p><p>后面<code>02820380</code>中<code>02</code>是分隔符，<code>82</code>表示后面两个字节<code>0380</code>为参数<code>n</code>的长度，即<code>n.length=0x0380bytes</code>，得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0x067f0aa4e974a63a1ffe8d5c23e5d3c431653ae41cc746f305f62a9f193f22486cb7ef1b275634818f46d0752a5139e19918271fa0d7d27bc660d2b72414d08ea52c8837f949c7baecc3029ba31727ef3bf120d9926c02d7412f187e98dc56dd07b987d2cc191ad56164a144f28b2f70a15d105588a4f27fbb2891fc527bd6890a5f795b5c48476a6bf9dfb67b7e1ebc7b1b086cd28b58c68955bfdf44ecce11ffacdf654551b159b7832040cc28ee8ebea48f8672d53e3de88fcfbb5fb276b503880dd34d5993335ddf8ccb96c1b4d79f502d72104765ad9c2b1858a17af3d5be44fa3cbf4b8eeb942aa3942a3871d2c65ac70289123fc2e9f9b25cbfcbd7841096060fa504c3a07b591493c64c88d0bb45285a85b5f7d59db98faa00c2cd3fbb63da599205f1cab0df52cf7b431a0ee4a7e35696546ce9d03ef595ecee92d2142c92e97d2744939703455b4c70dec27c321ec6b83c029622e83a9e0d55d0b258d95d4e61291865dda76dc619fce9577990429c6e77e9d40781e3b2f449701b83e8b0c6c66eb380f96473e5d422efee8b2b0e88b716b00a79c9d514ca3ad9d2dee526609ff9541732a4198d11b9dbfbb2e55c24d80ea522d0786e3355f23606a5d38a72de4eefc8b6bfc482248a2862cb69d8e0e3d316597da9d80828be85054faf15fc369caacafb815c6973c171940683d56a1a1967b09b7ffa3fbe5b2e08699759d84d71603f516447696bb27322a69f39f6ca253e00dc9555d5f97328070c467f3663cc489aad130f28c42f35bf88c571920ab92acb8f75d03e35a75103c5bd96f061c96bd02af6e1d191b0dd164bc721377003edbf5d3ef65a5e9046385356b521623bee37f164850a0a7afb0ed4e7e8bd9afe1298f7d532bc9ad941812d332aece75d1cccb1ff69fd42b31f248ae579d9e0d6a14b0546e784ba940e32bd01c395df8ff4584040462b5479fa07336d503dc332e70fc06d9463297fc042b623d56f87efaa525a9b580e314d90d1211893ed407a26508deaa0a13c9ee8c902b9e1c3a02fe9a51452c02ee7bdcc85c0eff63891e24703bd265d9c9dbf456e2af9409538bce0fecc7ebab20266aaab06c766c3ea6cda9cb9ba5e1d024b7dc3d73e76f6a333197bad87c4fb34d565a0014aac72825e41adcfeadadc87acef40ad84b7c55691abad561be0550ea0a988470c427432acb8feb2b9d2d2598fb2089bb91bbd9cb199e892d36164d8bf3ecd54576a97134047a12da84207485bb4e5</span></span><br></pre></td></tr></table></figure><p>后面<code>0203</code>含义：<code>02</code>是分隔符，<code>03</code>表示后面3个字节为加密指数<code>e</code>，即<code>e=0x10001(65537)</code></p><p>接下来<code>02820380</code>：<code>02</code>是分隔符，<code>82</code>表示后面两个字节<code>0380</code>为参数<code>d</code>的长度，即<code>d.length=0x0380bytes</code>，显然<code>d</code>被损坏了</p><p>接下来<code>028181</code>：<code>02</code>是分隔符，<code>81</code>表示后面1个字节<code>81</code>为参数<code>p</code>的长度，即<code>p.length=0x81bytes</code>，题目只给出了<code>p</code>的高位</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p_high = <span class="number">0x008063d0a21876e5ce1e2101c20015529066ed9976882d1002a29efe0f2fdfcc2743fc9a4b5b651cc97108699eca2fb1f3d93175bae343e7c92e4a41c72d05e57019400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure><p>同理：q的高位</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q_high = <span class="number">0x00e4f0fe49f9ae1492c097a0a988fa71876625fe4fce05b0204f1fdf43ec64b4dac699d28e166efdfc7562d19e58c3493d9100365cf2840b46c0f6ee8d964807170ff2c13c4eb8012ecab37862a3900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure><p>p_high中已知的部分有524bit，满足p的高位攻击</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0x067f0aa4e974a63a1ffe8d5c23e5d3c431653ae41cc746f305f62a9f193f22486cb7ef1b275634818f46d0752a5139e19918271fa0d7d27bc660d2b72414d08ea52c8837f949c7baecc3029ba31727ef3bf120d9926c02d7412f187e98dc56dd07b987d2cc191ad56164a144f28b2f70a15d105588a4f27fbb2891fc527bd6890a5f795b5c48476a6bf9dfb67b7e1ebc7b1b086cd28b58c68955bfdf44ecce11ffacdf654551b159b7832040cc28ee8ebea48f8672d53e3de88fcfbb5fb276b503880dd34d5993335ddf8ccb96c1b4d79f502d72104765ad9c2b1858a17af3d5be44fa3cbf4b8eeb942aa3942a3871d2c65ac70289123fc2e9f9b25cbfcbd7841096060fa504c3a07b591493c64c88d0bb45285a85b5f7d59db98faa00c2cd3fbb63da599205f1cab0df52cf7b431a0ee4a7e35696546ce9d03ef595ecee92d2142c92e97d2744939703455b4c70dec27c321ec6b83c029622e83a9e0d55d0b258d95d4e61291865dda76dc619fce9577990429c6e77e9d40781e3b2f449701b83e8b0c6c66eb380f96473e5d422efee8b2b0e88b716b00a79c9d514ca3ad9d2dee526609ff9541732a4198d11b9dbfbb2e55c24d80ea522d0786e3355f23606a5d38a72de4eefc8b6bfc482248a2862cb69d8e0e3d316597da9d80828be85054faf15fc369caacafb815c6973c171940683d56a1a1967b09b7ffa3fbe5b2e08699759d84d71603f516447696bb27322a69f39f6ca253e00dc9555d5f97328070c467f3663cc489aad130f28c42f35bf88c571920ab92acb8f75d03e35a75103c5bd96f061c96bd02af6e1d191b0dd164bc721377003edbf5d3ef65a5e9046385356b521623bee37f164850a0a7afb0ed4e7e8bd9afe1298f7d532bc9ad941812d332aece75d1cccb1ff69fd42b31f248ae579d9e0d6a14b0546e784ba940e32bd01c395df8ff4584040462b5479fa07336d503dc332e70fc06d9463297fc042b623d56f87efaa525a9b580e314d90d1211893ed407a26508deaa0a13c9ee8c902b9e1c3a02fe9a51452c02ee7bdcc85c0eff63891e24703bd265d9c9dbf456e2af9409538bce0fecc7ebab20266aaab06c766c3ea6cda9cb9ba5e1d024b7dc3d73e76f6a333197bad87c4fb34d565a0014aac72825e41adcfeadadc87acef40ad84b7c55691abad561be0550ea0a988470c427432acb8feb2b9d2d2598fb2089bb91bbd9cb199e892d36164d8bf3ecd54576a97134047a12da84207485bb4e5</span></span><br><span class="line">c = <span class="numberspan></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p0 = <span class="number">0x008063d0a21876e5ce1e2101c20015529066ed9976882d1002a29efe0f2fdfcc2743fc9a4b5b651cc97108699eca2fb1f3d93175bae343e7c92e4a41c72d05e570194</span></span><br><span class="line">q0 = <span class="number">0x00e4f0fe49f9ae1492c097a0a988fa71876625fe4fce05b0204f1fdf43ec64b4dac699d28e166efdfc7562d19e58c3493d9100365cf2840b46c0f6ee8d964807170ff2c13c4eb8012ecab37862a39</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = ((p0&gt;&gt;<span class="number">2</span>)*<span class="number">2</span>^<span class="number">502</span>+x)^<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(f.small_roots(X = <span class="number">2</span>^(<span class="number">502</span>), beta = <span class="number">0.45</span>, epsilon = <span class="number">0.03</span>))</span><br></pre></td></tr></table></figure><p>得到p，后面就可以正常解RSA了</p><p>这里要说明一下，对于上面为什么p要位移2bit，这就是我在比赛的时候踩的坑（在这里卡了一晚上……还是树哥有经验）</p><p>因为<code>p</code>的已知部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0x008063d0a21876e5ce1e2101c20015529066ed9976882d1002a29efe0f2fdfcc2743fc9a4b5b651cc97108699eca2fb1f3d93175bae343e7c92e4a41c72d05e570194</span></span><br></pre></td></tr></table></figure><p>转为二进制后</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0bspan></span><br></pre></td></tr></table></figure><p>最后的两位是0，不一定是已知的真实值，可能是损坏的值，所以要把这两个bit去掉再进行高位攻击</p><p>验证：最后得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">90158455407064353226740172256637847571736267390156796413259819366666851822735984542845914678308585714535762114331991779976105574125437982741541925319918477642851700979718859437613437250733519320418663913659250175079815430032463049804595241254755873838742300889891959766753209758679639806589383714664811420277</span></span><br><span class="line"><span class="built_in">bin</span>(p) = <span class="number">0bspan></span><br></pre></td></tr></table></figure><p>可以发现：那两位bit是<code>10</code>而不是<code>00</code>，说明<code>p_high</code>最后这两个bit位确实不是真实值</p><p>吸取这次教训，以后高位攻击是先转成二进制看看最后面的bit位，如果是<code>0</code>，要添加位移</p><h2 id="whisper"><a class="markdownIt-Anchor" href="#whisper"></a> Whisper</h2><p>hint: Two public key certificates were monitored. And Mr. Dual intercepted a ciphertext. Just when he was in the rough, a Careless Whisper told that the length of a key parameter is carelessly set to 345 bits.</p><p>给了两个公钥文件和一个加密文件</p><p>用openssl读取一下，得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N1 = <span class="number">19216005446310864558409934096148904703198882317083224129431545386380435777354723744624028053518278514595663319253560114239018542660582960464010994454707936550902872627309424890333127288994449006783158078916602020794628546065674981593736606481809198149080696037584037699638293870122512237711498004090515845499</span></span><br><span class="line">N2 = <span class="number">4992911943798277344804876549224813326447469267517432903838084455752417287982320183584988170455130118418117937196562948710115292838538880218156469801938645463822391931977946975012481667095710882823897026534267366981015926659114785262116088548568215969555191689632109516970297562458267207338397574333407150103</span></span><br><span class="line">e = <span class="number">5352708372343813403035593638037107517373724079700735571091908193413083617555211472255125798199165859811237950085789893649651552088125747433480591652396404710788778815075048587264350078253899425987466937040099316084273123603046629945048298154353920118466252136326911019666012632927688983695457057246503276867</span></span><br><span class="line">c = <span class="number">15215414324218119514166856548319827087347975479953435757551380183481824597666586239577164581282639891207362199632694698810120856780147289618566227285967212830337320315326701453355443595245474646348352728630245065334265985318506260363891869088324717641979951184093710784542525865784982264295576662469010725462</span></span><br></pre></td></tr></table></figure><blockquote><p>Dual RSA是一种由Sun等人在2007年提出的RSA变体，其主要特点是两个实例共享相同的公钥和私钥指数，但具有不同的模数。这种设计的主要优势在于减少了存储需求，因为只需要存储一套公钥和私钥即可处理两个不同的RSA实例。</p></blockquote><p><a href="https://hasegawaazusa.github.io/dual-rsa-note.html">Dual RSA——双生RSA，对偶RSA | 独奏の小屋 (hasegawaazusa.github.io)</a></p><p>这个知识点在 61dctf 和 0ctf-2017-final 出现过</p><p>看了关于低解密指数Dual RSA的exp都来自 [Authentication&amp;Secrecy (Crypto 1000pts) - MDWiki (<a href="http://elliptic-shiho.github.io">elliptic-shiho.github.io</a>)](<a href="https://elliptic-shiho.github.io/ctf-writeups/#!ctf/2017/0CTF">https://elliptic-shiho.github.io/ctf-writeups/#!ctf/2017/0CTF</a> Finals/cr1000-AuthenticationSecrecy/README.md)</p><p>代码来自：<a href="https://blog.wm-team.cn/index.php/archives/82/#Whisper">SCTF 2024 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = <span class="string">f&#x27;<span class="subst">&#123;ii:02d&#125;</span> &#x27;</span></span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27; &#x27;</span> <span class="keyword">if</span> BB[ii, jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dual_rsa_liqiang_et_al</span>(<span class="params">e, n1, n2, delta, mm, tt</span>):</span><br><span class="line">    N = (n1 + n2) // <span class="number">2</span></span><br><span class="line">    A = ZZ(math.floor(N**<span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line">    _XX = ZZ(math.floor(N**delta))</span><br><span class="line">    _YY = ZZ(math.floor(N**<span class="number">0.5</span>))</span><br><span class="line">    _ZZ = ZZ(math.floor(N**(delta - <span class="number">1.</span>/<span class="number">4</span>)))</span><br><span class="line">    _UU = _XX * _YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    M = Matrix(ZZ, [[A, e], [<span class="number">0</span>, n1]])</span><br><span class="line">    B = M.LLL()</span><br><span class="line">    l11, l12 = B[<span class="number">0</span>]</span><br><span class="line">    l21, l22 = B[<span class="number">1</span>]</span><br><span class="line">    l_11 = ZZ(l11 // A)</span><br><span class="line">    l_21 = ZZ(l21 // A)</span><br><span class="line"></span><br><span class="line">    modulo = e * l_21</span><br><span class="line">    F = Zmod(modulo)</span><br><span class="line"></span><br><span class="line">    PR = PolynomialRing(F, <span class="string">&#x27;u, x, y, z&#x27;</span>)</span><br><span class="line">    u, x, y, z = PR.gens()</span><br><span class="line"></span><br><span class="line">    PK = PolynomialRing(ZZ, <span class="string">&#x27;uk, xk, yk, zk&#x27;</span>)</span><br><span class="line">    uk, xk, yk, zk = PK.gens()</span><br><span class="line"></span><br><span class="line">    PQ = PK.quo(xk * yk + <span class="number">1</span> - uk)</span><br><span class="line">    f = PK(x * (n2 + y) - e * l_11 * z + <span class="number">1</span>)</span><br><span class="line">    fbar = PQ(f).lift()</span><br><span class="line"></span><br><span class="line">    gijk = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mm - k + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(mm - k - i + <span class="number">1</span>):</span><br><span class="line">                gijk[i, j, k] = PQ(xk**i * zk**j * PK(fbar)**k * modulo**(mm - k)).lift()</span><br><span class="line"></span><br><span class="line">    hjkl = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(math.floor(mm / tt) * j, mm + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(k + <span class="number">1</span>):</span><br><span class="line">                hjkl[j, k, l] = PQ(yk**j * zk**(k - l) * PK(fbar)**l * modulo**(mm - l)).lift()</span><br><span class="line"></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> gijk.keys():</span><br><span class="line">        monomials += gijk[k].monomials()</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> hjkl.keys():</span><br><span class="line">        monomials += hjkl[k].monomials()</span><br><span class="line"></span><br><span class="line">    monomials = <span class="built_in">sorted</span>(<span class="built_in">set</span>(monomials), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(monomials) == <span class="built_in">len</span>(gijk) + <span class="built_in">len</span>(hjkl)</span><br><span class="line">    dim = <span class="built_in">len</span>(monomials)</span><br><span class="line"></span><br><span class="line">    M = Matrix(ZZ, dim)</span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> gijk.keys():</span><br><span class="line">        <span class="keyword">for</span> i, monomial <span class="keyword">in</span> <span class="built_in">enumerate</span>(monomials):</span><br><span class="line">            M[row, i] = gijk[k].monomial_coefficient(monomial) * monomial.subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> hjkl.keys():</span><br><span class="line">        <span class="keyword">for</span> i, monomial <span class="keyword">in</span> <span class="built_in">enumerate</span>(monomials):</span><br><span class="line">            M[row, i] = hjkl[k].monomial_coefficient(monomial) * monomial.subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    matrix_overview(M)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span> * <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    B = M.LLL()</span><br><span class="line"></span><br><span class="line">    matrix_overview(B)</span><br><span class="line"></span><br><span class="line">    H = &#123;i: <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim)&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">            H[i] += PK((monomials[j] * B[i, j]) / monomials[j].subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ))</span><br><span class="line">    H = <span class="built_in">list</span>(H.values())</span><br><span class="line"></span><br><span class="line">    PQ = PolynomialRing(QQ, <span class="string">&#x27;uq, xq, yq, zq&#x27;</span>)</span><br><span class="line">    uq, xq, yq, zq = PQ.gens()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">        H[i] = PQ(H[i].subs(uk=xk * yk + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    I = Ideal(*H[<span class="number">1</span>:<span class="number">20</span>])</span><br><span class="line">    g = I.groebner_basis(<span class="string">&#x27;giac&#x27;</span>)[::-<span class="number">1</span>]</span><br><span class="line">    mon = [t.monomials() <span class="keyword">for</span> t <span class="keyword">in</span> g]</span><br><span class="line"></span><br><span class="line">    PX = PolynomialRing(ZZ, <span class="string">&#x27;xs&#x27;</span>)</span><br><span class="line">    xs = PX.gen()</span><br><span class="line"></span><br><span class="line">    x_pol = y_pol = z_pol = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(g)):</span><br><span class="line">        <span class="keyword">if</span> mon[i] == [xq, <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(g[i] / g[i].lc())</span><br><span class="line">            x_pol = g[i] / g[i].lc()</span><br><span class="line">        <span class="keyword">elif</span> mon[i] == [yq, <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(g[i] / g[i].lc())</span><br><span class="line">            y_pol = g[i] / g[i].lc()</span><br><span class="line">        <span class="keyword">elif</span> mon[i] == [zq, <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(g[i] / g[i].lc())</span><br><span class="line">            z_pol = g[i] / g[i].lc()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> x_pol <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> y_pol <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> z_pol <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Failed: we cannot get a solution...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    x0 = x_pol.subs(xq=xs).roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    y0 = y_pol.subs(yq=xs).roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    z0 = z_pol.subs(zq=xs).roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> f(x0 * y0 + <span class="number">1</span>, x0, y0, z0) % modulo == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    a0 = z0</span><br><span class="line">    a1 = (x0 * (n2 + y0) + <span class="number">1</span> - e * l_11 * z0) // (e * l_21)</span><br><span class="line"></span><br><span class="line">    d = a0 * l_11 + a1 * l_21</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    delta = <span class="number">0.334</span></span><br><span class="line">    mm = <span class="number">4</span></span><br><span class="line">    tt = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    n1 = <span class="number">0x1b5d4fe0aa6782e275d4ce12a6d57562efbbe7db6f5277255b891729bfa2a18d3edb49843d7989a37b9516be2df8ca939058e65f64b5fb2071bea4f5f8d1392895b32bf0377d99f4f79979125e5db01cdb5080a1c2d665c9ac31b5823025499c9513277bae5e7a846cd271c4396e2ba219020e58a9055cb18a28d36a00bf717b</span></span><br><span class="line">    e = <span class="number">0x079f5ccc665767b4a257e5c1ff56e9803df2e5650302daad420105fe672447743bd3f0bea1c46a4987932e9a886ca87a7afd7796abf1e5629c4986fe4f22e89cdce7abb06624465146a2e2b6ca9ab3196ceab7467974c1dc45608a200411b291fdaf99f7d80dce4db3566f4a9e2e574c6224cd07d80638d28f7820bcf4b49143</span></span><br><span class="line">    n2 = <span class="number">0x071c324e8769493187c15f72d5cc695729b48488ee3fbd01db00d5c478f08c7cf32093ba61745051d3e9d169523aa91438181f47679aff5edd22950f74a1eb1443320aaa5d97f5c1e81b5ef9a3e69ba669abc4c6c4b405f5088a603a74f9bcef88823b4523574114c810600838728196f8e5e0d4aeeeeab79dd8683a72f3c017</span></span><br><span class="line"></span><br><span class="line">    d = dual_rsa_liqiang_et_al(e, n1, n2, delta, mm, tt)</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><h2 id="lineararts"><a class="markdownIt-Anchor" href="#lineararts"></a> LinearARTs</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choices</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.groups.perm_gps.permgroup_named <span class="keyword">import</span> SymmetricGroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Young</span>(<span class="params">FLAG</span>):</span><br><span class="line">    f = <span class="built_in">int</span>.from_bytes(FLAG, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    q = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">while</span> f:</span><br><span class="line">        s.append(f % q)</span><br><span class="line">        f //= q</span><br><span class="line">    s = vector(GF(q), s)</span><br><span class="line"></span><br><span class="line">    n, m = <span class="built_in">len</span>(s), <span class="built_in">len</span>(s) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    A = Matrix(GF(q), m, n, <span class="keyword">lambda</span> i, j: randint(<span class="number">0</span>, q - <span class="number">1</span>))</span><br><span class="line">    e = vector(choices(<span class="built_in">range</span>(<span class="number">2</span>^<span class="number">8</span>), k=m), GF(q))*Matrix(ZZ,PermutationGroupElement(SymmetricGroup(m).random_element()).matrix())</span><br><span class="line">    b = (A*s) + e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> A,b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Old</span>(<span class="params">m, nbits</span>):</span><br><span class="line">    Sn = SymmetricGroup(m)</span><br><span class="line">    p = [getPrime(<span class="number">360</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">    N = <span class="built_in">sorted</span>([getRandomNBitInteger(nbits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">    S = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        r = [N[_] % p[i] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        r = vector(ZZ,r)</span><br><span class="line"></span><br><span class="line">        Per = Sn.random_element()</span><br><span class="line">        P = PermutationGroupElement(Per)</span><br><span class="line">        Pm = Matrix(ZZ,P.matrix())</span><br><span class="line">        r *= Pm</span><br><span class="line">        S.append(r)</span><br><span class="line">    S = matrix(ZZ,S)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Old.matrix&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(&#123;<span class="string">&quot;S&quot;</span>: <span class="built_in">str</span>(<span class="built_in">list</span>(S)),<span class="string">&quot;p&quot;</span>: <span class="built_in">str</span>(p)&#125;, f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> N</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params">nn</span>):</span><br><span class="line">    <span class="comment"># The challenge lasted nn rounds</span></span><br><span class="line">    <span class="comment"># Young_level * virtue &gt;= Old_level , where virtue = nn + 1</span></span><br><span class="line"></span><br><span class="line">    h = []</span><br><span class="line">    HP = []</span><br><span class="line">    MP = []</span><br><span class="line">    Old_level = <span class="number">625</span>*<span class="number">2</span>*<span class="number">2</span></span><br><span class="line">    Young_level = <span class="number">25</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    M = getPrime(Old_level)</span><br><span class="line">    XP = getRandomRange(<span class="number">1</span>,M)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        a = getRandomRange(<span class="number">1</span>,M)</span><br><span class="line">        b = a*XP % M</span><br><span class="line">        HP.append(a)</span><br><span class="line">        MP.append(b)</span><br><span class="line">        delta_level = Old_level - Young_level</span><br><span class="line">        h.append(b &gt;&gt; delta_level &lt;&lt; delta_level)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> XP,M,HP,MP,h</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">mm = <span class="number">16</span></span><br><span class="line">nn = <span class="number">9</span></span><br><span class="line">nbits = <span class="number">3840</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A,b = Young(FLAG)</span><br><span class="line">N = Old(mm, nbits)</span><br><span class="line"></span><br><span class="line">XP,M,HP,MP,h = chall(nn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MP is useful ,I can use him to cast five lightning spells</span></span><br><span class="line">D = diagonal_matrix(GF(<span class="number">0x10001</span>),N+MP)</span><br><span class="line">Sn = SymmetricGroup(<span class="number">5</span>*<span class="number">5</span>)</span><br><span class="line">Per = Sn.random_element()</span><br><span class="line"></span><br><span class="line">P = PermutationGroupElement(Per)</span><br><span class="line">PM = Matrix(GF(<span class="number">0x10001</span>),P.matrix())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AA = A*D*PM</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D.matrix&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(&#123;<span class="string">&quot;D&quot;</span>: <span class="built_in">str</span>(<span class="built_in">list</span>(D))&#125;, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># OK! Find your martial arts, and then you can get the flag.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(&#123;<span class="string">&quot;AA&quot;</span>: <span class="built_in">str</span>(<span class="built_in">list</span>(AA)), <span class="string">&quot;b&quot;</span>: <span class="built_in">str</span>(b)&#125;, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;My SymmetricGroup is <span class="subst">&#123;Sn&#125;</span>, and my element is <span class="subst">&#123;Per&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;M = <span class="subst">&#123;M&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h = <span class="subst">&#123;h&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;HP = <span class="subst">&#123;HP&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">My SymmetricGroup is Symmetric group of order 25! as a permutation group, and my element is (1,23,2,13,3,16,15,6,22,18,14,4,25,11,20,24,21,9,5,17,7,19,10,12,8)</span></span><br><span class="line"><span class="string">M = 309169501373330124045649100152326414225457160505584328527283516968464416389302355829097052128714780092162406614467026044744098784954762500832278190406881802198303575338158311874491341970444579146638248815636164413771772581964591833455055886833879504320098506335328910379223983277573694356846337961823081287986674791459748001014087760336006966850192999063236788568848765812192775492248445517060690151700498331622538367493718859724934115228375142396923937735633684527869745420378950550480692200706066019831688796077313463059296313396035429537407627377675974680696279162072713257960965681304091009329215383850223530139165455326927677102783057396241883175412729216204807235187239596365892879371542214145426492827777125727970815789114727245511828912252143569</span></span><br><span class="line"><span class="string">h = [3565625090222584896920916237461241765625829204082396377386021101162536812411479309464325956424849651112502540095796665989782448302150047491000013081443589381171861802823657878857754676608742927932812781165716659755896099505195018830422885342733139127785165794897376463794696074605473512720672450888626374504772116915620258088753289255996096552892614801083370595759624402874902282635442418547645823133641783382626721416313803991932439793168113855890150599332984583295219543856049901518912201443065300476561372304830840276820139993555523469165273121628823953454126151208689489078628524850757272649061955436843893289237414654732290904213005377463766762255194199607599718375650615493280298611532927519686558670313416090562438894368509350896602591065538560, 286740894693471986151090603562932147965458822098297907353215124508138484491994267754471216888566417392843923796488725160656461314962959042706124173470952968241147487040483767911639159119505992553207913863135028688626896196178757909088128827455625174341894140582939848620368540355056452428553556546413465430152617836247505772663758606552662729528340901377490256234099815707208769579251833692482247933846648593307680305448986314447242583396656418769737861680456297522358131674037354880608888487272985141452871763297604747444764332049229204365395410106847606241968638474099061876569990163879954288002836750959104349076854993248516655758322107956062243468530601256243967323153547535726777712582210098524981336526310800007425464476736381605758610129914167296, 202445786178968197828946112166667682571891905248793492278433983415264905988886412319222803698650008275405441752508434114212113517053913972304515710532012288036732448805044856628337036478357496484044773293960097063848568051250774170422935810965491124102107450786197166927290614807575403261921855599437944525251033428950982061449203659272914014109623656149839199935645660386382459896840619916225080206084500617856222897968865436783548821187873430635315967325778835200418210099836625362334832448337496843986398001079590846483593452928602841826412074751479179471599709999916393508418744578599831517548843854866251289525136765297969136698285441109232446206843977149859059568434871554288377088102779550812057943402777376610057499017696210394059743209313009664, 114630215368349491250326648494149748728124718005857201833657753308980378360823813480094685056650954220208569495921715772409260048257134505583210349697604470912610748671738387322753221966031149012764535612682778184882174392537951540598166408100353995693537007226929298573802177602978136134506604598926968767277963229517115896872176785224081721198822306288029114228955110090342800494317915814873698062519566559427796027618459996738296291782097320521350172532923653864250838232011730592925952612867718426259229217480911558421879422300001641170190840092379605603655701803649801243406059797147753118709730213303123683329677068533772082060407549189564758770771711148071596602056935716438347268248190581386987972757911856155781563899140822797888004226036006912, 128249367678574240079270694387429301574447189368221420750047602082333294620192478593526403955673394674124614483528399397766799072294205407818283464218350759458734269850052374022374583516046462573242829813776315162366850512131805663098817008453376098230770350796562755291771240680188153978483320771657621585572523650775437065002970862224206343896650474078023744187172724827284900132434561870157274624749481073656218832950661419154809116630241897087363941068977482336058825222409922455565132842885044852488100437379745993397785019888492704177085025661715401393223084613786993440233186999961708361656323625565518221228007812487647507152403406194060777071074419667727156839380340460479471882700515901974677682591933244024896502221255164137619867236474814464, 59331241745881917257932833661253483407124868132789104057434303748460794035055450167305496229505776497962206681068504038089886777631651664100577079680933516972657892279730519042800959265778075851643260975944157575808540832473360789304763830393990596483325556391563383526131388426655998362610795663009444329530380313582369506744601127066018505286584082074112032220681653032998814836135211241601616761559477125123260865574463289315537641250468595444847485104869371846138937594815717839233479424297762637589843061706537365341325349697086472650360732699495909942722893269089976271337217878676728476285757191230122449283410993290558727101211299826258005529280347023431637543174327095221833097882251371141896661614980087581376418853642047359092191718247759872, 194175487858295065586566223420720835354218714701012787036868166885106803179611016852320235121944886794854103233580220709024806072743993477154116046455972680314714490810103482613775169723949822599089353607462687446238694112422779778557153306320141326888706724709408146840971915646939721136724368012432988045478440516756541030644897102338343015620307071124895653986756365725579987250601332133147888516462970772662004254372283824275049130754409522022155104472953510056515893487814795314057133448327072939691256835996305152489881345263632544581620669637374642183724635278556621665654137071320546871015687481523597402928763713183489458838102245889150936728919959706046092027960728825776566021949524779914956226078468441681639597976295123311554992063660425216, 115807966653135071136266364151575193370063353963428994232152558690537462513652457844803096649471511022423130391640990718769139833768597282872892832632006932256100725142377601958457582836326282142674470340977659300588249614977457789078637672424804434580082554677223019302922992562279282682989740074843377451539592513262883913515900320935326048141177654658002842824967867990878423576079246988742657580816398545604320575322509216636723893917401586976250940528255869144608693606581992658961868351662299980182039083401570931369157275822911645710245831972301615048181855392924402552747776587682847866506513589721569586179062186510923857682304736484524409943982860419833114775174973677241133994963586243092033231181717755422868113246798964708435895447826989056, 35892864763676162390876495832131732661057713103645821857653105944898881372368808709419507620431545862639883539544774550258981962490994311035563824804791343118179784911204081384298523734092852978345353083620780025983844560713535542579917199852557029443606552741189260726705956142592472777625642697686483587065598383553745177190736612246797880186504227507540789056735743669295160656843457591270441961646851151123270490417727787782300206183313402455683157806373799412772262389178947152383087432869175216907112201344491993073522598897459497720231382736974467891671184580545749653915968971302794570679028312275641136161418552643700105215949462752782765599606395043723535992514850129235084780569665298381129831228968986167487292913320768400938041503014453248]</span></span><br><span class="line"><span class="string">HP = [182123398439336131233484419016500805950625530876289136147992418330368556518782504528500478328506268530182121028338611308706301778495117293952384271741141930454826813234222655694969514594179399691491676343267560926415204796892285953757083137635724586246679285504584200603423040990857955982592545447321735123888380669252758270022750955484747603018957220340523162322224297824154306196315662236519394066376582303992842999145368668536271548561974662730580382535581064544751603313110317522142473855128127879421866476758202400277448627166191464212616826131845112048518089279156877724351779259697512559047606602356481432326384500230304234630224805224043299183292854524931957718694768306272627669496947333830650701612740067754226344379590044087735385490127725862, 143170049879066655087340950742576943114220056125957541251904657597420632960015895981469092773424062349481612793313849969949143634455140221504418524950906026552571808412365313452770620316647140315635576351924131570731151371864300979486246561311374091503771233474221846682477948158595874825046725186096019808916856990568087679235183223125111635340379631262792582193894921427748477534899648278496684573736979116799130367368459501772350225298850161734598992871658808303947946703790369232633550983464071710073626283163523659905448412753809088559015473221667463885047754120012784534383142422681768521744011385759111784771218858429141270195947803513052066866898605116497618560152428747336114471742600059289342252682494024257280492765302681978041917175224445454, 181932081065216017223259767432026159751069100962417675256904857171174594214631105569878401257202843288868067795959660425655397502682572819329811836847256980387967545675607257191386494389870983892416162767006265255985611267066664459013834260578459679814704254643652527448346657946799415019242620362556994094217501805852227552561431064112972359577708305419407712233651342990435225577864469921706228376386943352990854043536613387681781610381704457332320684886669558444649325853462867815167473502469305672972117003639658784729134706896312010708005781941993559519054971159338636279746679220293668476785752715272037394473281514117697060980377364913173031572794672785720241295564153405600993322639561228795731008971285970805298272968367327982292736365952177736, 152197501838094386559667505260111556746524794647762036036984156853293482749405051706379215782024625767996604204199239858042655575156447769644733342469940464962491758196879181740442958683860120188153222622045687386550968060691333980045707578681522952010130720785366069103645756481641865768541014660604224000448808608848607142992914438243019336580286597455942208546183871629991237012627078724041815698483916930337697145596477943636313719062754662224057190310995369364817444976298713991954316505112491477110025799278176478205958831032614361098570277711286905522504386261323350696026797810604096448605140635754896533192146402989175530945145957561334345659035675075518654525640506611082619111666729303712983450765181951782352125875791130477959487243678637091, 13260127114160132039578764564277724908293717164091148143281881592450508800268944502885346275659282139962084615098549527321116911955505649119891798866789702019684393024690093331965422247341532921411724247274538089836518071897735012248880718279028139698315282234778842097294789834605571276706239190589177804771135138639650083317735678737873354475068162084129555751126946723880482765306519620594499615623179141020788167278111494656031619604249830332631535459164808166638124806843052957919064456863967475953053614347964520430672883482509352453640521720313380086324061829310129198351733197836811498655541708077300463414261809122652381872563486116022996781876662952751320598808796685963865092538114154484684417346701057121540968905340884852819266786655758589, 7726965701613058376939617426173930484905424609871511448979899585789330472291184137208473525618669017229437131718602138062693323242254540169837667647945751730728109543890184121875756549720616016417689684297714982752898170211522441794931085191911567142756874944612942983995000585648922927662513704308624388978740497618316239028274910398075357992565743563209649419566296437582035744561981287334953927069851636537379718348745797306743042426246174030053256711319421877929342022143063981126785133505358707977994735220823800241921524140116409926290245600210702333580796340264633188699655847265231481741281891892263047439742010063674785264961945504178892794083333407945969304699309469264200568906760592035714702098416830232068808480043043046899584880476365211, 180019050945153380400290419089497765220330628588910896281952550416089875088850281952204916892735263785902815673400396668990373595469072648699918494008065197996354855591310768398651316061183602708507734278231600299784123286043254063248471261126675877896352754705297219631260970186401862696837291306580096200621090959901083133979809165850290006958174043988594120292941019793669119321273860506863788556691180109910206811333775009617945993184652622929206661236756401337666271307645630166144277622050610823301758570383783302397752531144991093835433241988398747399949918853848203882961092951831645541246295873588649289531107814613167236073250185453276804880016561013769084225682634383784489652871867815664211238325551136693769474979447466046146633345857611195, 153629149463789849413429112784055293255734339122176408662359601604336509143473758509975758863274395783633189549584941125392600362702091233425733911049553699926215208790821097092121122480643207790283486114884596194662369389215802952635756543090033023067139610689568413680910122744788001731552268160061684744631583107942765508030881967516350806276166348479082293252825499156766363138008724860360262292088895234376252334258828427316419408016153682496909981178280572676774045522450227853270448821337580837554794712541359286413423248459963738684095208415746808201768526760043282181933350859027227907243501251390338333188167931974689538439823388790515993422873395205982049903304374197483641428361419371833919139638015039992779119950859870347438758668679332495, 276427336329209668688130277925589460360311327851014652110707325284581770430564994121969230515633704248812997375123175470056237355182594647858048847262042361717893313893682161435196235153101006253340527909451448103893104917041136181377802230394106849393237486928849495116195885563734324888330607632821513438897200091110205098807840437587357564885934968344589488833398453563587665373858111713149172110412979734635024012258145628247175689960363707897865274630069427102722542299814253018238192096822853168130596686909789751383470674093768125446566821380042192204089190375373896356618809538058749144194802493153530124585829617231928160073305696376878930156414497547968857648212679322981790227182840452493558367673102471438871220031633314842129410346869161197]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>题目名字取自《线性代数的艺术》《The Art of Linear Algebra》</p><p>Old函数来自<a href="https://blog.maple3142.net/2023/04/30/d3ctf-2023-writeups/#d3noisy">d3ctf2023 - d3noisy</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getKey</span>():</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    N = [getRandomNBitInteger(<span class="number">3211</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> N:</span><br><span class="line">        d = d ^ _</span><br><span class="line">    d = nextprime(d)</span><br><span class="line">    e = inverse(d,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> N, n, e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">N</span>):</span><br><span class="line">    p,S = [],[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">        p.append(getPrime(<span class="number">321</span>))</span><br><span class="line">        r = [N[_]%p[i] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line">        shuffle(r)</span><br><span class="line">        S.append(r)</span><br><span class="line">    <span class="keyword">return</span> p, S</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">N,n,e = getKey()</span><br><span class="line">p,S = leak(N)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;S = <span class="subst">&#123;S&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原理：<a href="https://s1um4i-official.feishu.cn/docx/InUFdQUKdozf8yx5IhGcf5zInSe#share-Sk0FdIDYToWLVrxbDjmcUZWanVh">2023 AntCTF x D^3CTF Writeup By S1uM4in</a></p><p>exp: <a href="https://blog.wm-team.cn/index.php/archives/82/#LinearARTs">SCTF 2024 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sn = (<span class="number">1</span>,<span class="number">23</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">14</span>,<span class="number">4</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">7</span>,<span class="number">19</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">8</span>)</span><br><span class="line">M = <span class="number">309169501373330124045649100152326414225457160505584328527283516968464416389302355829097052128714780092162406614467026044744098784954762500832278190406881802198303575338158311874491341970444579146638248815636164413771772581964591833455055886833879504320098506335328910379223983277573694356846337961823081287986674791459748001014087760336006966850192999063236788568848765812192775492248445517060690151700498331622538367493718859724934115228375142396923937735633684527869745420378950550480692200706066019831688796077313463059296313396035429537407627377675974680696279162072713257960965681304091009329215383850223530139165455326927677102783057396241883175412729216204807235187239596365892879371542214145426492827777125727970815789114727245511828912252143569</span></span><br><span class="line">h = [<span class="number">3565625090222584896920916237461241765625829204082396377386021101162536812411479309464325956424849651112502540095796665989782448302150047491000013081443589381171861802823657878857754676608742927932812781165716659755896099505195018830422885342733139127785165794897376463794696074605473512720672450888626374504772116915620258088753289255996096552892614801083370595759624402874902282635442418547645823133641783382626721416313803991932439793168113855890150599332984583295219543856049901518912201443065300476561372304830840276820139993555523469165273121628823953454126151208689489078628524850757272649061955436843893289237414654732290904213005377463766762255194199607599718375650615493280298611532927519686558670313416090562438894368509350896602591065538560</span>, <span class="number">286740894693471986151090603562932147965458822098297907353215124508138484491994267754471216888566417392843923796488725160656461314962959042706124173470952968241147487040483767911639159119505992553207913863135028688626896196178757909088128827455625174341894140582939848620368540355056452428553556546413465430152617836247505772663758606552662729528340901377490256234099815707208769579251833692482247933846648593307680305448986314447242583396656418769737861680456297522358131674037354880608888487272985141452871763297604747444764332049229204365395410106847606241968638474099061876569990163879954288002836750959104349076854993248516655758322107956062243468530601256243967323153547535726777712582210098524981336526310800007425464476736381605758610129914167296</span>, <span class="number">202445786178968197828946112166667682571891905248793492278433983415264905988886412319222803698650008275405441752508434114212113517053913972304515710532012288036732448805044856628337036478357496484044773293960097063848568051250774170422935810965491124102107450786197166927290614807575403261921855599437944525251033428950982061449203659272914014109623656149839199935645660386382459896840619916225080206084500617856222897968865436783548821187873430635315967325778835200418210099836625362334832448337496843986398001079590846483593452928602841826412074751479179471599709999916393508418744578599831517548843854866251289525136765297969136698285441109232446206843977149859059568434871554288377088102779550812057943402777376610057499017696210394059743209313009664</span>, <span class="number">114630215368349491250326648494149748728124718005857201833657753308980378360823813480094685056650954220208569495921715772409260048257134505583210349697604470912610748671738387322753221966031149012764535612682778184882174392537951540598166408100353995693537007226929298573802177602978136134506604598926968767277963229517115896872176785224081721198822306288029114228955110090342800494317915814873698062519566559427796027618459996738296291782097320521350172532923653864250838232011730592925952612867718426259229217480911558421879422300001641170190840092379605603655701803649801243406059797147753118709730213303123683329677068533772082060407549189564758770771711148071596602056935716438347268248190581386987972757911856155781563899140822797888004226036006912</span>, <span class="number">128249367678574240079270694387429301574447189368221420750047602082333294620192478593526403955673394674124614483528399397766799072294205407818283464218350759458734269850052374022374583516046462573242829813776315162366850512131805663098817008453376098230770350796562755291771240680188153978483320771657621585572523650775437065002970862224206343896650474078023744187172724827284900132434561870157274624749481073656218832950661419154809116630241897087363941068977482336058825222409922455565132842885044852488100437379745993397785019888492704177085025661715401393223084613786993440233186999961708361656323625565518221228007812487647507152403406194060777071074419667727156839380340460479471882700515901974677682591933244024896502221255164137619867236474814464</span>, <span class="number">59331241745881917257932833661253483407124868132789104057434303748460794035055450167305496229505776497962206681068504038089886777631651664100577079680933516972657892279730519042800959265778075851643260975944157575808540832473360789304763830393990596483325556391563383526131388426655998362610795663009444329530380313582369506744601127066018505286584082074112032220681653032998814836135211241601616761559477125123260865574463289315537641250468595444847485104869371846138937594815717839233479424297762637589843061706537365341325349697086472650360732699495909942722893269089976271337217878676728476285757191230122449283410993290558727101211299826258005529280347023431637543174327095221833097882251371141896661614980087581376418853642047359092191718247759872</span>, <span class="number">194175487858295065586566223420720835354218714701012787036868166885106803179611016852320235121944886794854103233580220709024806072743993477154116046455972680314714490810103482613775169723949822599089353607462687446238694112422779778557153306320141326888706724709408146840971915646939721136724368012432988045478440516756541030644897102338343015620307071124895653986756365725579987250601332133147888516462970772662004254372283824275049130754409522022155104472953510056515893487814795314057133448327072939691256835996305152489881345263632544581620669637374642183724635278556621665654137071320546871015687481523597402928763713183489458838102245889150936728919959706046092027960728825776566021949524779914956226078468441681639597976295123311554992063660425216</span>, <span class="number">115807966653135071136266364151575193370063353963428994232152558690537462513652457844803096649471511022423130391640990718769139833768597282872892832632006932256100725142377601958457582836326282142674470340977659300588249614977457789078637672424804434580082554677223019302922992562279282682989740074843377451539592513262883913515900320935326048141177654658002842824967867990878423576079246988742657580816398545604320575322509216636723893917401586976250940528255869144608693606581992658961868351662299980182039083401570931369157275822911645710245831972301615048181855392924402552747776587682847866506513589721569586179062186510923857682304736484524409943982860419833114775174973677241133994963586243092033231181717755422868113246798964708435895447826989056</span>, <span class="number">35892864763676162390876495832131732661057713103645821857653105944898881372368808709419507620431545862639883539544774550258981962490994311035563824804791343118179784911204081384298523734092852978345353083620780025983844560713535542579917199852557029443606552741189260726705956142592472777625642697686483587065598383553745177190736612246797880186504227507540789056735743669295160656843457591270441961646851151123270490417727787782300206183313402455683157806373799412772262389178947152383087432869175216907112201344491993073522598897459497720231382736974467891671184580545749653915968971302794570679028312275641136161418552643700105215949462752782765599606395043723535992514850129235084780569665298381129831228968986167487292913320768400938041503014453248</span>]</span><br><span class="line">HP = [<span class="number">182123398439336131233484419016500805950625530876289136147992418330368556518782504528500478328506268530182121028338611308706301778495117293952384271741141930454826813234222655694969514594179399691491676343267560926415204796892285953757083137635724586246679285504584200603423040990857955982592545447321735123888380669252758270022750955484747603018957220340523162322224297824154306196315662236519394066376582303992842999145368668536271548561974662730580382535581064544751603313110317522142473855128127879421866476758202400277448627166191464212616826131845112048518089279156877724351779259697512559047606602356481432326384500230304234630224805224043299183292854524931957718694768306272627669496947333830650701612740067754226344379590044087735385490127725862</span>, <span class="number">143170049879066655087340950742576943114220056125957541251904657597420632960015895981469092773424062349481612793313849969949143634455140221504418524950906026552571808412365313452770620316647140315635576351924131570731151371864300979486246561311374091503771233474221846682477948158595874825046725186096019808916856990568087679235183223125111635340379631262792582193894921427748477534899648278496684573736979116799130367368459501772350225298850161734598992871658808303947946703790369232633550983464071710073626283163523659905448412753809088559015473221667463885047754120012784534383142422681768521744011385759111784771218858429141270195947803513052066866898605116497618560152428747336114471742600059289342252682494024257280492765302681978041917175224445454</span>, <span class="number">181932081065216017223259767432026159751069100962417675256904857171174594214631105569878401257202843288868067795959660425655397502682572819329811836847256980387967545675607257191386494389870983892416162767006265255985611267066664459013834260578459679814704254643652527448346657946799415019242620362556994094217501805852227552561431064112972359577708305419407712233651342990435225577864469921706228376386943352990854043536613387681781610381704457332320684886669558444649325853462867815167473502469305672972117003639658784729134706896312010708005781941993559519054971159338636279746679220293668476785752715272037394473281514117697060980377364913173031572794672785720241295564153405600993322639561228795731008971285970805298272968367327982292736365952177736</span>, <span class="number">152197501838094386559667505260111556746524794647762036036984156853293482749405051706379215782024625767996604204199239858042655575156447769644733342469940464962491758196879181740442958683860120188153222622045687386550968060691333980045707578681522952010130720785366069103645756481641865768541014660604224000448808608848607142992914438243019336580286597455942208546183871629991237012627078724041815698483916930337697145596477943636313719062754662224057190310995369364817444976298713991954316505112491477110025799278176478205958831032614361098570277711286905522504386261323350696026797810604096448605140635754896533192146402989175530945145957561334345659035675075518654525640506611082619111666729303712983450765181951782352125875791130477959487243678637091</span>, <span class="number">13260127114160132039578764564277724908293717164091148143281881592450508800268944502885346275659282139962084615098549527321116911955505649119891798866789702019684393024690093331965422247341532921411724247274538089836518071897735012248880718279028139698315282234778842097294789834605571276706239190589177804771135138639650083317735678737873354475068162084129555751126946723880482765306519620594499615623179141020788167278111494656031619604249830332631535459164808166638124806843052957919064456863967475953053614347964520430672883482509352453640521720313380086324061829310129198351733197836811498655541708077300463414261809122652381872563486116022996781876662952751320598808796685963865092538114154484684417346701057121540968905340884852819266786655758589</span>, <span class="number">7726965701613058376939617426173930484905424609871511448979899585789330472291184137208473525618669017229437131718602138062693323242254540169837667647945751730728109543890184121875756549720616016417689684297714982752898170211522441794931085191911567142756874944612942983995000585648922927662513704308624388978740497618316239028274910398075357992565743563209649419566296437582035744561981287334953927069851636537379718348745797306743042426246174030053256711319421877929342022143063981126785133505358707977994735220823800241921524140116409926290245600210702333580796340264633188699655847265231481741281891892263047439742010063674785264961945504178892794083333407945969304699309469264200568906760592035714702098416830232068808480043043046899584880476365211</span>, <span class="number">180019050945153380400290419089497765220330628588910896281952550416089875088850281952204916892735263785902815673400396668990373595469072648699918494008065197996354855591310768398651316061183602708507734278231600299784123286043254063248471261126675877896352754705297219631260970186401862696837291306580096200621090959901083133979809165850290006958174043988594120292941019793669119321273860506863788556691180109910206811333775009617945993184652622929206661236756401337666271307645630166144277622050610823301758570383783302397752531144991093835433241988398747399949918853848203882961092951831645541246295873588649289531107814613167236073250185453276804880016561013769084225682634383784489652871867815664211238325551136693769474979447466046146633345857611195</span>, <span class="number">153629149463789849413429112784055293255734339122176408662359601604336509143473758509975758863274395783633189549584941125392600362702091233425733911049553699926215208790821097092121122480643207790283486114884596194662369389215802952635756543090033023067139610689568413680910122744788001731552268160061684744631583107942765508030881967516350806276166348479082293252825499156766363138008724860360262292088895234376252334258828427316419408016153682496909981178280572676774045522450227853270448821337580837554794712541359286413423248459963738684095208415746808201768526760043282181933350859027227907243501251390338333188167931974689538439823388790515993422873395205982049903304374197483641428361419371833919139638015039992779119950859870347438758668679332495</span>, <span class="number">276427336329209668688130277925589460360311327851014652110707325284581770430564994121969230515633704248812997375123175470056237355182594647858048847262042361717893313893682161435196235153101006253340527909451448103893104917041136181377802230394106849393237486928849495116195885563734324888330607632821513438897200091110205098807840437587357564885934968344589488833398453563587665373858111713149172110412979734635024012258145628247175689960363707897865274630069427102722542299814253018238192096822853168130596686909789751383470674093768125446566821380042192204089190375373896356618809538058749144194802493153530124585829617231928160073305696376878930156414497547968857648212679322981790227182840452493558367673102471438871220031633314842129410346869161197</span>]</span><br><span class="line">N = [<span class="number">4708767973081528023168573044926947658934563237858334014553630859725073243020070244020323437568857351830649743859959646887898299257997756638988846262162225538150844234728800901619698537585321714737408891139629868705840516091582428355548389333579393366732136328125608177487216053734023682113947465331733121489462179165899299048240920229183682356939757096088786234579408711573077204737627084462804644499357094804766876894598825249043115135941089964419043192271077333533836683714152246274269275845933219181872804910838148500474338484859566768928323323696593636427339969267716019100309031892715209683025623234849975307895464735938269345261085730940438716186759614397893026604088677569875434747734189181898326976271333880519091162243501684748772834879792466167298445248175389229863559724478950676239029563324439151410551016381722349890838522197681991628177446461063518141690992447334581300512508825465773880798288272307683989638417146518341759409532797706182846677683088799389298442913402623990449375457033755593868634385631727615347806721806133833528169502472979214964819710255598682819988670354516207520930840846409283073132470934614504680149148109547327387128</span>, <span class="number">4757198203620517143794765267604910493095795311094844413566274009869422815376931718621111117720580862471228813640782198531229515409492088342716220409459294106798101497134472448055953391458449615655883569377639584785792037490637008896514256848581385592600392551703912018079100854217522198951577317337556739332611249483750861591471361102817980105618251176982532225925868963026374151704775667344390422704242645383621060217900910676145748677959579644075866382652086161488831984079972317159657461445978388945681856038986811445908140377206321348009622114851489781036278426519737408135764885954436938515738043892580743425673981360461070462908536332822794776088234668628449143981506340546641308234562402879135337884598144313548476080080962124542821840798480021922299823316621378339539256908347988338628419046446674406990757549313633108810078738483720680863724859040219773337068945695687121911253430253587301225650819603987822575293873532089535898090592951682697252063802367371242789695773831799667985750759719425970425220081258951184137162408616858019436997238183928421723980296980798950610385592319308327154531476138800136312518846802765954214365914041476203757337</span>, <span class="number">6260271268368706894202974920946115816115188845950571520120237970780456710181625399191815712263295472756034586427599379898262163506345593709273928257662728399380574888160529638378436853600598725534540806652324850389757476281756735845783599087526351180190180139943641017569296099292328888806237289130258996981708670174820278524214983689399448597554658220262958254111796900005957872836524047027248224009678666687059095250936810852151693689372463475871131804815995086151489932749015367503707566646168543559329995430826214785289399237561801106879050821209356674239156802503644079619246307005947499697048165246090399224583386662856418159406153045112389578610112884722561317474613223969247465110876733154365833653766670591182883748950599184597459451023018923986740823422847776477251228945891945110718801722689014727114600716017461034657905080746051450682341174623694412770748416067562147608676787115664079694740229658768883676007735585302992187985545889841844207997767110661190243665453593887637904815895612475962686651476815216373738691281464231603892192258663603805169129206191963018210558191982895602850794384470480439972160449513110567887479836047302452135888</span>, <span class="number">6161793207250013570797494234756863397687080181041186816510731291567176964871299327425161851000502133616445905545531485092782385404041730710533771516272296260139106262837045978407656569083562960240430143953182872721497919817738097177263894944222857113121363337781621399861405325519661397750650874898849009802029130305463677312304078131181871898101631087128697192274897356282005646008697649963131201254871475995928275305320556086006088128239082086163782197407584036392884463747225854055014943229340033950065532544200471398723205500231850723533281903111082599734091365396955333349482559770719578251813462590706656471763646813281656772911915024807145645116212156844738463959217823508368154961196723637895297169191405377520750927947802043599975698558877410529027492345619645237927808806733871312048058455663977107878895407852707884088540180890336765740110413731459452344098461419475522191143944664261366926729675317507881727662169113782771947216802243911334262937983559135325080238705366056906997256129306810348258375225984493780977743341116832970140796350402745775226375788074753521350783230020812134140236301025901668281115159305901415422206987085370858066269</span>, <span class="number">5267100693182061105730551422489643540472923253344858672829540425125549614545517974151020398921688128633463338201696945711692006625533952520675663953435215640254400144384021788296437952295630144531875430006662659204735339513612937747300690975152254687383851907004699080078246815205272862884819962563583709162951938168651122403816704823240343148984849052071344742966140663479545160161891038795021005824785201224740312627751177962698791365953051062125124631517160554905455034441596801387892708418733289720382137134217321023480754271334411737655663911742743379367211836655413833046809287316198567758398099507836748909475684560648862129109215885785350168408133761242986824416885584016563597042318941491607601916235825203815086942024474490600481448768349379411212751270310366491544379921291543419341283687345109153982628296204543023859925826685469821151914476990441860923730919468020858122071746051689404035881537671338183844004088076685884238045583556513903826491906404174921979456819918682587206709900934241429913962679932661728908721833896616558835408359984415356236268647069278014603145980640981685074203726122245804585576864570087837482099247739294141035890</span>, <span class="number">5162462814705830591601757376531580617962980722403860234905920908299226731642697660834062549253889060413582755540683840527590402598309292144634913928493684897634026400339692714877009619925511459557913855424295023769775919308444940184747166494266238050276777931643495773847639808703736355223665406475063566148705548335364296830010828283139460292230614687838615753541726131196560029100050195754636309795046308972667554449870028896291390509825562866566753548725869548300148118248199008659299384530905921374513316080454719000877425832863571720472457086847361813854111114685439836714224053286475965744567790207708742674926310351861894865947779584948049698707673768371373918446778517383025648688912089703505285614188439850563597285583239548312224985023338206695155667114379116735062274283039053343181685187030995365075860438677740533389912977636779534737611121255353144444539805398264156597424296852236178999176280407869137812059519852854227409821361739328382172147484474598330834231253101620464739958721313307557310630658583227970770925442542614938853185074197289765329548898637710934105828092320314995861512401925698459527301008129587508663300976103582691406329</span>, <span class="number">6649140979338456571158429374761368976760897710563670809989890282564819118295968633253126877738743634574178324588347360999109654250203505446645264243862842773037458910733859532771418249905981724788494047828456297537358027611207564966158833422897801306463678091448651436675177575228180399059770500794299202538793991793715577351275797766530152153411600676871886097072242958098977594605566348348077157564485377174750284601054375434000998831418901922859174972743257061224425971554461206090504739578847831511868372195473605698051924047323926357992639844245241530482169858597053880045908507421334813726840443799059925292152941459743371594065485699848084734048258449842126422825748254943886650245834046000859421996571550628913365757741911805689672613681956053650621171318720373169110948302105966259138646285605526419760870027645621420086903821938660758287092369250162394396069903163040783688282754629702138245639816886110434223650277763762146197629203795536018850536141079818130315726472981011798788145047831400800104941467963560742030587803961011406665989707119203029072724379029255146763396458848588845250860460087705139017364841131584553084261236589840567231115</span>, <span class="number">8168899029436395364692795593454232091036895599299948532318117116761393743517363132040095717421310359886980194278574472752877597027831839269549478532824129025236038620617032161126275880117012733220663088765166386992128318605644682434157303472033114226244042491860831907943944385264807530903432209485335428051765698702236380741158022406966110626996564136995879680255584735620931684300406112940791753724686246177373719477409443805340508407271623600560048564456186718261926657788265024567080421123194446144350220988492915621488821041300967104356478792251056087399295417830012323918634732984397827312725359183799110612369154471402684865816910493101455171496774742868308775025008426308689577183723449767411860172769412831516068467423654361481150778688163873289257543387795000239433328964159788401420526701226020305803077613816241677014525695074869857889551125509606726969238902042603055324099406019845092024315378384244899067817657498781699847056755756305090888500491550951798253312111755731293758640169004727405603324877175792935993907723035063148626560320654315766808106279518275234003648568369068445294368160230173866752646135861124778765265799548196973867083</span>, <span class="number">8348630270723354493259182662280256138260984518645746593667609152172200543368791155781610034705382149116073810157083636491593342048500244849992273240870345219139548905864169823740036269685761712875185295005795011713290788619359071379858460522236775818361332781019774889153143160640289498757523950068323648270562870966738306831411512420250518077740866650218710375848351296764798825019680669672283959800438993128897746882302470029554463934996995852294557710390386205753571641443778636582466556779747198127259012343546939196316101726936179678869635657503961280742013966843015995054185322302213840241951308386430130853824474928135500515801416146914710217114055520545329040857808495435760870297028244685615913662379773001282252136567046017267524561778582225767660117427092321259032752810132072409463138045662126659710939114478573375541008788207604185460451732171130915353273180416088674263524187868200290716709009289611552439414244264307019110062959894298787028141363833933954570552640934724192185218839864496952232527292389065191847375759617741353754085474868428783331198953111049699320373291090508097919660355754676246066640628895632143964450990654344557521069</span>, <span class="number">7726831311120969667286676592403441701512343495771759595629785321550119249644571082006424753729259901152855905549575899671022335982897040803453216794947911780419686187362424073688945148258991392041323175944115695610151062237998737207532655886657783150963960487522312687070992046702312826656154203430943225796164331305527437083199579169825818279603934499581711670668575469548299481488573326324516734333715194276156576911471181662401295110905521344328843364263266129959859971118962804424704413661908545020969283095679398223297390235824761477375366945842800143476151085833896884718691661714630912968013073013104434053458640714016248264740997545992627552672186322557838280045950726482212669932488114974561483649649343351383079229160959763945558229458520499002180726691094328237258488394522243146090593391749685728759669465130144680082447002028407767776163606617586922657685747599033208438283307659679842041118085579668732756550384596900502053559212745516751792471902256165217537009215366998260822980760315269694838384961847286261164711542277930750072577589856553801522064437618672340945384244416472323053109000837918927226504900813896251975043551278638686816600</span>, <span class="number">8968987938285629240617948467051722149435886509885917763702216023345163109408008270074497543745519530151727556445965569928064735553842420658363105354603157741513670092574436931684427533004293025174123211350576325462462728173969659328044176693572836987586843534848767744838915664703795066304995144232775776719684341951288404229427737359829908086515688446968804720256450440740554026234583056194840461812571345063022497618452164244399064143015908802097217223686160923487482128401427287211150957007532604060924748188413765319265476359003246903423627697147853804755622152986104284873244936617499607798371070741456764348449390632888951118224263493105655590070674764648551070192078583578526360502851230389510368542480849419415776680448771842692080714330462141377172776639342423547593542143697721489001493956464552425938839078532555244925474302588008504589741481918230978326756267199383667581554665587203792785117687376740308864938312069141550084292037723021721526360898235687411336322596033250361165611568719666023228289044833814946966001201457127207654701760716948299453573467357365173035098058373763257492533651132315313675859682126048380654035006075378213512850</span>, <span class="number">7981300019463606853645352354110454207007963102699814810128329537083106249518020509353881747469691213962041447075534592554800201716395600169812666423547654647216056917036860743064514973260346867602517821548669448924211780932485599886400445610649739421099882097549967866880829246229787450449059971489576015715787410828345050220204978200536832411751040623033858384912320534739748796882552734773421901507215135947451320140935277892450174654890975094402518109597906730748405400748382469679816784673362045356083139155359591704108640141917041597791524174369890083212795202978903412063960807930472386855123567308465089478006084042182169516466820283101313148266686715761200797434844620433263697936837701107747168094805538318176902690905917499115693764028070596073697300767536537007725317688748133781561284802092913444702161405517458223464417714034008377178164362285049507597059288060180058818698919377790553612175874518622793698218102224051521107503886448082425743555552309815616702183003622979948216873290689171900287099186521998579816991709156690517943166036708228475309376571947151063442554173341314451731540846796394647906918189315603488625718991167109109441699</span>, <span class="number">8053949430128058736708330982906026162346773786951962707477377101777058242801007842181442746054610551608666559611029165144063561614759820757548225059588087313841573148394520309002827216589638275239334793449783092318479700059809103682436713164194645767910291168510557638317105084174050513221194586162203825546191033272816915870028264519751697411957354349165230156480027095939108261368710812419225111377372883532631725062501991104272312271255510050844502441333677751355812097260514749055329520065637868793833688413892473014232649053996112987455991518662251827123549802055887571242792799583110306730355621628302313062996259840244305807273011732866410287826874488872453781710856778871401375679814443520824603580452474855189342395110638273615179938147555840874259012907218023572652847214686130227965586647311515107958064415525381433617475969034987505420603573352140081128608334982896669199214199448709617966625060883419870514753767191294318841698194268723033013941022212971302167731491667809365275966891261708391926440281900219279073115225382752847769857432906026198605226319148466827285645932052675358429203226977659737234434640735112859550455233620742149348515</span>, <span class="number">8264014184390678459431963025444652884315751112129854103761033650412275599386660038666338159535214473011793266693168650966704085926681262381060690324388830604526720439157855283330104990205531644029394089918099069424195662916249689696331577774197690433979549390480631920943549581519819420554827810799813408453063987652445065224658234644844358306074228160797677340787978458015711304185719485869872732104605633736337011512390062859695704995352867994139390608892491518816458657963325348577277439783308813686552035153580982401500288078232305088325632693453080869510895559823355094604561324011430087954661396733141318517760564290498006961636179876067622914270758203467983997905032905498851751563622883053949650887664160492755038974752910838158810621559557184391008285665891766784390028764051693932492452433301224682101683062283643627198653837174652966208993532825144184381513325438166827346447550241245993804609103053501492425520646699735895117304029788374781093967641293198305409329697345059675232523756122154910323178134511811319030929739178393030120406758241710174023510989641269517397544687595880790143844069641729506984480100714419183377691762015678350855733</span>, <span class="number">8197614472976564826643805692387748902382231595140091921427785594469933331864324068149454235551122573770580341036414811684536613106059968213702888284610759402677704024532574516958084089986352868577017096762040885501116724262235939059151197407681729866066462454074351781506304299339989509379421657175059631661116110149217564804057413741242286095962835706908328494364207192381721058637591782950789643136832163523709426526975927906259057541081546572431625289123769530148975136874725537772157308129017570063675768362991647276152247376650975772962711727994296401371064100761465386879772102498345755204834897929399465394316365626339139266927057793990428490206909995298467482606929255737515631743683366009509811786534329422317077160491685254071369613377869754622038738489939001839103620135513064060990755038467978354969488776716385110720910809577563738347713062890775330591398926770331780091632371098886407210177616672034004946982883842065582512336197295578641216627556216579933640245117292266648820948174210370438368865813680305270544656236504768163487330733693670528547973330215600464351561237973400164120886675353013749961731731842851140559948561880478230548401</span>, <span class="number">8834800045593362902198799767369300022092739522708918588280171689107921315060623144724888627556752979723746097152635704221940182971286007100897372548535433164426273846769200240220287132915053772370477791687829680161208845697597533621787205303964637259104738026995995462617548183418397012946969405284296327254644393464208323821183010552894274496412115092034614562901058572199636008134361031066643623555792048843898093422478254031878583059691427616338060028991041221490748234116463103210913627314395598475575722058184148640647150280282107180517686443120464597184528429998726408553161359694577698878579874132614615459966187610014116851090533308075437178769898624328646728698032117444312981110766955362657506174542945555695353565990488401784607316208882111830794602810124866560344910289371341273390325016891951067302834751066290180312170378102920893423076557975854973130215888106050603347435515489954847107514170969224648254467562815265331425648036292531242450167955381484530658763535786676230345545395561448233963471448760217709519041696908041948882219445487445489093869315775219079573075079837804117998658205925582021832384518414608474368428879771984256707799</span>]</span><br><span class="line">N = <span class="built_in">sorted</span>(N)</span><br><span class="line"></span><br><span class="line">delta = <span class="number">625</span>*<span class="number">2</span>*<span class="number">2</span> - <span class="number">25</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">m = matrix(<span class="number">11</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    m[i,i] = M</span><br><span class="line">    m[-<span class="number">2</span>,i] = h[i]</span><br><span class="line">    m[-<span class="number">1</span>,i] = HP[i]</span><br><span class="line">m[-<span class="number">2</span>,-<span class="number">1</span>] = <span class="number">2</span>^delta</span><br><span class="line"></span><br><span class="line">ans = (m.LLL()[<span class="number">1</span>])</span><br><span class="line">MP = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    MP.append(ans[i]+h[i])</span><br><span class="line"></span><br><span class="line">D = diagonal_matrix(GF(<span class="number">0x10001</span>),N+MP)</span><br><span class="line">Per = (<span class="number">1</span>,<span class="number">23</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">14</span>,<span class="number">4</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">7</span>,<span class="number">19</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">P = PermutationGroupElement(Per)</span><br><span class="line">PM = Matrix(GF(<span class="number">0x10001</span>),P.matrix())</span><br><span class="line"></span><br><span class="line">AA = matrix(GF(q),<span class="built_in">eval</span>(output[<span class="string">&#x27;AA&#x27;</span>]))</span><br><span class="line">A = AA*PM^-<span class="number">1</span>*D^-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = block_matrix(ZZ,[[q,<span class="number">0</span>],[A.T,<span class="number">0</span>],[b,<span class="number">256</span>]])</span><br><span class="line"></span><br><span class="line">ans = m.LLL()</span><br><span class="line">最后解矩阵方程拿回flag</span><br><span class="line">b = matrix(<span class="number">1</span>,<span class="number">625</span>,[<span class="number">11852</span>, <span class="number">40039</span>, <span class="number">61221</span>, <span class="number">5696</span>, <span class="number">17099</span>, <span class="number">14562</span>, <span class="number">55346</span>, <span class="number">24521</span>, <span class="number">416</span>, <span class="number">35663</span>, <span class="number">23856</span>, <span class="number">24647</span>, <span class="number">13107</span>, <span class="number">7521</span>, <span class="number">51455</span>, <span class="number">58642</span>, <span class="number">33535</span>, <span class="number">44484</span>, <span class="number">37656</span>, <span class="number">48854</span>, <span class="number">42195</span>, <span class="number">1308</span>, <span class="number">63347</span>, <span class="number">59701</span>, <span class="number">28030</span>, <span class="number">31542</span>, <span class="number">26059</span>, <span class="number">50134</span>, <span class="number">55345</span>, <span class="number">44748</span>, <span class="number">3842</span>, <span class="number">33871</span>, <span class="number">16793</span>, <span class="number">6286</span>, <span class="number">39608</span>, <span class="number">5457</span>, <span class="number">20485</span>, <span class="number">3567</span>, <span class="number">8168</span>, <span class="number">34256</span>, <span class="number">25223</span>, <span class="number">6415</span>, <span class="number">20080</span>, <span class="number">30336</span>, <span class="number">8848</span>, <span class="number">59707</span>, <span class="number">13262</span>, <span class="number">29709</span>, <span class="number">14596</span>, <span class="number">62602</span>, <span class="number">63386</span>, <span class="number">3827</span>, <span class="number">19507</span>, <span class="number">12452</span>, <span class="number">24685</span>, <span class="number">54285</span>, <span class="number">52438</span>, <span class="number">28929</span>, <span class="number">56574</span>, <span class="number">28561</span>, <span class="number">25717</span>, <span class="number">23923</span>, <span class="number">61018</span>, <span class="number">58933</span>, <span class="number">27128</span>, <span class="number">25843</span>, <span class="number">13247</span>, <span class="number">39971</span>, <span class="number">10576</span>, <span class="number">39854</span>, <span class="number">61019</span>, <span class="number">38557</span>, <span class="number">53816</span>, <span class="number">10965</span>, <span class="number">17248</span>, <span class="number">57949</span>, <span class="number">7647</span>, <span class="number">18572</span>, <span class="number">39844</span>, <span class="number">43080</span>, <span class="number">37216</span>, <span class="number">54036</span>, <span class="number">18092</span>, <span class="number">51799</span>, <span class="number">29800</span>, <span class="number">3831</span>, <span class="number">32640</span>, <span class="number">52752</span>, <span class="number">54334</span>, <span class="number">47114</span>, <span class="number">23999</span>, <span class="number">63426</span>, <span class="number">35409</span>, <span class="number">6725</span>, <span class="number">35138</span>, <span class="number">611</span>, <span class="number">6343</span>, <span class="number">32554</span>, <span class="number">47441</span>, <span class="number">51995</span>, <span class="number">20627</span>, <span class="number">34208</span>, <span class="number">59523</span>, <span class="number">15423</span>, <span class="number">60577</span>, <span class="number">8577</span>, <span class="number">56130</span>, <span class="number">47819</span>, <span class="number">14444</span>, <span class="number">56929</span>, <span class="number">38101</span>, <span class="number">9739</span>, <span class="number">29166</span>, <span class="number">28463</span>, <span class="number">12652</span>, <span class="number">22462</span>, <span class="number">35326</span>, <span class="number">13440</span>, <span class="number">59746</span>, <span class="number">1207</span>, <span class="number">43882</span>, <span class="number">24120</span>, <span class="number">27102</span>, <span class="number">52356</span>, <span class="number">31830</span>, <span class="number">15592</span>, <span class="number">44657</span>, <span class="number">48958</span>, <span class="number">32867</span>, <span class="number">8892</span>, <span class="number">46502</span>, <span class="number">21090</span>, <span class="number">52511</span>, <span class="number">32619</span>, <span class="number">22922</span>, <span class="number">48915</span>, <span class="number">21674</span>, <span class="number">64327</span>, <span class="number">51958</span>, <span class="number">46676</span>, <span class="number">12863</span>, <span class="number">10512</span>, <span class="number">16039</span>, <span class="number">30091</span>, <span class="number">59779</span>, <span class="number">34719</span>, <span class="number">14311</span>, <span class="number">50715</span>, <span class="number">29678</span>, <span class="number">44376</span>, <span class="number">29631</span>, <span class="number">56860</span>, <span class="number">48974</span>, <span class="number">20037</span>, <span class="number">26098</span>, <span class="number">5284</span>, <span class="number">27542</span>, <span class="number">47172</span>, <span class="number">43764</span>, <span class="number">18451</span>, <span class="number">3263</span>, <span class="number">25830</span>, <span class="number">2926</span>, <span class="number">28343</span>, <span class="number">58647</span>, <span class="number">16515</span>, <span class="number">15335</span>, <span class="number">58666</span>, <span class="number">29106</span>, <span class="number">1406</span>, <span class="number">33913</span>, <span class="number">37911</span>, <span class="number">15982</span>, <span class="number">34556</span>, <span class="number">10982</span>, <span class="number">27882</span>, <span class="number">27757</span>, <span class="number">29930</span>, <span class="number">38500</span>, <span class="number">33448</span>, <span class="number">38453</span>, <span class="number">9745</span>, <span class="number">18200</span>, <span class="number">41092</span>, <span class="number">42055</span>, <span class="number">9758</span>, <span class="number">52276</span>, <span class="number">17265</span>, <span class="number">19940</span>, <span class="number">11277</span>, <span class="number">21090</span>, <span class="number">6473</span>, <span class="number">45768</span>, <span class="number">24909</span>, <span class="number">24577</span>, <span class="number">20043</span>, <span class="number">57739</span>, <span class="number">64145</span>, <span class="number">42296</span>, <span class="number">57394</span>, <span class="number">35014</span>, <span class="number">7510</span>, <span class="number">27676</span>, <span class="number">33453</span>, <span class="number">50441</span>, <span class="number">12646</span>, <span class="number">56144</span>, <span class="number">27805</span>, <span class="number">40516</span>, <span class="number">3166</span>, <span class="number">4649</span>, <span class="number">15125</span>, <span class="number">3329</span>, <span class="number">61754</span>, <span class="number">31426</span>, <span class="number">62120</span>, <span class="number">64994</span>, <span class="number">49076</span>, <span class="number">40920</span>, <span class="number">52502</span>, <span class="number">27858</span>, <span class="number">44887</span>, <span class="number">33034</span>, <span class="number">18523</span>, <span class="number">20572</span>, <span class="number">48449</span>, <span class="number">17993</span>, <span class="number">31161</span>, <span class="number">38692</span>, <span class="number">46532</span>, <span class="number">43382</span>, <span class="number">31086</span>, <span class="number">52760</span>, <span class="number">58239</span>, <span class="number">20511</span>, <span class="number">63662</span>, <span class="number">34385</span>, <span class="number">64754</span>, <span class="number">31340</span>, <span class="number">7817</span>, <span class="number">7925</span>, <span class="number">62468</span>, <span class="number">14102</span>, <span class="number">8897</span>, <span class="number">57085</span>, <span class="number">21282</span>, <span class="number">31424</span>, <span class="number">23070</span>, <span class="number">16375</span>, <span class="number">5081</span>, <span class="number">59000</span>, <span class="number">62711</span>, <span class="number">1559</span>, <span class="number">10184</span>, <span class="number">26565</span>, <span class="number">18232</span>, <span class="number">49036</span>, <span class="number">28899</span>, <span class="number">24721</span>, <span class="number">48155</span>, <span class="number">39456</span>, <span class="number">22957</span>, <span class="number">48313</span>, <span class="number">14579</span>, <span class="number">35483</span>, <span class="number">20248</span>, <span class="number">4218</span>, <span class="number">15647</span>, <span class="number">29873</span>, <span class="number">43251</span>, <span class="number">18108</span>, <span class="number">5607</span>, <span class="number">16129</span>, <span class="number">46448</span>, <span class="number">30421</span>, <span class="number">46554</span>, <span class="number">4355</span>, <span class="number">48089</span>, <span class="number">39527</span>, <span class="number">14731</span>, <span class="number">33222</span>, <span class="number">18328</span>, <span class="number">12914</span>, <span class="number">30188</span>, <span class="number">59710</span>, <span class="number">1168</span>, <span class="number">15763</span>, <span class="number">28014</span>, <span class="number">16019</span>, <span class="number">62362</span>, <span class="number">33445</span>, <span class="number">52360</span>, <span class="number">26174</span>, <span class="number">25300</span>, <span class="number">46178</span>, <span class="number">58779</span>, <span class="number">9457</span>, <span class="number">47277</span>, <span class="number">57732</span>, <span class="number">22475</span>, <span class="number">24157</span>, <span class="number">65435</span>, <span class="number">36452</span>, <span class="number">1248</span>, <span class="number">64663</span>, <span class="number">10301</span>, <span class="number">56700</span>, <span class="number">10176</span>, <span class="number">8436</span>, <span class="number">13027</span>, <span class="number">14493</span>, <span class="number">16129</span>, <span class="number">54871</span>, <span class="number">64243</span>, <span class="number">36832</span>, <span class="number">64269</span>, <span class="number">25810</span>, <span class="number">60247</span>, <span class="number">14368</span>, <span class="number">26154</span>, <span class="number">17881</span>, <span class="number">20932</span>, <span class="number">39373</span>, <span class="number">51088</span>, <span class="number">51334</span>, <span class="number">54154</span>, <span class="number">32771</span>, <span class="number">57346</span>, <span class="number">4199</span>, <span class="number">59130</span>, <span class="number">34447</span>, <span class="number">53487</span>, <span class="number">15647</span>, <span class="number">3160</span>, <span class="number">65020</span>, <span class="number">19196</span>, <span class="number">62035</span>, <span class="number">45262</span>, <span class="number">65128</span>, <span class="number">62302</span>, <span class="number">57896</span>, <span class="number">62398</span>, <span class="number">24696</span>, <span class="number">37237</span>, <span class="number">52966</span>, <span class="number">41938</span>, <span class="number">61626</span>, <span class="number">53222</span>, <span class="number">47046</span>, <span class="number">22868</span>, <span class="number">3294</span>, <span class="number">40114</span>, <span class="number">49910</span>, <span class="number">2997</span>, <span class="number">16339</span>, <span class="number">24335</span>, <span class="number">8406</span>, <span class="number">29568</span>, <span class="number">51388</span>, <span class="number">13031</span>, <span class="number">20114</span>, <span class="number">20393</span>, <span class="number">38655</span>, <span class="number">17408</span>, <span class="number">56918</span>, <span class="number">8070</span>, <span class="number">56300</span>, <span class="number">37248</span>, <span class="number">32428</span>, <span class="number">3535</span>, <span class="number">56734</span>, <span class="number">53590</span>, <span class="number">34975</span>, <span class="number">25470</span>, <span class="number">63388</span>, <span class="number">32317</span>, <span class="number">33244</span>, <span class="number">58451</span>, <span class="number">57760</span>, <span class="number">19552</span>, <span class="number">5913</span>, <span class="number">35267</span>, <span class="number">58273</span>, <span class="number">33286</span>, <span class="number">9758</span>, <span class="number">18038</span>, <span class="number">13483</span>, <span class="number">18722</span>, <span class="number">15900</span>, <span class="number">65430</span>, <span class="number">64453</span>, <span class="number">20836</span>, <span class="number">35913</span>, <span class="number">63476</span>, <span class="number">21980</span>, <span class="number">2640</span>, <span class="number">174</span>, <span class="number">15632</span>, <span class="number">58250</span>, <span class="number">50263</span>, <span class="number">25277</span>, <span class="number">20557</span>, <span class="number">21974</span>, <span class="number">44194</span>, <span class="number">4401</span>, <span class="number">44431</span>, <span class="number">111</span>, <span class="number">55798</span>, <span class="number">34275</span>, <span class="number">23980</span>, <span class="number">21805</span>, <span class="number">12520</span>, <span class="number">29968</span>, <span class="number">32463</span>, <span class="number">20932</span>, <span class="number">62738</span>, <span class="number">126</span>, <span class="number">61414</span>, <span class="number">49719</span>, <span class="number">62041</span>, <span class="number">7973</span>, <span class="number">63793</span>, <span class="number">44161</span>, <span class="number">39931</span>, <span class="number">57845</span>, <span class="number">5248</span>, <span class="number">3353</span>, <span class="number">59633</span>, <span class="number">25634</span>, <span class="number">34262</span>, <span class="number">38935</span>, <span class="number">55423</span>, <span class="number">57017</span>, <span class="number">35859</span>, <span class="number">32984</span>, <span class="number">34761</span>, <span class="number">18603</span>, <span class="number">8280</span>, <span class="number">62355</span>, <span class="number">54037</span>, <span class="number">35031</span>, <span class="number">34161</span>, <span class="number">21867</span>, <span class="number">11730</span>, <span class="number">40771</span>, <span class="number">24174</span>, <span class="number">43433</span>, <span class="number">21832</span>, <span class="number">22219</span>, <span class="number">41759</span>, <span class="number">45711</span>, <span class="number">52981</span>, <span class="number">322</span>, <span class="number">48561</span>, <span class="number">23634</span>, <span class="number">43810</span>, <span class="number">51549</span>, <span class="number">12411</span>, <span class="number">30193</span>, <span class="number">43445</span>, <span class="number">62341</span>, <span class="number">30797</span>, <span class="number">32034</span>, <span class="number">43668</span>, <span class="number">18076</span>, <span class="number">42291</span>, <span class="number">58967</span>, <span class="number">2507</span>, <span class="number">3694</span>, <span class="number">34995</span>, <span class="number">43204</span>, <span class="number">55921</span>, <span class="number">28421</span>, <span class="number">32042</span>, <span class="number">32041</span>, <span class="number">29489</span>, <span class="number">20959</span>, <span class="number">3591</span>, <span class="number">57503</span>, <span class="number">46729</span>, <span class="number">6756</span>, <span class="number">4001</span>, <span class="number">27079</span>, <span class="number">21977</span>, <span class="number">41714</span>, <span class="number">27990</span>, <span class="number">32042</span>, <span class="number">41630</span>, <span class="number">188</span>, <span class="number">58107</span>, <span class="number">56671</span>, <span class="number">37021</span>, <span class="number">55834</span>, <span class="number">28330</span>, <span class="number">30198</span>, <span class="number">14634</span>, <span class="number">26376</span>, <span class="number">54094</span>, <span class="number">9778</span>, <span class="number">47259</span>, <span class="number">52172</span>, <span class="number">413</span>, <span class="number">57322</span>, <span class="number">32947</span>, <span class="number">24301</span>, <span class="number">40103</span>, <span class="number">47805</span>, <span class="number">63460</span>, <span class="number">45027</span>, <span class="number">58687</span>, <span class="number">29368</span>, <span class="number">50857</span>, <span class="number">33177</span>, <span class="number">56299</span>, <span class="number">22794</span>, <span class="number">34339</span>, <span class="number">1352</span>, <span class="number">34550</span>, <span class="number">2809</span>, <span class="number">51218</span>, <span class="number">30240</span>, <span class="number">13605</span>, <span class="number">61472</span>, <span class="number">61264</span>, <span class="number">46662</span>, <span class="number">49333</span>, <span class="number">15947</span>, <span class="number">49470</span>, <span class="number">13229</span>, <span class="number">10793</span>, <span class="number">27146</span>, <span class="number">11497</span>, <span class="number">61800</span>, <span class="number">26086</span>, <span class="number">16123</span>, <span class="number">5144</span>, <span class="number">25205</span>, <span class="number">51901</span>, <span class="number">23717</span>, <span class="number">34252</span>, <span class="number">31111</span>, <span class="number">19235</span>, <span class="number">20281</span>, <span class="number">12791</span>, <span class="number">4478</span>, <span class="number">44855</span>, <span class="number">15024</span>, <span class="number">32110</span>, <span class="number">29904</span>, <span class="number">24536</span>, <span class="number">44187</span>, <span class="number">64477</span>, <span class="number">14582</span>, <span class="number">6203</span>, <span class="number">36710</span>, <span class="number">19553</span>, <span class="number">51294</span>, <span class="number">35794</span>, <span class="number">32941</span>, <span class="number">28169</span>, <span class="number">33228</span>, <span class="number">39747</span>, <span class="number">54759</span>, <span class="number">52243</span>, <span class="number">970</span>, <span class="number">35198</span>, <span class="number">5045</span>, <span class="number">21100</span>, <span class="number">21560</span>, <span class="number">65239</span>, <span class="number">9032</span>, <span class="number">21242</span>, <span class="number">35101</span>, <span class="number">34463</span>, <span class="number">47540</span>, <span class="number">37675</span>, <span class="number">51999</span>, <span class="number">32603</span>, <span class="number">20893</span>, <span class="number">48324</span>, <span class="number">56325</span>, <span class="number">47725</span>, <span class="number">30794</span>, <span class="number">26058</span>, <span class="number">58492</span>, <span class="number">37103</span>, <span class="number">26744</span>, <span class="number">36667</span>, <span class="number">57968</span>, <span class="number">4879</span>, <span class="number">18033</span>, <span class="number">44946</span>, <span class="number">35929</span>, <span class="number">15560</span>, <span class="number">37254</span>, <span class="number">16685</span>, <span class="number">42421</span>, <span class="number">54565</span>, <span class="number">53191</span>, <span class="number">47432</span>, <span class="number">23308</span>, <span class="number">30977</span>, <span class="number">8870</span>, <span class="number">50576</span>, <span class="number">61308</span>, <span class="number">38765</span>, <span class="number">52591</span>, <span class="number">59677</span>, <span class="number">36136</span>, <span class="number">26062</span>, <span class="number">37722</span>, <span class="number">36608</span>, <span class="number">34034</span>, <span class="number">51084</span>, <span class="number">39613</span>, <span class="number">57142</span>, <span class="number">5221</span>, <span class="number">35690</span>, <span class="number">37847</span>, <span class="number">30269</span>, <span class="number">30642</span>, <span class="number">34530</span>, <span class="number">41738</span>, <span class="number">53860</span>, <span class="number">62063</span>])</span><br><span class="line"></span><br><span class="line">b -= matrix(GF(q),ans[<span class="number">25</span>][:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">b = matrix(GF(q),b)</span><br><span class="line">s = ((A.T).solve_left(b))</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.<span class="built_in">list</span>()[::-<span class="number">1</span>]:</span><br><span class="line">    num *= q</span><br><span class="line">    num += <span class="built_in">int</span>(i)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(num))<span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> xor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flatter</span>(<span class="params">M</span>):</span><br><span class="line">    <span class="comment"># compile https://github.com/keeganryan/flatter and put it in $PATH</span></span><br><span class="line">    z = <span class="string">&quot;[[&quot;</span> + <span class="string">&quot;]\n[&quot;</span>.join(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, row)) <span class="keyword">for</span> row <span class="keyword">in</span> M) + <span class="string">&quot;]]&quot;</span></span><br><span class="line">    ret = check_output([<span class="string">&quot;flatter&quot;</span>], <span class="built_in">input</span>=z.encode())</span><br><span class="line">    <span class="keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="built_in">map</span>(<span class="built_in">int</span>, findall(<span class="string">b&quot;-?\\d+&quot;</span>, ret)))</span><br><span class="line"></span><br><span class="line">S = <span class="built_in">eval</span>(Old[<span class="string">&#x27;S&#x27;</span>])</span><br><span class="line">p = <span class="built_in">eval</span>(Old[<span class="string">&#x27;p&#x27;</span>])</span><br><span class="line"></span><br><span class="line">S = [(<span class="number">108032701991161449851369002312715580973354179025631833045125920330341444336132442627369167910196499846245375</span>, <span class="number">536708156806056194339800940453431360309948744802961091477684592805557756940577780671965778135111037727024460</span>, <span class="number">1092908539163523128210211825513206434685729471033351288310817570413536030332936913121881436496682004163218561</span>, <span class="number">319681218899114691143952029933390929281094479463796376994923082695907785812861868813064052001648547956430773</span>, <span class="number">1491469717762965437203234107675304739260134332073261473787166051408478205091597260393509384628194825690384017</span>, <span class="number">1373831114788217760848815706926510177900812033455370113335228787592380681943495789200016044894484593753473793</span>, <span class="number">721749134747261598156945357302901463050568624661297095403296472280731478071009708971832640575096673851818368</span>, <span class="number">1860163764050401633727513573627217696972941984286848985572281249857942774623702194570023403287105671073489060</span>, <span class="number">154984136256332584966107344852839904503587225305261779832283480159849061688311452179481908517673432437277241</span>, <span class="number">1561939838062660892618339034341951346106257548745672265144871883988280932734601893314037783804475701266891293</span>, <span class="number">1196621210864420273010964492926788183563258771458649486943239707342155163532184200078478415282614629395227800</span>, <span class="number">418140199208035988378436961769638766691045254816780694434194995467625611261074562013654661647238861824195187</span>, <span class="number">1566865563381296633840183260419394895718650714211270127110339192873464656390177925048966057251100807853472205</span>, <span class="number">591765854512223923173381833993118081655482569860165937279009553758243886824330666933325098097909951941773363</span>, <span class="number">1621194715625482277240801603470708569317091835690367023874070253760241984371512903868391207817859394152312002</span>, <span class="number">1853919209784660031160850930352771886269300975251430020793116172679096829612113956371814479169815876124349500</span>), (<span class="number">429873231732555141667240718587687999822857219084121172009626130310358943388885080601718909981680593606929592</span>, <span class="number">696661257924439276997527001346014167032958774864009281004980339623413640279240542438501016146643735870840200</span>, <span class="number">705077116321796552136313163950148514272481595449062490800965253320667803690854999857493736016740764844951855</span>, <span class="number">36759636718531135702894811812498288161339459911344005228982773190594494346457316668225373274587742986714394</span>, <span class="number">199617109272238821758248859791496856102696174698246601793036123989271809739396262465329953679772767556175349</span>, <span class="number">748305044943665754868843090133175750486758697161694063451745527234017037314999816420606532108167584070014650</span>, <span class="number">128713556531371763123849284738409764132111189857502611935232398816796618991882300550609541403882964822025197</span>, <span class="number">720294314730287284918332403206366390340674935575928437196947060809525523697555946855032892796717502508756244</span>, <span class="number">772169734387893586465583421665818938650077225148817036618409173104456878749345815499342643475174237365342088</span>, <span class="number">485704538257264318281616202446430879022758621467258744613654741872135241670088891039125785177734123506788864</span>, <span class="number">1049386623703990774779796004447122771056640068769982963039740391255206084894449612397763605343929886627187755</span>, <span class="number">1353791534940584582018886955223018991871124918503240637355081780112975543362795028582394093562125315687397117</span>, <span class="number">96922325977204245215966615509244830479352553017235612165102140203380652402877156933626056845508236232145474</span>, <span class="number">1491547721205063194329451603221117324835280653935458186449353861087354977686600897202090908965745312062496462</span>, <span class="number">657985609407219294871212287937819792392394243075603163798767913815753294714053803551989285171175046026021292</span>, <span class="number">1321750505787806228413096336073233274921046205768894526421731637298008087552230154604733661782305913950019758</span>), (<span class="number">1086778637488893363555155897651776469669479648114718713027748026839195873829973285681739101838980868002956926</span>, <span class="number">1603798106276423628680411507040686545422004273861779510586832810301991479137460804045160999460099332509348272</span>, <span class="number">1032596573594908905682883741312054579360541498136380107452641965336593376163298589305748612869488444382282785</span>, <span class="number">1722871599310215842537874903061856170822910917071612533538758545930106429737859314184812107888570570514436817</span>, <span class="number">888612741358369537511403754406447724251960233741122239049680647261856619404416530595695189652109281384865551</span>, <span class="number">272210091239236373983366324215208566923182631266812430374542000868950822203456368709019668399773194130115582</span>, <span class="number">998340433312163849536880381773142598561110062084017535938298827399228054526060914037893418142610051549344149</span>, <span class="number">416561209542736085163087421985348135859148177916787887874024056410059456662972557534961467733006653686852270</span>, <span class="number">12588651533966392617982800355146650879738320880541134139166541021872185894667746916875855764202920352998332</span>, <span class="number">239155589045658762407997613376641052079067501577649334701928033885172818297939378539262342760726229932149102</span>, <span class="number">1712700772384296868424330714519998133456916631419429384710641521922451158914619767158484746435503528247198201</span>, <span class="number">973460793536380374905536216000279457254227413270258748292701993424187048976790644495166672795707977339193401</span>, <span class="number">298374738199736157379773918814268251577739944514215745671393904924422066180617518790938312830200625034492336</span>, <span class="number">1084149657600176924628380982516941510886461179594063721146617624251927480674370653365654346812040758416587254</span>, <span class="number">1455486290142480470333195218741425003901972373269012398794854208385742131684661811551770676387271330305840033</span>, <span class="number">1317616016751494143133911076475028074618881097289669566979706802061473591757960790365356311174253283568545171</span>), (<span class="number">511902046345644666272587656834397557926585465865594799110299385517243337669760460710245197553437169107076465</span>, <span class="number">1308330383856237915365466642984283736169698388215802844201751246880103558237647553782829473002257961428836670</span>, <span class="number">1155713813790080552487939803696106101790310975411071299829183870773444388451785801500623912616242544692680962</span>, <span class="number">1224908750816908679021939739243701563153232819921843770261166611815141376759933697069591681336679313105729046</span>, <span class="number">452063111929995491255412240376860357091791634348346543674689097860541694702190428064670811147941474189515940</span>, <span class="number">243905199413971842010848437083883170120387967869945489727874891785274619523120687843469628111008333520281173</span>, <span class="number">218012047981557163160906385736965875971834228229268545141409957804110200175228120318440102572613964108852241</span>, <span class="number">72449390352553126882641989616711201258083728722073811669248333042484356858555217373026830154484599675673166</span>, <span class="number">1744077638109996915648335389542463821997796324708102976212623303084662144503419047177392858024029202496884056</span>, <span class="number">1562406863302128494306184675628052746736729226148455257287537831013528914148133192444813931611184513898761964</span>, <span class="number">1370809565011874548553736664131319308120113144756404775592948258246558844114463308790143707574202284352297700</span>, <span class="number">619582693502976159201142244983464537147959560539005191107859790886253434688472547727851180959778494649468347</span>, <span class="number">1439935211405443869676158269127460181688799184642555475680575584652080501734744148715596139324976221138373651</span>, <span class="number">90545837187619363498470568359275825840618056784074308739892174914423452949587594590059370188451502082946781</span>, <span class="number">482428410735918416738432316622337711063850733413329084474254412765173029163913604186737203649136909991911512</span>, <span class="number">565434332235923074300308595897761005070298372508007151970717410598099167866385478749744466175454834261310565</span>), (<span class="number">104491799965715411013561142125662618371589863368220043903880063313450364721340353778253423882215372628063760</span>, <span class="number">995180834506623008467226233521869342403315180509957213686517153423463062453889353398616389051090749137685843</span>, <span class="number">829565021944997397018498002084161459259275942202921212249684154592702614408845709428138511390580330061002946</span>, <span class="number">534327621921588874889149990448038480344105599605667358128347364437354685222101199440058722509498308377029012</span>, <span class="number">1132330464934751558500840836525167035985136508412935213102713347379055094835345081148822225633094652420795588</span>, <span class="number">450074048099726665802238274851908045566712843397793274051290281351600335456664818882443154184755479919306880</span>, <span class="number">799650301333724197381856809928105802660976183437036834013098030038374988250871838187978763436682367937424064</span>, <span class="number">186144160986287531641216966101956370994842371362686292130413967390643062283174363969086648192162770707299860</span>, <span class="number">908534860213206841686157605935550514698866576053159893786895113561156202467655121726907189182979000098180930</span>, <span class="number">45172777025563801245002587177051647086647015775396329903238685443215301743159050121404543533110450927794409</span>, <span class="number">764812910167477106544110492707407657402757978897081341870134647618267941562053074583099500973988509251503866</span>, <span class="number">725981463002339136952211983895345042866512126776025275961573441253428056712570870615698244996644709842695281</span>, <span class="number">835069084199672363874718204938215438544707590888115425961659825606911679990035477671978178973889650313585055</span>, <span class="number">1191875778351256270634615082284082976487567969444268263184598475937048145998543269062890189570330392643703428</span>, <span class="number">83818590739829464348451185348616535829221962242907104691853650713849624215858867979607119022934848835272741</span>, <span class="number">845663971836096838373625947207777962185246822459741259152503695147222855185127535612579592810063372388393425</span>), (<span class="number">730080740708716696869611500305945729582831639692674576181815669256588053495445644654846273425696381106798213</span>, <span class="number">1211401865625606862892141164094862255157602687290011401877324564094913451780788011572602838694851127273686199</span>, <span class="number">761750678069382705088989341593202296445602247339072406661067951708499074600129843633749860027539961169263821</span>, <span class="number">958488935282214627573417363369674085278816875474745585966084121728154471973830854061042022718110987983758533</span>, <span class="number">1000154070884484290117374350945928521584252400077614217868317402688302271277639661314255973413082836976423525</span>, <span class="number">452737780943126759615159828372843517970855322695027226969144987933644903011529013014573924533431359051256850</span>, <span class="number">5805599200676249107157522629732437488517848218120336534559572461215244230092132165434652875158210784360605</span>, <span class="number">1069648823350032633271251526144211153517485574227702676510205431642788090278206667447057508392521720178991564</span>, <span class="number">464345016404000464145764099641622835761022772300106935701609296071422986154529936480523330102784677377267972</span>, <span class="number">887532013540448997976095141800168404616145524208067918411064213199200246544405630618505727647904031437367765</span>, <span class="number">764896944683051632934376964111352690545726493595561980325842532869416551338993800555386022016655600198592863</span>, <span class="number">834595492951168051763345064768685082923666710575447603461271875560636579185091403924607285606904089495798238</span>, <span class="number">97747066740378772563805036049036560981941178276358675793741851520890271416061851970734762331332677029558286</span>, <span class="number">1291639614271453651479090561671509420789047119165785858217334853499388375967049382736266913449874753320474210</span>, <span class="number">801271538360332225899343978692624588068282915247341176248413743892071353524747855777605347936971072256796883</span>, <span class="number">583118453726128867307239318601314573717226612564585476755251111771273736693625440352334611064633212563236599</span>), (<span class="number">1007558687762692623401107502108785671552540294554027553075253821535448496219183688214829259558409405603001724</span>, <span class="number">82954089525210775107785196754975536343868930175076975506233700714273434584908468192257652423060749000141288</span>, <span class="number">427447460947692981480247356494758073766902779792449397588581408107838459193575936867213556781504157624146419</span>, <span class="number">1374117754996529221098536377009433889631952516241548318835190450059797631046672640835049895872866758924481496</span>, <span class="number">156038208432623159135025608204515658053054306527311311313875093413737186414935362808963926062607056191492625</span>, <span class="number">1515640320653109406794405070206667431846552825063179966889387609909437205938636205039178430345232101643703029</span>, <span class="number">1001238386683833647397450794067318370920199592087688426532041695022589977781759577351271154279661457711401139</span>, <span class="number">9286812100870995351874739983837536749531703373251036760857092007083527341690165710076770799982026349469295</span>, <span class="number">781398522411624239036136435439321625771428352649403511374119891867804110627699867915291152830172439999673301</span>, <span class="number">288390340485689855297713282913031890061650435198757756679240034152731783902546010542111152853837802947107198</span>, <span class="number">1282499438978850273310621141487984553225042108684339648738689012516484353852213933474138478066589426905792640</span>, <span class="number">1206882588472439544838766692591222446845991327532088581599851103973276440986865610584267969223571059209838017</span>, <span class="number">716745202356877068654799969764658910268422168331996123562556456205494558399089053935448159249370428497961068</span>, <span class="number">986593095310489014203641425333005980037776378229232672361107883934927730326718162983564623505526232068548290</span>, <span class="number">103772617718005675720056677269973171337468439536802857689497610845701001446000293596756576084101670871872394</span>, <span class="number">579163101347014044284264738999794759737770512095227857962630915400460939984272909004056647376161945305737747</span>), (<span class="number">288435034175969956020092056225392604045743897118720404871671986231084818165458292729640648522613169661689467</span>, <span class="number">842274139270535842409744945935128951705359842639982830775234202022927766509101371734465485773595508746113280</span>, <span class="number">700418817778098786277078342411520118692346350422606462723911114006419955720829707854379756502697131673319406</span>, <span class="number">569340337737117832121418471593902796598875993869214230094417664010492029193566188439149404136072598861993782</span>, <span class="number">311402606048606137904298548604483824215396754817621627161525397920627489469424683846450586021906438112211863</span>, <span class="number">387556851872999917791805837107172465053410831946704411441234136279016670150248420130484443911023416474044825</span>, <span class="number">926757025438911433753408433626135280565795754689622472147862347099349687223800534911582014085258437224209910</span>, <span class="number">1200730550518343100475397485248562827037665594135578219083390443869303562262076428424675489345048272331540918</span>, <span class="number">853763541787064913980724960667413489272081221293636460056478608052421032518647566798408815952868230194038338</span>, <span class="number">101239479653925653679074333030959394747942224986065362367651805089673854173857409456735028763240747273162552</span>, <span class="number">47121618175135904684072490541732295428491460965542084558472179206885868302518875995103252249901230211543525</span>, <span class="number">982857581226299143840954166901835590289581958403367749920630419874452320611289908335828280671343750955279622</span>, <span class="number">811158165015249537987500368246254094251025296798974323499510891442047224515941233490537351722658420472211406</span>, <span class="number">190329661527190452974427725241771623761097473044383743958766087362063693259351495833117766854793893313562091</span>, <span class="number">50142672419825251936694820690428751885608034385161146860936149367718248528534064819383444639850833791987235</span>, <span class="number">303074295943054006201261314482928767581154579713194119273091027835447157940166620065183762076400863876771618</span>), (<span class="number">1079372098255337688887136508726900390205048294920188450514628679918679463674406107209346812192726950726526095</span>, <span class="number">1185407402236867425841849519771446165946457212261250741849109704048981912211308244902430988525473241626691376</span>, <span class="number">841449701483451008458666118133003457345663684791358742412512477100467235117244326687250726234511967835213312</span>, <span class="number">947580146274192515572496516072653825873017616320635389497290350126027652146744723140627689652187761111324722</span>, <span class="number">119701810379427632902947235248083296107591243190851146608219622795996254840540272877119978122901453247704831</span>, <span class="number">1640347806216480803403265325130213955203137215028089484587105315192029771752510728839945151370945087147585891</span>, <span class="number">132249802108051544701535447313025681301951421902989862817119883237200082396640574742757738128092983379391192</span>, <span class="number">222015024534828263520557570979535921258670062891839524631837193227865004386250245701652729081402110107343213</span>, <span class="number">574045525239164646488552167939702566130627137278663509529342693657266762662320399075679168964197800875153680</span>, <span class="number">9484269602968566121096790600370029517627994135450856762373752676667516556085799114664479005324973494415028</span>, <span class="number">1233903272461676350245321015676982196376541150525344451565454505261564207710591321827100801836574162863320101</span>, <span class="number">1148801053084576503181167454811439762743688828522853724573620157831506900806010782322188583027710897929400855</span>, <span class="number">1215932391694160648245705883928262594648092322383337933840246087760359598672361289173906269225985279432329413</span>, <span class="number">1256312697161815430876406109440773985803220898059915842809050363551861707962446265001460104545875429415188571</span>, <span class="number">872437290854895473828669647489120707661030662446214686039744557281742237010820123691242130056373279816418223</span>, <span class="number">1152504352689745273833849365904838499734041820598612058887413417408375952316351943382602922195063490977108643</span>), (<span class="number">710963262741981151820936850518208399242203827946566243778081082652103950765186323857775548839335091162334870</span>, <span class="number">1456629029412002617034972369163460599977456975519008830537020404598366361266406883048353122402136998033965378</span>, <span class="number">16210930934876839488825850002875991819998003905202118064600427478988072592144130697157997625511415256307363</span>, <span class="number">270428172771482397506264701557858536676609324837517143183553201495149542640445267791184678417415736435998954</span>, <span class="number">849877849071009557937204357275192288430487696593090949890966075681654171368216057356945570659434491278721274</span>, <span class="number">552620920720515058560474932264018680445939377267909570543604994142303109067032086804888256059644299353469259</span>, <span class="number">1172127755569012152057329884978219429036349809157746825385122333254835103162162825165494896169153369293261353</span>, <span class="number">411671306380066471819720700550244415062425059661769246453503317934644249097679366952285018648871841314934569</span>, <span class="number">402751953198228508151317654119142703515415046161021988593791144762527354103153471097112572211022718546278586</span>, <span class="number">766801594113742202593740150497848890462669867082716753718908389103589627909820578043565509568785779049218055</span>, <span class="number">797931710812718040702146757192489993108919934337204902859533844054220052514095634360789107051511556938992653</span>, <span class="number">256266683996681594597141537434560889801561902972841661123996099001842861984074656394526155375881352817334296</span>, <span class="number">1418258257142479430747867834021373209498823909476696372006454504116466387484456504969162467214870003218548093</span>, <span class="number">404210566834668025438526175366143398913809348454169783995888818764258941987118278616050245839417646478639395</span>, <span class="number">1124315278703311203910253162758503257319860043824222656290539806527988308952238570582388061003539053283572317</span>, <span class="number">31271013457852406387457908247212294447150322908910202024391938488810830594827404698941451758903033151739305</span>), (<span class="number">548040572051344376515276589131924583544500173392618971080814926510006336050708851946164444215551993653085559</span>, <span class="number">625548909252967533735849839010612868036138065774462061438762751772756816905614389595526904873401107330945781</span>, <span class="number">1691072562255106837879679641865899852020852750546650376805631545200564107660856702442704801403013254039741569</span>, <span class="number">1202012272195706005158418331650181482011843322779113997244205689517798278846032040147415770067172225826668913</span>, <span class="number">150921370600945669819511437694954238255973349434792437308411767994329401311792429847861423651135286847713713</span>, <span class="number">1081961677217384177165919288637329442102000700465921211931830210416642976436505857583147668075896913252875900</span>, <span class="number">38632177474960713645129923487571475415432359356662267792821760890850300033591793689594738256015530177371155</span>, <span class="number">1938890600587173893505401800316209462990331410030406162509017807707491700220029026718794390924558159879325929</span>, <span class="number">1229683571480518162665771834260511788435892562017987248959417363680402504200735302566356076064181245050609719</span>, <span class="number">1413469344912570390840315618128490201700779301153932364796221898469284008600385792913106541878951550172812412</span>, <span class="number">1603029001236324174565529401277703840486413251539616667351366375992862845333710947994522282396247706689372612</span>, <span class="number">1312758180969033170349160258170632626914169138097284308377628285441990421588369514659056847472785376422032509</span>, <span class="number">420630504359244172568640650703118406520051803679165798526263777300947905179710846980565379197700977880435719</span>, <span class="number">1585809275814789433535721083967397645766740283392075276186763802353434721723652579350998943546412586002101517</span>, <span class="number">589210671463132192681719552822630237990180990772437934057045440386799228059672695104509559337510094293921851</span>, <span class="number">930311739285308931463277260997251754864363249024137932070462953287695059475197620094345118725029808434080647</span>), (<span class="number">1467336759171283069626565411462398975366496846832073813368207088887535151209170863516635004538662162471343762</span>, <span class="number">977074540452559328447962038595860262505507375287943059556072116746789487913192871746080153669811094853532543</span>, <span class="number">248650173456825688417957774461661449303260122768178786152237705032396522955301949686829800599729957124936881</span>, <span class="number">1575141265084365943986079682243623659177381136848989044089310647747968289751919614920688971461354420388159314</span>, <span class="number">787447705570464488319993501786605650852712556006717975039783792984896866011280674498846348134268287187830884</span>, <span class="number">661441381812931924846748272167364237789611518544035906523025481686525617167205320161832280314277716928159938</span>, <span class="number">713730377306644084040092474766578448161880233899851837176624863065798544631483002502432026196641108684529802</span>, <span class="number">678127349747227597169480575382795227664094828375789580467264872090685308013465629197529880718542771111962085</span>, <span class="number">713346890417527875247397732148633974225980066787252539001278528256033329879214523269733008776540235645258616</span>, <span class="number">247766390946758644831951312737583234549767619079720848362262835109239728499038516392540238454397695238919141</span>, <span class="number">222705566395366047399107473153762271285577494629225535376316438586692339782315068484531721893605469117790911</span>, <span class="number">1167884170034239946155932241100371322938666487622727711102849910832028974675686714637275598120136818289661580</span>, <span class="number">932355528178259401857913753619901059996671717365121827133186058111555002840548732397926137817560930059114770</span>, <span class="number">1002746708088820961204612547451117005094490428961711590997242233612795804195894564433549670531755192704377784</span>, <span class="number">1679333740390330063990893123547127749235201034112770813357092856319834835071400803617023235189669738802029304</span>, <span class="number">392242968045894054394410450448222234277751637234090312939171392505401592465971560873369509814497556456004427</span>), (<span class="number">992468551424268052973878019321034098395629270356898670428754992273976085327043949634823897407999881749733525</span>, <span class="number">1451715409910944943601462101816705970560866315969026142750871006351008564752030350792755878689749793232050135</span>, <span class="number">1157009611084371602570908328606510003229611538486635093673400888168806076758399348412361589040924760249605165</span>, <span class="number">973495747254748476179115555073571696121985220451730406501150178959729503505597527610925614459285006121361402</span>, <span class="number">658639350805308777150470408771425787492359455148463053354655386025849573731791445060202388386991444927738961</span>, <span class="number">1971053413102762878789808762083387327923437569500667206884595783469944908304113399563798234198010177066652742</span>, <span class="number">2115317009351535055976145874152453249874377928041776362924821587295001750589961370153217409957345893981016872</span>, <span class="number">2234391928340953996585129136832544559226500428847567089886903639518503721330552899247101854148266339819317188</span>, <span class="number">95072622447945887900832352837970706552989337874284483457123454853555569418515739360750605423996449645105107</span>, <span class="number">1875846203425953685568066514593452384199151872393675498259844146377412020045792635132008533335688986283672883</span>, <span class="number">1810914367567014038914603180161768355184164085528312813795257698944266962072856602341302516572423400651692332</span>, <span class="number">199467426284808218867281478238942162630473707920489559716102969301577891302451826382304815567177368764269462</span>, <span class="number">1702858806121853895873612873027468484445637308444414982865712291274495592467886617988854786928674988921911946</span>, <span class="number">974805688584434752190621523541453157436916884469405725317513726173004242595140529349594953961249312833707385</span>, <span class="number">1563386402665143107620951148197814309632711706132670874925320046005197489375705725978209339748911734754574512</span>, <span class="number">9176208496797520354591828022203217543780592247378582726844977716549360683455502116572757173493442942031259</span>), (<span class="number">233445330763035713906480406558126679912369584387609168775775009002471869774809156648369750200202982292450110</span>, <span class="number">1368815767827926042586853692745612271551227815728536321062147470922660524586014022932653135440512072849734316</span>, <span class="number">384817387960742369820850831236493763489057262900417346331312192757646380527152649103439831363756430268212632</span>, <span class="number">397496835668788385513140511380523318193705211763259441405319027544230424059467351506182237622329904982387715</span>, <span class="number">698110549303594315292020493881564774109817641862010152125384093754339939993582331419363730859850611879969915</span>, <span class="number">1605164779311866241282121191148498603150640021145381378570376215574622721447700807491428199428586193250231478</span>, <span class="number">183289800466565443527759722034380747076340683994766781001250154775016249854621154061869569618175611639903701</span>, <span class="number">1150055471085650022911275723850717353026238077245380241936809820048468325748232815290091481729807017284552381</span>, <span class="number">620603888284975571831631670369627892585626390577575455138594479292012594683550062832525870724842983985770747</span>, <span class="number">1141328685248613112603867626739876650489649831411725855910037151420885700357073101388703693467739668094282156</span>, <span class="number">624960745989505135902341328405609018059617712001038139854396706552761169916956343895696631019491737540425263</span>, <span class="number">563529618847514880940393862944843314371586107587203186648893576096997599582868166110130990825643297466007343</span>, <span class="number">303984049882076688174095718097426318142423827941965036899905826287812216266056955154997043369442371230205564</span>, <span class="number">1078658398740303308773443996075991099257452827614150807223915130507432012180318161902329283469259552998132456</span>, <span class="number">537873127629863133215961576717191616451542237544837768039490490426253210893390806083040946873190554913432278</span>, <span class="number">169827329251258085772690777190607029224657639816497950869244582534669264355479002364217211861513540611966251</span>), (<span class="number">1096245533475537361190288774520023066028944190947416838212035157548679351561405521968403358714145944584630399</span>, <span class="number">1279522123404803133336059116798495103535564541817111467998685969195461307732488357939481563472485600907763277</span>, <span class="number">1621837589082192223743462826999866153643367040938611577504635652882478237855735236683796485402281552828564582</span>, <span class="number">313242446386229290517631456915969842064339663908557260803068874835492915635010632958561104764179416843832161</span>, <span class="number">578485247743964493116232317100459206200994787373794324513012647234668115712570705116452853082031543244068838</span>, <span class="number">219236836922423209713975639747607435338261033480938547612396078378825597472824554607631157060224948270436605</span>, <span class="number">979376137173103622620811921408735178993536617946054941969002748851996870693909895946038600886242442551160010</span>, <span class="number">1658962387074248584465660456576639004572633758113833020219450181488960527172176749430939869777912514216215008</span>, <span class="number">918251986210568868284757564587914989414930967922138557622606681330218265588255276030855013898182774363764198</span>, <span class="number">416145177416426209139713794767532287475150472389752288032134927843857792069932225643904301155189056410493405</span>, <span class="number">1346241144466810519932765660177492393372766698799833323172412119406803241967611867883756378782484642242570189</span>, <span class="number">386044859254038630462329030959102689573511312525928529436140682252354194273696092297158967704938034048108529</span>, <span class="number">1484764098293658918774711805629994556483924451761564995022607799099721232009570720017552575816071384460602164</span>, <span class="number">1038730041745536343360704248505932016034663062624529750511404210052634999557834948325392848734950387651599858</span>, <span class="number">840891087158618754558051176285252692949387956006228734495878738266601769957106869402114856213091762226629917</span>, <span class="number">154290307227368077749870332568887647430659666317555291698382581129904308224189689828380085709625178546228569</span>), (<span class="number">957542186457140429878719718043221941900755820226325043983141960244787673981451575491224713734494596866261378</span>, <span class="number">724047722558649330730843109648231137501160718812738945124027170000449368988489179074784908592741358980048275</span>, <span class="number">859691367287711190756246276405852338601741033988752600016986903642679515575127575700961271435459772059797413</span>, <span class="number">700326697100002173963353478913834231346709568898840509699454481415437420831870839656574933271416282890802499</span>, <span class="number">1212799233481683655114268450576868631340238725268953631719891739166990447791141389709487362430025981929525475</span>, <span class="number">434223116592471574825271824097577518464718630519588487323509231423950783528915761191895287228657263954146704</span>, <span class="number">217358723385922851738144743498951415510775556931588600580907447804579013546360116371411758271211755732813673</span>, <span class="number">1298302755143305654862242351853763864348853855493677603188749853805882418947261680899385729883193441043359755</span>, <span class="number">1068567433966576654450031707464914827557285166837067988549886717564803805511104947509349083926244852733075655</span>, <span class="number">387252452536150691159164650119964238247624960830148325826046315786865241210396695679059829317531866257898261</span>, <span class="number">508839717431096857213637104691635167536835851969398382071457470260649594681556257203954946581750028844005177</span>, <span class="number">1206518168075280470635211428031620060153968523722913415228454624000108732714232864597004081584662635882607853</span>, <span class="number">648865561108057369649107548455893267620716326822663875048533849791081284682513605169317071254138817423411253</span>, <span class="number">328899686789173295020724462964824410189118431101862924515424446992402687451336506312251501354303725597785390</span>, <span class="number">328255320088054790647176014272991149866112991817392189633550739280062827106546437881018772832904512686978965</span>, <span class="number">106174800100391915811859026646635920353821529620342998961153251213838054034659090497687918002957863429970430</span>)]</span><br><span class="line">p = [<span class="number">1865995351449738305568020175407782211399961865380593201418385016005093079577037578689379305647217584283793443</span>, <span class="number">1697242394344178603938736175613701840668178871025357188746023984007769445558252186408395718968869377260650881</span>, <span class="number">2022468188670479218398009972496559844211210519349164350277452667428806390007291454178121579812497234805510519</span>, <span class="number">1834829294267612129864230457016540640249954796220974248612636878892248451710372726854088698756567786846212703</span>, <span class="number">1405518966688306890692028628042659763908744036265874596824103451217948291402053599048649577166902926927583703</span>, <span class="number">1306908379818841354811802528108647022225114028771004539878749636527088666316005228226849317157868863492789557</span>, <span class="number">1616789308818449288058724288899930420024001530178051122904515573455195995874365002006013181396637101496249781</span>, <span class="number">1253980640197082323669506507875908153359037006012151867601133670891700927532100671469629678831658698780894267</span>, <span class="number">1903682307023943435426747954611546184832717459394865637878168715826293943923848159869800611686232172365018581</span>, <span class="number">1456734579850607615224565915938092349853802772768941452254929266785318676489306434153019311316107310595518281</span>, <span class="number">2086165420905105719392664388281307744562262795619197207857331245823719830703952955965374642455778791010644509</span>, <span class="number">1726023515056798169515795231206459220148735483137609272433351313501296592963022379572602085340729076332028431</span>, <span class="number">2321143867752465622995689244649230653121108609695672723739436709976291791473903654863830072020811159448364217</span>, <span class="number">1654702076906300292576294228173753061411836852146848089290417136859589687837314338726356779964670865195828343</span>, <span class="number">1907313129296467305635718505435422104472615990939772968829964204948404573958217594528354537082412412899627617</span>, <span class="number">1320309629971476331896561625690122232816350401607709796615097327024821433804124798985230849347309403103099677</span>]</span><br><span class="line"></span><br><span class="line">T = [crt([<span class="number">0</span>] * i + [<span class="number">1</span>] + [<span class="number">0</span>] * (<span class="number">16</span> - i - <span class="number">1</span>), p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">A = <span class="built_in">sum</span>([<span class="built_in">list</span>(t * vector(s)) <span class="keyword">for</span> t, s <span class="keyword">in</span> <span class="built_in">zip</span>(T, S)], [])</span><br><span class="line">M = block_matrix(</span><br><span class="line">    ZZ,</span><br><span class="line">    [</span><br><span class="line">        [vector([prod(p)]), vector([<span class="number">0</span>] * <span class="number">16</span> * <span class="number">16</span>)],</span><br><span class="line">        [matrix(A).T, matrix.identity(<span class="number">16</span> * <span class="number">16</span>)],</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line">K = <span class="number">2</span>**<span class="number">3840</span></span><br><span class="line">M[:, <span class="number">1</span>:] *= K</span><br><span class="line">ans = flatter(M)</span><br></pre></td></tr></table></figure><p>更新一下：后面看到了其他师傅更详细的WP <a href="https://xz.aliyun.com/t/15764">SCTF2024-Crypto - 先知社区</a></p><blockquote><p>题目给出了多个数据我们只提取主要的几个数据</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#AA,D,Per已知</span></span><br><span class="line">P = PermutationGroupElement(Per)</span><br><span class="line">PM = Matrix(GF(<span class="number">0x10001</span>),P.matrix())</span><br><span class="line">AA = A*D*PM</span><br></pre></td></tr></table></figure><blockquote><p>我们通过已知量就可以求出AA,D,PM然后就可以顺势求出A的值了</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=PM.solve_left(AA)</span><br><span class="line">A=D.solve_left(t)</span><br></pre></td></tr></table></figure><blockquote><p>接下来观察与flag相关的Young函数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = Matrix(GF(q), m, n, <span class="keyword">lambda</span> i, j: randint(<span class="number">0</span>, q - <span class="number">1</span>))</span><br><span class="line">e = vector(choices(<span class="built_in">range</span>(<span class="number">2</span>^<span class="number">8</span>), k=m), GF(q))*Matrix(ZZ,PermutationGroupElement(SymmetricGroup(m).random_element()).matrix())</span><br><span class="line">b = (A*s) + e</span><br></pre></td></tr></table></figure><blockquote><p>这里的b和A我们都知道了，e是一个2^8下的随机误差，那么就可以转化成一个lwe的问题了。这里e还是较大的，但是A是一个625*25的矩阵，数据量多，可以尝试求解，这里直接求cvp即可。由于用上全部数据求LLL较慢，所以我爆破尝试了几组数据，发现在325情况下能够求出结果。</p><p>注意到这里求出结果后要做一个65537进制的转化，而不是常规的直接转byte</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">q = <span class="number">65537</span></span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">    <span class="built_in">sum</span>+=t[i]*(q**(i))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="number">325</span></span><br><span class="line">n = <span class="number">25</span></span><br><span class="line">q = <span class="number">65537</span></span><br><span class="line">A_values = A[:m,:n]</span><br><span class="line">b_values = b[:m]</span><br><span class="line">A = matrix(ZZ, m + n, m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[i, i] = q</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        A[m + y, x] = A_values[x][y]</span><br><span class="line">lattice = IntegerLattice(A, lll_reduce=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LLL done&quot;</span>)</span><br><span class="line">gram = lattice.reduced_basis.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">target = vector(ZZ, b_values)</span><br><span class="line">res = Babai_closest_vector(lattice.reduced_basis, gram, target)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Closest Vector: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(res))</span><br><span class="line"></span><br><span class="line">R = IntegerModRing(q)</span><br><span class="line">M = Matrix(R, A_values)</span><br><span class="line">ingredients = M.solve_right(res)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ingredients: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(ingredients))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">t=(<span class="number">58903</span>, <span class="number">2963</span>, <span class="number">39256</span>, <span class="number">25173</span>, <span class="number">62086</span>, <span class="number">5284</span>, <span class="number">45419</span>, <span class="number">10132</span>, <span class="number">50811</span>, <span class="number">41636</span>, <span class="number">42833</span>, <span class="number">8227</span>, <span class="number">63647</span>, <span class="number">10096</span>, <span class="number">28276</span>, <span class="number">29628</span>, <span class="number">54509</span>, <span class="number">9776</span>, <span class="number">44228</span>, <span class="number">39961</span>, <span class="number">48996</span>, <span class="number">60060</span>, <span class="number">43678</span>, <span class="number">34392</span>, <span class="number">21307</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t))</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">q = <span class="number">65537</span></span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">    <span class="built_in">sum</span>+=t[i]*(q**(i))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息论与编码课程实验</title>
      <link href="/post/1/"/>
      <url>/post/1/</url>
      
        <content type="html"><![CDATA[<h2 id="信源编码与信道编码综合实验"><a class="markdownIt-Anchor" href="#信源编码与信道编码综合实验"></a> 信源编码与信道编码综合实验</h2><p>实现Huffman编解码和Hamming码编解码</p><p>具体代码文件如下：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% a.m</span></span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&#x27;data.txt&#x27;</span>;</span><br><span class="line">[symbols, probabilities, selfinformation] = ProbabilityCalculation(file_path);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;信源符号：&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(symbols);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;信源符号概率：&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(probabilities);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;自信息量：&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(selfinformation);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[symbols, probabilities, selfinformation]</span> = <span class="title">ProbabilityCalculation</span><span class="params">(filename)</span></span></span><br><span class="line">    <span class="comment">% 读取文件</span></span><br><span class="line">    fileID = fopen(filename, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    content = fscanf(fileID, <span class="string">&#x27;%c&#x27;</span>);</span><br><span class="line">    fclose(fileID);</span><br><span class="line">    <span class="comment">% 统计各个符号的出现次数</span></span><br><span class="line">    uniqueSymbols = unique(content);</span><br><span class="line">    symbolCounts = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">length</span>(uniqueSymbols));</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(uniqueSymbols)</span><br><span class="line">        symbolCounts(<span class="built_in">i</span>) = sum(content == uniqueSymbols(<span class="built_in">i</span>));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">% 计算符号出现的概率</span></span><br><span class="line">    totalSymbols = sum(symbolCounts);</span><br><span class="line">    probabilities = symbolCounts / totalSymbols;</span><br><span class="line">    <span class="comment">% 计算自信息量</span></span><br><span class="line">    selfinformation = -<span class="built_in">log2</span>(probabilities);</span><br><span class="line">    <span class="comment">% 按照概率降序排列符号和概率</span></span><br><span class="line">    [sortedProbabilities, indices] = <span class="built_in">sort</span>(probabilities, <span class="string">&#x27;descend&#x27;</span>);</span><br><span class="line">    symbols = uniqueSymbols(indices);</span><br><span class="line">    probabilities = sortedProbabilities;</span><br><span class="line">    <span class="comment">% 返回排序后的符号和对应的概率</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% b.m</span></span><br><span class="line">[CODE, L_ave, yita, H] = HuffmanEncoding(probabilities);</span><br><span class="line"><span class="comment">% 展示输出码字、平均码长和编码效率</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;对应概率:&#x27;</span>,num2str(probabilities)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;对应码字:&#x27;</span>,CODE]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;平均码长:&#x27;</span>,num2str(L_ave)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;信源熵:&#x27;</span>,num2str(H)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;编码效率:&#x27;</span>,num2str(yita)]);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 调用新增函数进行编码并保存</span></span><br><span class="line">file_path = <span class="string">&#x27;data.txt&#x27;</span>;</span><br><span class="line">encodedFilePath = <span class="string">&#x27;encoded_data.txt&#x27;</span>;</span><br><span class="line">decodedFilePath = <span class="string">&#x27;decoded_data.txt&#x27;</span>;</span><br><span class="line">EncodeAndSave(file_path, symbols, CODE, encodedFilePath);</span><br><span class="line">HuffmanDecoding(encodedFilePath, symbols, CODE, file_path, decodedFilePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 使用Huffman码本对文件内容进行编码并保存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EncodeAndSave</span><span class="params">(file_path, symbols, CODE, encodedFilePath)</span></span></span><br><span class="line">    <span class="comment">% 读取原始文件内容</span></span><br><span class="line">    fileID = fopen(file_path, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    originalContent = fscanf(fileID, <span class="string">&#x27;%c&#x27;</span>);</span><br><span class="line">    fclose(fileID);</span><br><span class="line">    <span class="comment">% 初始化编码后的内容字符串</span></span><br><span class="line">    encodedContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">% 遍历原始内容的每个字符</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">numel</span>(originalContent)</span><br><span class="line">        <span class="comment">% 查找当前字符在symbols中的位置</span></span><br><span class="line">        symbolIndex = strfind(symbols, originalContent(<span class="built_in">i</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 如果找到，则根据索引从CODE中获取编码并添加到结果字符串</span></span><br><span class="line">        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(symbolIndex)</span><br><span class="line">            encodedContent = strcat(encodedContent, CODE&#123;symbolIndex&#125;);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            error([<span class="string">&#x27;未在符号集中找到字符：&#x27;</span>, originalContent(<span class="built_in">i</span>)]);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">% 保存编码结果到新文件</span></span><br><span class="line">    fileID = fopen(encodedFilePath, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;%s&#x27;</span>, encodedContent);</span><br><span class="line">    fclose(fileID);</span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;编码内容已保存至：&#x27;</span>, encodedFilePath]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[CODE, L_ave, yita, H]</span> = <span class="title">HuffmanEncoding</span><span class="params">(probabilities)</span></span></span><br><span class="line">    p = probabilities;</span><br><span class="line">    N = <span class="built_in">length</span>(p);</span><br><span class="line">    <span class="comment">% 将概率排序并获得单步码字排序</span></span><br><span class="line">    code = strings(N<span class="number">-1</span>,N);   <span class="comment">% 初始化单步过程的码字</span></span><br><span class="line">    reflect = <span class="built_in">zeros</span>(N<span class="number">-1</span>,N);  <span class="comment">% 初始化位置对应向量</span></span><br><span class="line">    p_SD = p;                <span class="comment">% p_SD为每次得到的概率排序数组</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N<span class="number">-1</span>              <span class="comment">% i表示排序后第几个符号</span></span><br><span class="line">        M = <span class="built_in">length</span>(p_SD);</span><br><span class="line">        [p_SD,reflect(<span class="built_in">i</span>,<span class="number">1</span>:M)] = <span class="built_in">sort</span>(p_SD,<span class="string">&#x27;descend&#x27;</span>);<span class="comment">% 将概率从大到小进行排序</span></span><br><span class="line">        code(<span class="built_in">i</span>,M) = <span class="string">&#x27;1&#x27;</span>;                             <span class="comment">% 概率最小的是1</span></span><br><span class="line">        code(<span class="built_in">i</span>,M<span class="number">-1</span>) = <span class="string">&#x27;0&#x27;</span>;                           <span class="comment">% 概率第二小的暂且定义为0</span></span><br><span class="line">        p_SD(M<span class="number">-1</span>) = p_SD(M<span class="number">-1</span>) + p_SD(M);             <span class="comment">% 将最后两个概率相加</span></span><br><span class="line">        p_SD(M) = [];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 根据位置对应向量和单步过程的码字计算对应码字</span></span><br><span class="line">    CODE = strings(<span class="number">1</span>,N); <span class="comment">% 初始化对应码字</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:N</span><br><span class="line">        column = <span class="built_in">i</span>;</span><br><span class="line">        <span class="keyword">for</span> m = <span class="number">1</span>:N<span class="number">-1</span></span><br><span class="line">            [~, column] = <span class="built_in">find</span>(reflect(m,:) == column);</span><br><span class="line">            CODE(<span class="number">1</span>,<span class="built_in">i</span>) = strcat(CODE(<span class="number">1</span>,<span class="built_in">i</span>),code(m,column));</span><br><span class="line">            <span class="comment">% 将最小的两个概率映射成一个</span></span><br><span class="line">            <span class="keyword">if</span> column == N+<span class="number">1</span>-m</span><br><span class="line">                column = column<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    CODE = reverse(CODE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 计算平均码长</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">        L(<span class="built_in">i</span>) = <span class="built_in">size</span>(char(CODE(<span class="number">1</span>,<span class="built_in">i</span>)),<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    L_ave = sum(L.*p);</span><br><span class="line">    H = sum(-p.*<span class="built_in">log2</span>(p));</span><br><span class="line">    yita = H/L_ave; <span class="comment">% 计算编码效率</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HuffmanDecoding</span><span class="params">(encodedFilePath, symbols, CODE, originalFilePath, decodedFilePath)</span></span></span><br><span class="line">    <span class="comment">% 读取编码后的文件内容</span></span><br><span class="line">    fileID = fopen(encodedFilePath, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    encodedContent = fscanf(fileID, <span class="string">&#x27;%s&#x27;</span>);</span><br><span class="line">    fclose(fileID);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 构建逆码本</span></span><br><span class="line">    inv_CODE = cell(<span class="built_in">size</span>(CODE));</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">numel</span>(CODE)</span><br><span class="line">        inv_CODE&#123;strcmp(CODE, CODE&#123;<span class="built_in">i</span>&#125;)&#125; = symbols(<span class="built_in">i</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 解码过程</span></span><br><span class="line">    decodedContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    currentCode = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">numel</span>(encodedContent)</span><br><span class="line">        currentCode = [currentCode, encodedContent(<span class="built_in">i</span>)];</span><br><span class="line">        foundSymbol = <span class="built_in">false</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">numel</span>(CODE)</span><br><span class="line">            <span class="keyword">if</span> strcmp(currentCode, CODE&#123;<span class="built_in">j</span>&#125;)</span><br><span class="line">                decodedContent = strcat(decodedContent, inv_CODE&#123;<span class="built_in">j</span>&#125;);</span><br><span class="line">                currentCode = <span class="string">&#x27;&#x27;</span>; <span class="comment">% 重置当前码，开始下一个码的匹配</span></span><br><span class="line">                foundSymbol = <span class="built_in">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 保存解码结果到新文件</span></span><br><span class="line">    fileID = fopen(decodedFilePath, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;%s&#x27;</span>, decodedContent);</span><br><span class="line">    fclose(fileID);</span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;解码内容已保存至：&#x27;</span>, decodedFilePath]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 与原始文件进行对比，计算误码率</span></span><br><span class="line">    originalFileContent = fileread(originalFilePath);</span><br><span class="line">    errors = sum(strcmp(decodedContent, originalFileContent) == <span class="number">0</span>);</span><br><span class="line">    totalChars = <span class="built_in">numel</span>(decodedContent);</span><br><span class="line">    errorRate = errors / totalChars;</span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;误码率:&#x27;</span>, num2str(errorRate)]);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% c.m</span></span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 设置参数</span></span><br><span class="line">n = <span class="number">7</span>;</span><br><span class="line">k = <span class="number">4</span>;</span><br><span class="line">file_path = <span class="string">&#x27;encoded_data.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 读取文件内容</span></span><br><span class="line">fid = fopen(file_path, <span class="string">&#x27;rt&#x27;</span>); <span class="comment">% &#x27;rt&#x27; 表示读取文本文件</span></span><br><span class="line">dataStr = fscanf(fid, <span class="string">&#x27;%c&#x27;</span>); <span class="comment">% 读取全部字符</span></span><br><span class="line">fclose(fid);</span><br><span class="line"><span class="comment">% 初始化二进制向量</span></span><br><span class="line">data_bits = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">length</span>(dataStr));</span><br><span class="line"><span class="comment">% 遍历字符串，转换字符到比特</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(dataStr)</span><br><span class="line">    <span class="keyword">if</span> dataStr(<span class="built_in">i</span>) == <span class="string">&#x27;1&#x27;</span> <span class="comment">% 字符&#x27;1&#x27;转换为二进制1</span></span><br><span class="line">        data_bits(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">elseif</span> dataStr(<span class="built_in">i</span>) == <span class="string">&#x27;0&#x27;</span> <span class="comment">% 字符&#x27;0&#x27;转换为二进制0</span></span><br><span class="line">        data_bits(<span class="built_in">i</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 编码解码</span></span><br><span class="line">[Encode0, Encode_str] = HammingEncoding(data_bits, n, k);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 设定错误转移概率的变量范围</span></span><br><span class="line">berRange = <span class="number">0</span>:<span class="number">0.01</span>:<span class="number">0.1</span>; <span class="comment">% 误码率从0到10%，以0.5%为步长</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 初始化曲线数据</span></span><br><span class="line">avgBitErrorRate = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">length</span>(berRange));</span><br><span class="line">blockErrorRate = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">length</span>(berRange));</span><br><span class="line"></span><br><span class="line"><span class="comment">% 遍历每个误码率</span></span><br><span class="line"><span class="keyword">for</span> w = <span class="number">1</span>:<span class="built_in">length</span>(berRange)</span><br><span class="line">    ber = berRange(w);</span><br><span class="line">    [Encode] = simulateBSC(Encode0, ber);</span><br><span class="line">    [Decode, Decode_str] = HammingDecoding(Encode, n, k);    </span><br><span class="line">    <span class="comment">% 计算错误位置</span></span><br><span class="line">    original_bits = data_bits; <span class="comment">% 从原始数据转换而来</span></span><br><span class="line">    decoded_bits = Decode;     <span class="comment">% 从decoded_str转换而来，确保长度一致</span></span><br><span class="line">    errors_positions = [];     <span class="comment">% 初始化错误位置列表</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(original_bits)</span><br><span class="line">        <span class="keyword">if</span> original_bits(<span class="built_in">i</span>) ~= decoded_bits(<span class="built_in">i</span>)</span><br><span class="line">            errors_positions = [errors_positions, <span class="built_in">i</span>]; <span class="comment">% 记录错误位置</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">    total_errors = <span class="built_in">length</span>(errors_positions);</span><br><span class="line">    total_bits = <span class="built_in">length</span>(original_bits);</span><br><span class="line">    <span class="comment">% 计算平均误比特率</span></span><br><span class="line">    average_bit_error_rate = total_errors / total_bits;</span><br><span class="line">    <span class="comment">% 计算平均误比特率</span></span><br><span class="line">    block_error_rate = <span class="number">1</span> - (<span class="number">1</span> - average_bit_error_rate)^n;</span><br><span class="line">          </span><br><span class="line">    <span class="comment">% 记录数据</span></span><br><span class="line">    avgBitErrorRate(w) = average_bit_error_rate;</span><br><span class="line">    blockErrorRate(w) = block_error_rate;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 绘制曲线图</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 绘制曲线图</span></span><br><span class="line"><span class="built_in">plot</span>(berRange, avgBitErrorRate, <span class="string">&#x27;r-&#x27;</span>, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;Marker&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;MarkerSize&#x27;</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">% plot(berRange, blockErrorRate, &#x27;b-&#x27;, &#x27;LineWidth&#x27;, 2, &#x27;Marker&#x27;, &#x27;.&#x27;, &#x27;MarkerSize&#x27;, 6);</span></span><br><span class="line"><span class="comment">% 添加标题和轴标签</span></span><br><span class="line">title(<span class="string">&#x27;平均误比特率与二进制对称信道错误转移概率的关系&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;二进制对称信道错误转移概率 (BER)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;平均误比特率&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 设置坐标轴范围和精度</span></span><br><span class="line">xlim([<span class="number">0</span> <span class="number">0.1</span>]);</span><br><span class="line">ylim([<span class="number">0</span> <span class="number">0.1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 可以选择设置网格线</span></span><br><span class="line">grid on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 生成矩阵和校验矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[G, H]</span> = <span class="title">hamming_code_matrices</span><span class="params">(n, k)</span></span></span><br><span class="line">    [H, G, ~, ~] = hammgen(n-k);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 编码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[encoded_stream, encode_str]</span> = <span class="title">HammingEncoding</span><span class="params">(data_bits, n, k)</span></span></span><br><span class="line">    <span class="comment">% 获取生成矩阵</span></span><br><span class="line">    [G, ~] = hamming_code_matrices(n, k);</span><br><span class="line">    <span class="comment">% disp(G);</span></span><br><span class="line">    <span class="comment">% 初始化编码结果的存储</span></span><br><span class="line">    encoded_stream = [];</span><br><span class="line">    <span class="comment">% 处理整个比特流</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(data_bits) &gt;= k</span><br><span class="line">        <span class="comment">% 对当前k位数据进行编码</span></span><br><span class="line">        group = data_bits(<span class="number">1</span>:k);</span><br><span class="line">        <span class="comment">% 对当前组进行编码</span></span><br><span class="line">        encoded_group = <span class="built_in">mod</span>(group * G, <span class="number">2</span>); </span><br><span class="line">        <span class="comment">% 累积编码结果</span></span><br><span class="line">        encoded_stream = [encoded_stream, encoded_group]; </span><br><span class="line">        <span class="comment">% 移动到下一个k位数据</span></span><br><span class="line">        data_bits = data_bits(k+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    <span class="comment">% 处理剩余不足k位的数据（如果有的话）</span></span><br><span class="line">    <span class="keyword">if</span> ~<span class="built_in">isempty</span>(data_bits)</span><br><span class="line">        <span class="comment">% 补齐到k位</span></span><br><span class="line">        data_bits(<span class="keyword">end</span>+<span class="number">1</span>:k) = <span class="built_in">zeros</span>(<span class="number">1</span>, k - <span class="built_in">length</span>(data_bits));</span><br><span class="line">        group = data_bits;</span><br><span class="line">        encoded_group = <span class="built_in">mod</span>(group * G, <span class="number">2</span>);</span><br><span class="line">        encoded_stream = [encoded_stream, encoded_group];</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    <span class="comment">% 显示最终编码后的比特流</span></span><br><span class="line">    encode_str = num2str(encoded_stream);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 解码（有纠错）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[decoded_data, decoded_str]</span> = <span class="title">HammingDecoding</span><span class="params">(encoded_stream, n, k)</span>    </span></span><br><span class="line">    [~, H] = hamming_code_matrices(n, k);     </span><br><span class="line">    decoded_data = [];    </span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(encoded_stream)&gt;=n</span><br><span class="line">        encoded_group = encoded_stream(<span class="number">1</span>:n);        </span><br><span class="line">        encoded_stream = encoded_stream(n+<span class="number">1</span>:<span class="keyword">end</span>);        </span><br><span class="line">        syndrome = <span class="built_in">mod</span>(encoded_group * H&#x27;, <span class="number">2</span>);</span><br><span class="line">        mat1 = <span class="built_in">eye</span>(n);</span><br><span class="line">        errvec = mat1*H&#x27;;</span><br><span class="line">        <span class="comment">% 如果syndrome非零，则存在错误</span></span><br><span class="line">        <span class="keyword">if</span> any(syndrome)            </span><br><span class="line">            <span class="keyword">for</span> index=<span class="number">1</span>:n</span><br><span class="line">                <span class="keyword">if</span>(syndrome==errvec(index,:))</span><br><span class="line">                    encoded_group = <span class="built_in">mod</span>(encoded_group+mat1(index,:),<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span>             </span><br><span class="line">        decoded_group = encoded_group(n-k+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">        <span class="comment">% 累积解码数据，不忽略任何编码组</span></span><br><span class="line">        decoded_data = [decoded_data, decoded_group];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    decoded_data = [decoded_data, encoded_stream];</span><br><span class="line">    <span class="comment">%disp([&#x27;总纠错数：&#x27;,corrected_errors]);</span></span><br><span class="line">    <span class="comment">% 转换为字符串</span></span><br><span class="line">    decoded_str = num2str(decoded_data);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 二进制对称信道</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[transmittedStream]</span> = <span class="title">simulateBSC</span><span class="params">(encodedStream, ber)</span></span></span><br><span class="line">    <span class="comment">% 模拟二进制对称信道传输编码后的数据流</span></span><br><span class="line">    <span class="comment">% 输入参数:</span></span><br><span class="line">    <span class="comment">%   encodedStream: 编码后的二进制数据流，1xN的二进制数组</span></span><br><span class="line">    <span class="comment">%   ber: 误码率，一个介于0和1之间的标量</span></span><br><span class="line">    <span class="comment">% 输出参数:</span></span><br><span class="line">    <span class="comment">%   transmittedStream: 通过BSC传输后的数据流</span></span><br><span class="line">    <span class="comment">% 获取数据流的长度</span></span><br><span class="line">    streamLength = <span class="built_in">length</span>(encodedStream);</span><br><span class="line">    <span class="comment">% 生成随机错误分布，1表示发生错误，0表示无错误</span></span><br><span class="line">    errorVector = <span class="built_in">rand</span>(streamLength, <span class="number">1</span>) &lt; ber;</span><br><span class="line">    <span class="comment">% 应用错误到数据流</span></span><br><span class="line">    transmittedStream = encodedStream;</span><br><span class="line">    transmittedStream(errorVector == <span class="number">1</span>) = xor(encodedStream(errorVector == <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="comment">% 返回经过错误注入的传输数据流</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% d.m</span></span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 设置参数</span></span><br><span class="line">n = <span class="number">7</span>;</span><br><span class="line">k = <span class="number">4</span>;</span><br><span class="line">file_path = <span class="string">&#x27;encoded_data.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 读取文件内容</span></span><br><span class="line">fid = fopen(file_path, <span class="string">&#x27;rt&#x27;</span>); <span class="comment">% &#x27;rt&#x27; 表示读取文本文件</span></span><br><span class="line">dataStr = fscanf(fid, <span class="string">&#x27;%c&#x27;</span>);  <span class="comment">% 读取全部字符</span></span><br><span class="line">fclose(fid);</span><br><span class="line"><span class="comment">% 初始化二进制向量</span></span><br><span class="line">data_bits = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">length</span>(dataStr));</span><br><span class="line"><span class="comment">% 遍历字符串，转换字符到比特</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(dataStr)</span><br><span class="line">    <span class="keyword">if</span> dataStr(<span class="built_in">i</span>) == <span class="string">&#x27;1&#x27;</span> <span class="comment">% 字符&#x27;1&#x27;转换为二进制1</span></span><br><span class="line">        data_bits(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">elseif</span> dataStr(<span class="built_in">i</span>) == <span class="string">&#x27;0&#x27;</span> <span class="comment">% 字符&#x27;0&#x27;转换为二进制0</span></span><br><span class="line">        data_bits(<span class="built_in">i</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 编码解码</span></span><br><span class="line">[Encode, Encode_str] = HammingEncoding(data_bits, n, k);</span><br><span class="line">ber = <span class="number">0.001</span>; <span class="comment">% 设定误码率为0.1%</span></span><br><span class="line">[G, H] = hamming_code_matrices(n, k);</span><br><span class="line">[Encode] = simulateBSC(Encode, ber);</span><br><span class="line">[Decode, Decode_str] = HammingDecoding(Encode, n, k);</span><br><span class="line">decodedFilePath = <span class="string">&#x27;decoded.txt&#x27;</span>;</span><br><span class="line">fileID = fopen(decodedFilePath, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">fprintf(fileID, <span class="string">&#x27;%s&#x27;</span>, Decode_str);</span><br><span class="line">fclose(fileID);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;解码内容已保存至：&#x27;</span>, decodedFilePath]);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算错误位置</span></span><br><span class="line">original_bits = data_bits; <span class="comment">% 从原始数据转换而来</span></span><br><span class="line">decoded_bits = Decode;     <span class="comment">% 从decoded_str转换而来，确保长度一致</span></span><br><span class="line">errors_positions = [];     <span class="comment">% 初始化错误位置列表</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(original_bits)</span><br><span class="line">    <span class="keyword">if</span> original_bits(<span class="built_in">i</span>) ~= decoded_bits(<span class="built_in">i</span>)</span><br><span class="line">        errors_positions = [errors_positions, <span class="built_in">i</span>]; <span class="comment">% 记录错误位置</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(errors_positions)</span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;第&#x27;</span>, num2str(<span class="built_in">i</span>),<span class="string">&#x27;个错误位置 &#x27;</span>, <span class="string">&#x27;: &#x27;</span>, num2str(errors_positions(<span class="built_in">i</span>))]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 平均误比特率和误组率</span></span><br><span class="line">total_errors = <span class="built_in">length</span>(errors_positions);</span><br><span class="line">total_bits = <span class="built_in">length</span>(original_bits);</span><br><span class="line">average_bit_error_rate = total_errors / total_bits;</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;平均误比特率: &#x27;</span>, num2str(average_bit_error_rate)]);</span><br><span class="line">block_error_rate = <span class="number">1</span> - (<span class="number">1</span> - average_bit_error_rate)^n;</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;误组率: &#x27;</span>, num2str(block_error_rate)]);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 生成矩阵和校验矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[G, H]</span> = <span class="title">hamming_code_matrices</span><span class="params">(n, k)</span></span></span><br><span class="line">    [H, G, ~, ~] = hammgen(n-k);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 编码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[encoded_stream, encode_str]</span> = <span class="title">HammingEncoding</span><span class="params">(data_bits, n, k)</span></span></span><br><span class="line">    <span class="comment">% 获取生成矩阵</span></span><br><span class="line">    [G, ~] = hamming_code_matrices(n, k);</span><br><span class="line">    <span class="comment">% disp(G);</span></span><br><span class="line">    <span class="comment">% 初始化编码结果的存储</span></span><br><span class="line">    encoded_stream = [];</span><br><span class="line">    <span class="comment">% 处理整个比特流</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(data_bits) &gt;= k</span><br><span class="line">        <span class="comment">% 对当前k位数据进行编码</span></span><br><span class="line">        group = data_bits(<span class="number">1</span>:k);</span><br><span class="line">        <span class="comment">% 对当前组进行编码</span></span><br><span class="line">        encoded_group = <span class="built_in">mod</span>(group * G, <span class="number">2</span>); </span><br><span class="line">        <span class="comment">% 累积编码结果</span></span><br><span class="line">        encoded_stream = [encoded_stream, encoded_group]; </span><br><span class="line">        <span class="comment">% 移动到下一个k位数据</span></span><br><span class="line">        data_bits = data_bits(k+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    <span class="comment">% 处理剩余不足k位的数据（如果有的话）</span></span><br><span class="line">    <span class="keyword">if</span> ~<span class="built_in">isempty</span>(data_bits)</span><br><span class="line">        <span class="comment">% 补齐到k位</span></span><br><span class="line">        data_bits(<span class="keyword">end</span>+<span class="number">1</span>:k) = <span class="built_in">zeros</span>(<span class="number">1</span>, k - <span class="built_in">length</span>(data_bits));</span><br><span class="line">        group = data_bits;</span><br><span class="line">        encoded_group = <span class="built_in">mod</span>(group * G, <span class="number">2</span>);</span><br><span class="line">        encoded_stream = [encoded_stream, encoded_group];</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    <span class="comment">% 显示最终编码后的比特流</span></span><br><span class="line">    encode_str = num2str(encoded_stream);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 解码（有纠错）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[decoded_data, decoded_str]</span> = <span class="title">HammingDecoding</span><span class="params">(encoded_stream, n, k)</span>    </span></span><br><span class="line">    [~, H] = hamming_code_matrices(n, k);     </span><br><span class="line">    decoded_data = [];    </span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(encoded_stream)&gt;=n</span><br><span class="line">        encoded_group = encoded_stream(<span class="number">1</span>:n);        </span><br><span class="line">        encoded_stream = encoded_stream(n+<span class="number">1</span>:<span class="keyword">end</span>);        </span><br><span class="line">        syndrome = <span class="built_in">mod</span>(encoded_group * H&#x27;, <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">disp</span>(syndrome);</span><br><span class="line">        mat1 = <span class="built_in">eye</span>(n);</span><br><span class="line">        errvec = mat1*H&#x27;;</span><br><span class="line">        <span class="comment">% 如果syndrome非零，则存在错误</span></span><br><span class="line">        <span class="keyword">if</span> any(syndrome)            </span><br><span class="line">            <span class="keyword">for</span> index=<span class="number">1</span>:n</span><br><span class="line">                <span class="keyword">if</span>(syndrome==errvec(index,:))</span><br><span class="line">                    encoded_group = <span class="built_in">mod</span>(encoded_group+mat1(index,:),<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span>             </span><br><span class="line">        decoded_group = encoded_group(n-k+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">        <span class="comment">% 累积解码数据，不忽略任何编码组</span></span><br><span class="line">        decoded_data = [decoded_data, decoded_group];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    decoded_data = [decoded_data, encoded_stream];</span><br><span class="line">    <span class="comment">%disp([&#x27;总纠错数：&#x27;,corrected_errors]);</span></span><br><span class="line">    <span class="comment">% 转换为字符串</span></span><br><span class="line">    decoded_str = num2str(decoded_data);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 二进制对称信道</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[transmittedStream]</span> = <span class="title">simulateBSC</span><span class="params">(encodedStream, ber)</span></span></span><br><span class="line">    <span class="comment">% 模拟二进制对称信道传输编码后的数据流</span></span><br><span class="line">    <span class="comment">% 输入参数:</span></span><br><span class="line">    <span class="comment">%   encodedStream: 编码后的二进制数据流，1xN的二进制数组</span></span><br><span class="line">    <span class="comment">%   ber: 误码率，一个介于0和1之间的标量</span></span><br><span class="line">    <span class="comment">% 输出参数:</span></span><br><span class="line">    <span class="comment">%   transmittedStream: 通过BSC传输后的数据流</span></span><br><span class="line">    <span class="comment">% 获取数据流的长度</span></span><br><span class="line">    streamLength = <span class="built_in">length</span>(encodedStream);</span><br><span class="line">    <span class="comment">% 生成随机错误分布，1表示发生错误，0表示无错误</span></span><br><span class="line">    errorVector = <span class="built_in">rand</span>(streamLength, <span class="number">1</span>) &lt; ber;</span><br><span class="line">    <span class="comment">% 应用错误到数据流</span></span><br><span class="line">    transmittedStream = encodedStream;</span><br><span class="line">    transmittedStream(errorVector == <span class="number">1</span>) = xor(encodedStream(errorVector == <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="comment">% 返回经过错误注入的传输数据流</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

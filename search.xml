<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>0xGame2024 Crypto WriteUp</title>
      <link href="/post/44080/"/>
      <url>/post/44080/</url>
      
        <content type="html"><![CDATA[<h1 id="0xgame2024-crypto-writeup"><a class="markdownIt-Anchor" href="#0xgame2024-crypto-writeup"></a> 0xGame2024 Crypto WriteUp</h1><p>Author: <em>dawn1ight</em></p><p>记录一下几个值得学习的题目</p><p>Challenge: <a href="https://0xgame.exp10it.cn/">https://0xgame.exp10it.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHCTF2024 WriteUp</title>
      <link href="/post/23197/"/>
      <url>/post/23197/</url>
      
        <content type="html"><![CDATA[<h1 id="shctf2024-writeup"><a class="markdownIt-Anchor" href="#shctf2024-writeup"></a> SHCTF2024 WriteUp</h1><p>Author: <em>dawn1ight</em></p><p>记录一下几个值得学习的题目</p><p>Challenges: <a href="https://shc.tf/">https://shc.tf/</a></p><p>References:</p><ul><li><a href="https://www.cnblogs.com/naby/p/18453402">SHCTF2024-week1-crypto&amp;其他 - Naby - 博客园</a></li><li><a href="https://mp.weixin.qq.com/s/33nH9RHgr-WKun_3s-VDBQ">SHCTF-2024-Week2 官方WP</a></li></ul><hr /><h2 id="week1-baby_mod"><a class="markdownIt-Anchor" href="#week1-baby_mod"></a> [Week1] baby_mod</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">777</span>)</span><br><span class="line">t = getPrime(<span class="number">777</span>)</span><br><span class="line">tmp = getPrime(<span class="number">15</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;<span class="built_in">pow</span>(m,e,n)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;leak = <span class="subst">&#123;p*r-q*t-tmp&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;r = <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;t = <span class="subst">&#123;t&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 45437656714471121627138355157760519584383877487083560638903569231003753429372236070673691857077169730892603519190227245821716759904875309795146278716052074220641458531647162288390402966859091110298425439892694611261350164211397322166134468062254148404013023967282115714260566980579790675450977684598154683785</span></span><br><span class="line"><span class="string">leak = 917729846530514329091476751337548142663910269694651103714041735452546026352121711031281639288281121290785017229906183907137403178781576858736428178204769128767097523395085267085771922696024764050979069087497065064591318989089775212833290963557483734212236438863620201740169796194249006164247654534569614690567400813756683870275745415498464733530190060496080241170104695379710002184233081</span></span><br><span class="line"><span class="string">r = 793229623087740428917628841295655826564196384346081225806981956029244585596768549762915374835268249941097061878943697142938918149057462225787338641617803276170476918982550729029779739695910685814521000495703548880378158347199461860861</span></span><br><span class="line"><span class="string">t = 744863076918695565453771645986298395285065781545937584151938034629094359251294022583665909210010813743205258526086574787553912036903279151072458100492653680636375191905874208421015881385428664217006240902142289558937906046107628918859</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到题目打算直接爆破<code>tmp</code>解方程组的</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>r</mi><mo>−</mo><mi>q</mi><mo>∗</mo><mi>t</mi><mo>−</mo><mi>t</mi><mi>m</mi><mi>p</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>q</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}leak = p*r-q*t-tmp \\n = p*q\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>发现题目没有给<code>n</code></p><p>这里的<code>r</code>和<code>t</code>都大于<code>p</code> <code>q</code>，所以相互取模得</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>r</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>r</mi><mo>−</mo><mi>q</mi><mo>∗</mo><mi>t</mi><mo>−</mo><mi>t</mi><mi>m</mi><mi>p</mi><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>r</mi><mspace linebreak="newline"></mspace><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>+</mo><mi>t</mi><mi>m</mi><mi>p</mi><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>r</mi><mo>=</mo><mo>−</mo><mi>q</mi><mo>∗</mo><mi>t</mi><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>r</mi><mspace linebreak="newline"></mspace><mi>q</mi><mo>=</mo><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>+</mo><mi>t</mi><mi>m</mi><mi>p</mi><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mo>−</mo><mi>t</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>r</mi></mrow><annotation encoding="application/x-tex">leak \mod r = p*r-q*t-tmp \mod r \\leak + tmp \mod r = -q*t \mod r \\q = (leak + tmp) * (-t)^{-1} \mod r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathnormal">t</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></span></p><p>同理：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>=</mo><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>k</mi><mo>+</mo><mi>t</mi><mi>m</mi><mi>p</mi><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>r</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>t</mi></mrow><annotation encoding="application/x-tex">p = (leak+tmp)*(r)^{-1} \mod t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">t</span></span></span></span></span></p><p>exp : <a href="https://www.cnblogs.com/naby/p/18453402">SHCTF2024-week1-crypto&amp;其他 - Naby - 博客园 (cnblogs.com)</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">71234358574362873102364773802615022440394390446444390689714741290273256497624990382730338332158663555287988268595847316457126725465934797593513638874080685234812619607085870642413735129064333224013231845589579968352149987746733082038743926312136617735737911790112644979985292337941440005746915062896129072777</span></span><br><span class="line">leak = <span class="number">2217488402566151788696168373426094740519351868786430669391214527591322807736221920621550927091543088314007690386894840897074614743933753244173854967425133479984993125811498747715413075715060875227040103463552575330232198985262343584404068367662218021241516914268202429825385451154716855517698999217286233212883976929431520295647139310474770195069360507813140653593200423906263689190196941</span></span><br><span class="line">r = <span class="number">646318094023677204527871439846728286610915145770782515880490500338118827547552454143674595295593483857447183764297927877955433524028721434976463867920536240963456378175496414765880178663672652425288097309012713851733051985028662176767</span></span><br><span class="line">t = <span class="number">411152195791514027140198841770649225930812047768916179668614369267330226695072559818563655559461575922343428542543751957306358237424055209296982269437988221098480220776423566575802287022940784911752257706236556835428048277615354900397</span></span><br><span class="line"> </span><br><span class="line">tmp=<span class="number">1</span>&lt;&lt;<span class="number">14</span></span><br><span class="line">tmp=next_prime(tmp)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="built_in">int</span>(tmp).bit_length()==<span class="number">15</span>:</span><br><span class="line">    x=leak+tmp</span><br><span class="line"> </span><br><span class="line">    pr=x%t</span><br><span class="line">    p=pr*invert(r,t)%t</span><br><span class="line"> </span><br><span class="line">    qt=x%r</span><br><span class="line">    q=qt*invert(-t,r)%r</span><br><span class="line">    </span><br><span class="line">    flag=long_to_bytes(<span class="built_in">pow</span>(c,invert(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)),p*q))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;SHCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    tmp=next_prime(tmp)</span><br><span class="line"><span class="comment">#b&#x27;SHCTF&#123;004df497-194a-4adb-a675-498ff80946a4&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="week1-d_known"><a class="markdownIt-Anchor" href="#week1-d_known"></a> [Week1] d_known</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = next_prime(p)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 14754616342385889226523163233456626568583338878447677477264123879922299212851590995108562476976996490186514544769418956576341111197302389433443137591895978122078984343835532649853533922077743108464133594580310257053247234842242258806721334957785422917026938427617572724815559629348765182822868167461354410531375298557821414707229842536823730755256236156265393650672208226959679400363171690605392134085613189512188350291521387717943632410029686096047041138679963736410397635219464470679503925465247560375777761232386822645099986930268675702669789410403561035948651071816164753385550305724927173844685486745218901991290</span></span><br><span class="line"><span class="string">d = 1584002925248818192743719398743841252208212886071330412633566311356101418040520835843589445425449520698531124917534031266832064627999754033796468790621713333536602778546404704190223202391198167915559642317735981777155889248989261442106757720828921863135304104689505591364608198280118905994363913345364214854979318711326654443828720544265881180686096392455926490169653966632767375383674720009286851902968122706469860651407253475439283722507941794337069535019618439934799606721929935849809583256872132873264812878836099510558296186289301055199336236663148519774947000850709818659346623288768867037411488897123286770273</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一次看到已知<code>e</code> <code>c</code> <code>d</code>，未知<code>n</code>的，顺手记录一下</p><p>因为  $$e∗d=1+k(p−1)∗(q−1)$$</p><p>其中e.bit_length = 17 , d.bit_length = 2044，e*d.bit_length = 17+2044=2061</p><p>所以k.bit_length = 2061-2048 = 13</p><p>k的位数较小，直接爆破，得到k后，开根找<code>p</code> <code>q</code></p><p>exp: <a href="https://www.cnblogs.com/naby/p/18453402">SHCTF2024-week1-crypto&amp;其他 - Naby - 博客园 (cnblogs.com)</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line">c = <span class="number">6732251865518539816164424072881268319031331097652330813280683433357801335392912177839752934223666820817426632127352928430012362924774912477109386830642999347655174646486445749282081282131296883166737218186933150962954375021792510359249354608393910760866285720493437099307009772363622740758020450195058117428033257931181355503862561253831338555714889714354329478309157001314105412865222237034290374400091189055727376519273128476126263310458266841590313023188003911952343519869473445661561073623892887752662030827442327135879769080060164402731521556649771103135168057114303776160563813899618546785999749664177453632113</span></span><br><span class="line">d = <span class="number">11371580488052460364061084069704641839174413746220695175554663449524234948335256195937545669217400540775148109520252191887923992650699774976840228129947067273971611578960093458221417649211802998948255284549550327209608951277790691750176306647013841775784127208779682066022248206322448435923296521731067094090722931128289230166731316016559509613812382769439697093763600981220856565912350418801087801159700549049260015100996680924659351921989952140635505978192913908332000472530408585162635570201105801365273780636017489787165910874274076972387901429211792329811097435011802258823111183660801103517212211007626963313585</span></span><br><span class="line"> </span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"> </span><br><span class="line">p_bits=<span class="number">1024</span></span><br><span class="line">q_bits=<span class="number">1024</span></span><br><span class="line"> </span><br><span class="line">k_phi = e*d -<span class="number">1</span></span><br><span class="line">pphi = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(e,<span class="number">2</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> k_phi % k == <span class="number">0</span>:</span><br><span class="line">        tmp = k_phi // k</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(tmp).bit_length()==p_bits+q_bits:</span><br><span class="line">            pphi.append(tmp)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pphi))</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> pphi:</span><br><span class="line">    pp=iroot(k,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    pp=next_prime(pp)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        flag=long_to_bytes(<span class="built_in">pow</span>(c,invert(e,pp-<span class="number">1</span>),pp))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;SHCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            exit()</span><br><span class="line">        pp=next_prime(pp)</span><br><span class="line"><span class="comment">#b&#x27;SHCTF&#123;a47dee42-f097-4aa8-b0a4-5183df80b230&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="week2-worde很大"><a class="markdownIt-Anchor" href="#week2-worde很大"></a> [Week2] worde很大</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = getPrime(<span class="number">200</span>)</span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">dp = d % (p-<span class="number">1</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dp = <span class="subst">&#123;dp&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 88542777790587575958856535465544599238988794938932395236356028878208693584553921119734886663063387114985956647258226878203724318615294722034106396937919235154861105785869874151270067925203729926989428004839944095750101187948993624810926392104761625157561710259470296817872143022024487507072861006495754688653</span></span><br><span class="line"><span class="string">c = 4141222246815895616291413394343312964175715946241779591801652809315536569381063955911406475498467635919469098028234013454537502595095924767681446516595753207198369151203658212276072550342924879998539629809265836285575387813466965366640792684375303199812785289313990143066954674834496302632946904071326609297</span></span><br><span class="line"><span class="string">e = 1245551412820870740174723390060313799694721899963655821368021</span></span><br><span class="line"><span class="string">dp = 3987147738497114215543342475012772407316738649850763986799558233896894884270854903426184789815541134132666857825062494954944564442089304100964792551427901</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一眼看：dp泄露，直接上脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"></span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line">dp = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line"><span class="keyword">if</span>(e*dp%x==<span class="number">1</span>):</span><br><span class="line">p=(e*dp-<span class="number">1</span>)//x+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span>(n%p!=<span class="number">0</span>):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">q=n//p</span><br><span class="line">phin=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gp.invert(e, phin)</span><br><span class="line">m=gp.powmod(c, d, n)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])%<span class="number">2</span>==<span class="number">1</span>):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><p>代码跑起来发现问题：<code>e</code>太大了，<code>for x in range(1, e):</code>循环不了</p><p>这里复习一下dp泄露的推导：<a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#%E7%BB%99n-e-dp-c">RSA | Lazzaro</a></p><center><img src="https://s2.loli.net/2024/10/22/wPOuf9SmZpCsVoe.png"/></center><p>[官方WP](<a href="https://mp.weixin.qq.com/s/33nH9RHgr-WKun_3s-VDBQ">SHCTF-2024-Week2 官方WP</a>)中给出了另一种思路：</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align at position 7: \begin{̲a̲l̲i̲g̲n̲}̲d_p \equiv d \…'>\begin{align}d_p \equiv d \mod (p-1) \\ed \equiv 1 \mod (p-1)(q-1) \\m^{ed_p}\mod n \equiv m^{ed\mod (p-1)} \mod p\equiv m^{1+k(p-1)}\mod p \\Fermat&#039;s\;little\;theorem: a^{p-1} \equiv 1 \mod p \\\therefore m^{1+k(p-1)}\mod p \equiv m \mod p \\\therefore m^{ed_p}\mod n - m \equiv 0 \mod p \\p = gcd(m^{ed_p}\mod n - m , n)\end{align}</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_dp_leak</span>(<span class="params">e,dp,n,c</span>):</span><br><span class="line">    p = gmpy2.gcd(<span class="built_in">pow</span>(<span class="number">5</span>,e*dp,n)-<span class="number">5</span>,n)</span><br><span class="line">    q = n//p</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = gmpy2.invert(e,phi)</span><br><span class="line">        m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">64921145375403083545531864956984072151341856682908111104267811008333409469629440124743589471022387528791249789776590881987854906662741019934835451842451919000617925805744632898434110555454137681326076564563593722826588259739946684132723368750061113163201190149766894752415770470935877082883818815783228793301</span></span><br><span class="line">c = <span class="number">44359153953700249051087265515623429893507549101698748624219639421725336531447633500661794130815898489480094607965932371706122863829042269163279628456581736821883648892589019882848750637212268727873179153330759038867740405957550265592570772766459698597324782564295219919626040670464946117978529709691316881784</span></span><br><span class="line">e = <span class="number">1039743120668324617408742378768011653641207981199791545288831</span></span><br><span class="line">dp = <span class="number">8095244708261074732722010639332938624538458336137147330884467084239259958828296552002478065663880970649018267223959758006546150783644433676150589502506131</span></span><br><span class="line">flag = solve_dp_leak(e,dp,n,c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PatriotCTF 2024 Crypto Writeup</title>
      <link href="/post/11600/"/>
      <url>/post/11600/</url>
      
        <content type="html"><![CDATA[<h1 id="patriotctf-2024-crypto-writeup"><a class="markdownIt-Anchor" href="#patriotctf-2024-crypto-writeup"></a> PatriotCTF 2024 Crypto Writeup</h1><p>Author: <em>dawn1ight</em></p><p>About: PatriotCTF is a beginner-friendly capture-the-flag competition hosted by GMU’s cybersecurity club, MasonCC. All are welcome to participate, including students and security professionals. Challenges will range from beginner to expert, so there should be something for everyone. This is a jeopardy-style CTF, meaning there will be various challenges from the different categories described below.</p><p>Challenges：<a href="https://pctf.competitivecyber.club/challenges">https://pctf.competitivecyber.club/challenges</a></p><p>References:</p><ul><li><a href="https://blog.csdn.net/weixin_52640415/article/details/142500402">https://blog.csdn.net/weixin_52640415/article/details/142500402</a></li><li><a href="https://www.ctfiot.com/206569.html">https://www.ctfiot.com/206569.html</a></li><li><a href="https://s19ma.github.io/posts/PatriotCTF/">https://s19ma.github.io/posts/PatriotCTF/</a></li></ul><hr /><h2 id="bigger-is-better"><a class="markdownIt-Anchor" href="#bigger-is-better"></a> Bigger is Better</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">0xa0d9f425fe1246c25b8c3708b9f6d7747dd5b5e7f79719831c5cbe19fb7bab66ed62719b3fc6090120d2cfe1410583190cd650c32a4151550732b0fc97130e5f02aa26cb829600b6ab452b5b11373ec69d4eaae6c392d92da8bcbea85344af9d4699e36fdca075d33f58049fd0a9f6919f3003512a261a00985dc3d9843a822974df30b81732a91ce706c44bde5ff48491a45a5fa8d5d73bba5022af803ab7bd85250e71fc0254fcf078d21eaa5d38724014a85f679e8a7a1aad6ed22602465f90e6dd8ef95df287628832850af7e3628ad09ff90a6dbdf7a0e6d74f508d2a6235d4eae5a828ac95558bbdf72f39af5641dfe3edb0cdaab362805d926106e2af</span></span><br><span class="line">e = <span class="number">0x5af5dbe4af4005564908a094e0eabb0a921b7482483a753e2a4d560700cb2b2dc9399b608334e05140f54d90fcbef70cec097e3f75395d0c4799d9ec3e670aca41da0892a7b3d038acb7a518be1ced8d5224354ce39e465450c12be653639a8215afb1ba70b1f8f71fc1a0549853998e2337604fca7edac67dd1e7ddeb897308ebf26ade781710e6a2fe4c533a584566ea42068d0452c1b1ecef00a781b6d31fbab893de0c9e46fce69c71cefad3119e8ceebdab25726a96aaf02a7c4a6a38d2f75f413f89064fef14fbd5762599ca8eb3737122374c5e34a7422ea1b3d7c43a110d3209e1c5e23e4eece9e964da2c447c9e5e1c8a6038dc52d699f9324fd6b9</span></span><br><span class="line">c = <span class="number">0x731ceb0ac8f10c8ff82450b61b414c4f7265ccf9f73b8e238cc7265f83c635575a9381aa625044bde7b34ad7cce901fe7512c934b7f6729584d2a77c47e8422c8c0fe2d3dd12aceda8ef904ad5896b971f8b79048e3e2f99f600bf6bac6cad32f922899c00fdc2d21fcf3d0093216bfc5829f02c08ba5e534379cc9118c347763567251c0fe57c92efe0a96c8595bac2c759837211aac914ea3b62aae096ebb8cb384c481b086e660f0c6249c9574289fe91b683609154c066de7a94eafa749c9e92d83a9d473cc88accd9d4c5754ccdbc5aa77ba9a790bc512404a81fc566df42b652a55b9b8ffb189f734d1c007b6cbdb67e14399182016843e27e6d4e5fca</span></span><br></pre></td></tr></table></figure><p>大加密指数e，经典wiener攻击</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> RSAwienerHacker.RSAwienerHacker <span class="keyword">import</span> hack_RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">n = <span class="number">0xa0d9f425fe1246c25b8c3708b9f6d7747dd5b5e7f79719831c5cbe19fb7bab66ed62719b3fc6090120d2cfe1410583190cd650c32a4151550732b0fc97130e5f02aa26cb829600b6ab452b5b11373ec69d4eaae6c392d92da8bcbea85344af9d4699e36fdca075d33f58049fd0a9f6919f3003512a261a00985dc3d9843a822974df30b81732a91ce706c44bde5ff48491a45a5fa8d5d73bba5022af803ab7bd85250e71fc0254fcf078d21eaa5d38724014a85f679e8a7a1aad6ed22602465f90e6dd8ef95df287628832850af7e3628ad09ff90a6dbdf7a0e6d74f508d2a6235d4eae5a828ac95558bbdf72f39af5641dfe3edb0cdaab362805d926106e2af</span></span><br><span class="line">e = <span class="number">0x5af5dbe4af4005564908a094e0eabb0a921b7482483a753e2a4d560700cb2b2dc9399b608334e05140f54d90fcbef70cec097e3f75395d0c4799d9ec3e670aca41da0892a7b3d038acb7a518be1ced8d5224354ce39e465450c12be653639a8215afb1ba70b1f8f71fc1a0549853998e2337604fca7edac67dd1e7ddeb897308ebf26ade781710e6a2fe4c533a584566ea42068d0452c1b1ecef00a781b6d31fbab893de0c9e46fce69c71cefad3119e8ceebdab25726a96aaf02a7c4a6a38d2f75f413f89064fef14fbd5762599ca8eb3737122374c5e34a7422ea1b3d7c43a110d3209e1c5e23e4eece9e964da2c447c9e5e1c8a6038dc52d699f9324fd6b9</span></span><br><span class="line">c = <span class="number">0x731ceb0ac8f10c8ff82450b61b414c4f7265ccf9f73b8e238cc7265f83c635575a9381aa625044bde7b34ad7cce901fe7512c934b7f6729584d2a77c47e8422c8c0fe2d3dd12aceda8ef904ad5896b971f8b79048e3e2f99f600bf6bac6cad32f922899c00fdc2d21fcf3d0093216bfc5829f02c08ba5e534379cc9118c347763567251c0fe57c92efe0a96c8595bac2c759837211aac914ea3b62aae096ebb8cb384c481b086e660f0c6249c9574289fe91b683609154c066de7a94eafa749c9e92d83a9d473cc88accd9d4c5754ccdbc5aa77ba9a790bc512404a81fc566df42b652a55b9b8ffb189f734d1c007b6cbdb67e14399182016843e27e6d4e5fca</span></span><br><span class="line">d = hack_RSA(e,n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="idk-cipher"><a class="markdownIt-Anchor" href="#idk-cipher"></a> idk cipher</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">********************************************</span></span><br><span class="line"><span class="string">*                                          *</span></span><br><span class="line"><span class="string">*                                          *</span></span><br><span class="line"><span class="string">********************************************</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># WARNING: This is a secret key. Do not expose it.</span></span><br><span class="line">srt_key = <span class="string">&#x27;secretkey&#x27;</span> <span class="comment"># // <span class="doctag">TODO:</span> change the placeholder</span></span><br><span class="line">usr_input = <span class="built_in">input</span>(<span class="string">&quot;\t:&quot;</span>*<span class="number">10</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(usr_input) &lt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;PT must be greater than 1&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(usr_input) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;PT can only be an even number&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> usr_input.isalnum():</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Only alphabets and numbers supported&quot;</span>)</span><br><span class="line"><span class="comment"># WARNING: Reversing input might expose sensitive information.</span></span><br><span class="line">rsv_input = usr_input[::-<span class="number">1</span>]</span><br><span class="line">output_arr = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(usr_input) / <span class="number">2</span>)):</span><br><span class="line">    c1 = <span class="built_in">ord</span>(usr_input[i])</span><br><span class="line">    c2 = <span class="built_in">ord</span>(rsv_input[i])</span><br><span class="line">    enc_p1 = <span class="built_in">chr</span>(c1 ^ <span class="built_in">ord</span>(srt_key[i % <span class="built_in">len</span>(srt_key)]))</span><br><span class="line">    enc_p2 = <span class="built_in">chr</span>(c2 ^ <span class="built_in">ord</span>(srt_key[i % <span class="built_in">len</span>(srt_key)]))</span><br><span class="line">    output_arr.append(enc_p1)</span><br><span class="line">    output_arr.append(enc_p2)</span><br><span class="line"><span class="comment"># WARNING: Encoded text should not be decoded without proper authorization.</span></span><br><span class="line">encoded_val = <span class="string">&#x27;&#x27;</span>.join(output_arr)</span><br><span class="line">b64_enc_val = base64.b64encode(encoded_val.encode())</span><br><span class="line">R = <span class="string">&quot;R&quot;</span>*<span class="number">20</span></span><br><span class="line">E = <span class="string">&quot;E&quot;</span>*<span class="number">5</span></span><br><span class="line">EXCLAMATION = <span class="string">&quot;!&quot;</span>*<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ULTRA SUPE<span class="subst">&#123;R&#125;</span> SECUR<span class="subst">&#123;E&#125;</span> Encoded Cipher Text<span class="subst">&#123;EXCLAMATION&#125;</span>:&quot;</span>, b64_enc_val.decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>字符串加密，对加密脚本逆向可得解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">srt_key = <span class="string">&#x27;secretkey&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设这是从上面的加密脚本中得到的Base64编码的字符串</span></span><br><span class="line">b64_enc_val = <span class="string">&quot;QRVWUFdWEUpdXEVGCF8DVEoYEEIBBlEAE0dQAURFD1I=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码Base64字符串</span></span><br><span class="line">encoded_val = base64.b64decode(b64_enc_val).decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密过程</span></span><br><span class="line">decoded_arr1 = []</span><br><span class="line">decoded_arr2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encoded_val), <span class="number">2</span>):</span><br><span class="line">    c1 = <span class="built_in">ord</span>(encoded_val[i])</span><br><span class="line">    c2 = <span class="built_in">ord</span>(encoded_val[i + <span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用相同的密钥对字符进行异或操作</span></span><br><span class="line">    dec_p1 = <span class="built_in">chr</span>(c1 ^ <span class="built_in">ord</span>(srt_key[i // <span class="number">2</span> % <span class="built_in">len</span>(srt_key)]))</span><br><span class="line">    dec_p2 = <span class="built_in">chr</span>(c2 ^ <span class="built_in">ord</span>(srt_key[i // <span class="number">2</span> % <span class="built_in">len</span>(srt_key)]))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加解密后的字符到数组中</span></span><br><span class="line">    decoded_arr1.append(dec_p1)</span><br><span class="line">    decoded_arr2.append(dec_p2)</span><br><span class="line"></span><br><span class="line">first_half = decoded_arr1</span><br><span class="line">second_half = decoded_arr2[::-<span class="number">1</span>]  <span class="comment"># 反转第二部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并两部分得到最终解密结果</span></span><br><span class="line">usr_input = <span class="string">&#x27;&#x27;</span>.join(first_half + second_half)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Input:&quot;</span>, usr_input)</span><br></pre></td></tr></table></figure><h2 id="high-roller"><a class="markdownIt-Anchor" href="#high-roller"></a> High Roller</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3.10</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">random.seed(<span class="built_in">int</span>(time.time()))</span><br><span class="line">p, q = getPrime(<span class="number">512</span>, random.randbytes), getPrime(<span class="number">512</span>, random.randbytes)</span><br><span class="line">n = p*q</span><br><span class="line">e = getPrime(<span class="number">512</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> GCD(e, phi) == <span class="number">1</span></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line"></span><br><span class="line">key = RSA.construct((n, e, d, p, q))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;public_key.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(key.publickey().export_key(<span class="string">&quot;PEM&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;private_key.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(key.export_key(<span class="string">&quot;PEM&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIHdMA0GCSqGSIb3DQEBAQUAA4HLADCBxwKBgQCMdauT2revYJrutp7eqQfrMkse</span><br><span class="line">TqfgRdLlMddaVRxiG04qJneVtpzkeLQTZqniJWx5YsUwMDeISeQjmVkr2a+Ob9S8</span><br><span class="line">+xsqVQ0XTW3xPjwKaZhW8jXAlX13ClhAxk1FvPbl6ASsPGUMX6gRSXArRYFx3Kev</span><br><span class="line">C9xng/ZKEhsC5FzBBwJBALKsZCm9FGHXvyJChFDt7vDZUCyU1jbOgS9EhNz+HrrU</span><br><span class="line">K9OCgOoZGfcjIHAcrM+w4AdF48NQELqttmKlcko6ock=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>openssl读取公钥</p><p><code>openssl rsa -pubin -in public.pem</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">9357885447383373532894895505085381556066479232870333782284357317530689434635519527644215046975239651802146048650000941858355721661518511867620441456288201</span></span><br><span class="line">n = <span class="number">98634120039089098694716541094010585689286433311349526663366541706397717606400616707193452046001090589663396231287196347120718771479123852243352063594083947086372781079441835003204477521976780690108126553882967223715412003897334440698277808850595475155858935951484345749354296015842014107721137899755292901639</span></span><br></pre></td></tr></table></figure><p>提取出了n,e，但分解不出来</p><p>注意到<code>random.seed(int(time.time()))</code></p><blockquote><p>The seed was used is <code>int(time.time())</code> and converted into .pem file so we can use command to find time</p><p>给了公钥和p,q的生成方法，是用时间作种子，求利用random来求的。根据题目文件的时间向前可以爆破出来。</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stat -c &#x27;%n %y&#x27; public_key.pem</span><br></pre></td></tr></table></figure><p>看这里复习一下stat命令 <a href="https://blog.csdn.net/u012294618/article/details/72630092">https://blog.csdn.net/u012294618/article/details/72630092</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">pubkey = RSA.import_key(<span class="built_in">open</span>(<span class="string">&quot;public_key.pem&quot;</span>, <span class="string">&quot;r&quot;</span>).read())</span><br><span class="line">c = bytes_to_long(<span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>).read())</span><br><span class="line">time_i = <span class="built_in">int</span>(time.mktime((<span class="number">2024</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(time_i, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    random.seed(i)</span><br><span class="line">    p, q = getPrime(<span class="number">512</span>, random.randbytes), getPrime(<span class="number">512</span>, random.randbytes)</span><br><span class="line">    <span class="keyword">if</span> p*q == pubkey.n:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">pow</span>(pubkey.e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, d, pubkey.n)))</span><br></pre></td></tr></table></figure><h2 id="textbook-schnorr-right"><a class="markdownIt-Anchor" href="#textbook-schnorr-right"></a> Textbook Schnorr right??</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EllipticCurveCrypto</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Elliptic Curve Cryptography using the secp256k1 curve.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.p = [&lt;REDACTED&gt;]</span><br><span class="line">        self.q = [&lt;REDACTED&gt;]</span><br><span class="line">        self.K = GF(self.p)</span><br><span class="line">        self.a = self.K([&lt;REDACTED&gt;])</span><br><span class="line">        self.b = self.K([&lt;REDACTED&gt;])</span><br><span class="line">        self.curve = EllipticCurve(self.K, [self.a, self.b])</span><br><span class="line">        self.generator = self.curve(</span><br><span class="line">            [&lt;REDACTED&gt;],</span><br><span class="line">            [&lt;REDACTED&gt;],</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># Generate private and public keys</span></span><br><span class="line">        self.private_key = secrets.randbelow(self.q)</span><br><span class="line">        self.public_key = self.private_key * self.generator</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Public Key: <span class="subst">&#123;self.public_key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bytes_to_int</span>(<span class="params">b</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(b, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">int_to_bytes</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">return</span> i.to_bytes((i.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_hash</span>(<span class="params">self, target</span>):</span><br><span class="line">        hash_int = <span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(target).encode()).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> hash_int % self.q</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, message</span>):</span><br><span class="line">        r = secrets.randbelow(self.q)</span><br><span class="line">        R = r * self.generator</span><br><span class="line">        R_int = <span class="built_in">int</span>(R.xy()[<span class="number">0</span>] + R.xy()[<span class="number">1</span>])</span><br><span class="line">        h = self.compute_hash(R_int | message)</span><br><span class="line">        s = (r + self.private_key * h) % self.q</span><br><span class="line">        <span class="keyword">return</span> s, R</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, message, signature</span>):</span><br><span class="line">        s, R = signature</span><br><span class="line">        R_int = <span class="built_in">int</span>(R.xy()[<span class="number">0</span>] + R.xy()[<span class="number">1</span>])</span><br><span class="line">        h = self.compute_hash(R_int | message)</span><br><span class="line">        left_side = s * self.generator</span><br><span class="line">        right_side = R + h * self.public_key</span><br><span class="line">        <span class="keyword">return</span> left_side == right_side</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeoutInput</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TimeoutError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Custom exception for input timeout.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timeout_handler</span>(<span class="params">signum, frame</span>):</span><br><span class="line">        <span class="keyword">raise</span> TimeoutInput.TimeoutError(<span class="string">&quot;Input timed out!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_input</span>(<span class="params">prompt, timeout=<span class="number">10</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get user input with a timeout.</span></span><br><span class="line"><span class="string">        :param prompt: The prompt to display to the user.</span></span><br><span class="line"><span class="string">        :param timeout: The time limit for input in seconds.</span></span><br><span class="line"><span class="string">        :return: The user&#x27;s input as a string.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Set the signal for a timeout</span></span><br><span class="line">        signal.signal(signal.SIGALRM, TimeoutInput.timeout_handler)</span><br><span class="line">        signal.alarm(timeout)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user_input = <span class="built_in">input</span>(prompt)</span><br><span class="line">            signal.alarm(<span class="number">0</span>)  <span class="comment"># Cancel the timer</span></span><br><span class="line">            <span class="keyword">return</span> user_input</span><br><span class="line">        <span class="keyword">except</span> TimeoutInput.TimeoutError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No input received within the time limit.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_flag</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Read and display the flag from the &#x27;flag.txt&#x27; file.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            flag = f.read().strip()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Congratulations! Your flag is: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Flag file not found.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_message</span>(<span class="params">separator, words, signature, ecc_instance</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Verify the provided signature for the message constructed from words and separator.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    message_bytes = separator.join(word.encode() <span class="keyword">for</span> word <span class="keyword">in</span> words) + separator</span><br><span class="line">    message_int = <span class="built_in">int</span>.from_bytes(message_bytes, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> ecc_instance.verify(message_int, signature):</span><br><span class="line">        display_flag()</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Verification failed.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># Initialize the elliptic curve cryptography instance</span></span><br><span class="line">    ecc = EllipticCurveCrypto()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Test the signing and verification process</span></span><br><span class="line">    test_message = ecc.bytes_to_int(<span class="string">&quot;test&quot;</span>.encode())</span><br><span class="line">    s_test, R_test = ecc.sign(test_message)</span><br><span class="line">    <span class="keyword">assert</span> ecc.verify(test_message, (s_test, R_test))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Regular expression patterns for input validation</span></span><br><span class="line">    separator_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^[0-9a-fA-F]&#123;2&#125;$&#x27;</span>)</span><br><span class="line">    word_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^[0-9a-fA-F]&#123;6&#125;$&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get separator input</span></span><br><span class="line">    separator_hex = TimeoutInput.get_input(<span class="string">&quot;Enter separator as a hex value (2 digits): &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> separator_pattern.<span class="keyword">match</span>(separator_hex):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid separator format.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    separator = <span class="built_in">bytes</span>.fromhex(separator_hex)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get words input</span></span><br><span class="line">    words_hex = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        prompt = <span class="string">f&quot;Enter 3-letter word <span class="subst">&#123;i + <span class="number">1</span>&#125;</span> as a hex value (6 digits): &quot;</span></span><br><span class="line">        word_hex = TimeoutInput.get_input(prompt)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> word_pattern.<span class="keyword">match</span>(word_hex):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Invalid word format.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">        words_hex.append(word_hex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        words = [<span class="built_in">bytes</span>.fromhex(word_hex).decode(<span class="string">&#x27;ascii&#x27;</span>) <span class="keyword">for</span> word_hex <span class="keyword">in</span> words_hex]</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid ASCII encoding in words.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(<span class="built_in">len</span>(word) != <span class="number">3</span> <span class="keyword">for</span> word <span class="keyword">in</span> words):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Words must be 3-letter ASCII words.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get signature components</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        hex_x_R = <span class="built_in">input</span>(<span class="string">&quot;Enter the x-coordinate of signature R (in hex): &quot;</span>)</span><br><span class="line">        x_R = <span class="built_in">int</span>(hex_x_R, <span class="number">16</span>)</span><br><span class="line">        hex_y_R = <span class="built_in">input</span>(<span class="string">&quot;Enter the y-coordinate of signature R (in hex): &quot;</span>)</span><br><span class="line">        y_R = <span class="built_in">int</span>(hex_y_R, <span class="number">16</span>)</span><br><span class="line">        hex_signature_s = <span class="built_in">input</span>(<span class="string">&quot;Enter signature s (in hex): &quot;</span>)</span><br><span class="line">        signature_s = <span class="built_in">int</span>(hex_signature_s, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Invalid input for signature components.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt; signature_s &lt; ecc.q):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Illegal value of s.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Construct the point R</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        R = ecc.curve(x_R, y_R)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Point R does not lie on the curve.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Verify the message and signature</span></span><br><span class="line">    verify_message(separator, words, (signature_s, R), ecc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>这个题用了schnorr-digital-signature数字签名算法</p><p>它是将经典的<a href="https://www.geeksforgeeks.org/schnorr-digital-signature/">schnorr数字签名算法</a>移到secp256k1椭圆曲线上</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 经典Schnorr签名算法</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个大素数 p 和它的大素因子 q</span></span><br><span class="line">p = <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000001</span>  <span class="comment"># 一个大素数</span></span><br><span class="line">q = <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span>  <span class="comment"># 大素因子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个原根 g</span></span><br><span class="line">g = <span class="number">2</span>  <span class="comment"># 通常选择 2 作为原根</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成签名者的私钥 a 和公钥 A</span></span><br><span class="line">a = random.randint(<span class="number">1</span>, q - <span class="number">1</span>)  <span class="comment"># 私钥 a</span></span><br><span class="line">A = <span class="built_in">pow</span>(g, a, p)  <span class="comment"># 公钥 A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 哈希函数 H</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_message</span>(<span class="params">message, x</span>):</span><br><span class="line">    combined = <span class="string">f&quot;<span class="subst">&#123;message&#125;</span><span class="subst">&#123;x&#125;</span>&quot;</span>.encode()</span><br><span class="line">    h = hashlib.sha256(combined).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(h, <span class="number">16</span>) % q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 签名函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, a, g, p, q</span>):</span><br><span class="line">    r = random.randint(<span class="number">1</span>, q - <span class="number">1</span>)  <span class="comment"># 随机数 r</span></span><br><span class="line">    X = <span class="built_in">pow</span>(g, r, p)  <span class="comment"># 计算 X</span></span><br><span class="line">    e = hash_message(message, X)  <span class="comment"># 计算 e</span></span><br><span class="line">    s = (r + a * e) % q  <span class="comment"># 计算 s</span></span><br><span class="line">    <span class="keyword">return</span> (e, s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">message, signature, A, g, p, q</span>):</span><br><span class="line">    e, s = signature</span><br><span class="line">    X_prime = (<span class="built_in">pow</span>(A, e, p) * <span class="built_in">pow</span>(g, s, p)) % p  <span class="comment"># 计算 X&#x27;</span></span><br><span class="line">    e_prime = hash_message(message, X_prime)  <span class="comment"># 计算 e&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> e_prime == e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例消息</span></span><br><span class="line">message = <span class="string">&quot;Hello, Schnorr!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成签名</span></span><br><span class="line">signature = sign(message, a, g, p, q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证签名</span></span><br><span class="line">is_valid = verify(message, signature, A, g, p, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Signature is <span class="subst">&#123;<span class="string">&#x27;valid&#x27;</span> <span class="keyword">if</span> is_valid <span class="keyword">else</span> <span class="string">&#x27;invalid&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 椭圆曲线上的Schnorr签名</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA256</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 secp256k1 椭圆曲线参数</span></span><br><span class="line">p = <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F</span></span><br><span class="line">q = <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span></span><br><span class="line">curve = EllipticCurve(GF(p), [<span class="number">0</span>, <span class="number">7</span>])</span><br><span class="line">G = curve(<span class="number">0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798</span>, <span class="number">0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">private_key = Integer(get_random_bytes(<span class="number">32</span>).<span class="built_in">hex</span>(), base=<span class="number">16</span>) % q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算公钥</span></span><br><span class="line">public_key = private_key * G</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_message</span>(<span class="params">message, x</span>):</span><br><span class="line">    combined = <span class="string">f&quot;<span class="subst">&#123;message&#125;</span><span class="subst">&#123;x&#125;</span>&quot;</span>.encode()</span><br><span class="line">    h = SHA256.new(combined).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(h, <span class="number">16</span>) % q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, private_key, G, q</span>):</span><br><span class="line">    <span class="comment"># 选择随机数 r</span></span><br><span class="line">    r = Integer(get_random_bytes(<span class="number">32</span>).<span class="built_in">hex</span>(), base=<span class="number">16</span>) % q</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算点 R</span></span><br><span class="line">    R = r * G</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算挑战值 e</span></span><br><span class="line">    e = hash_message(message, R.xy()[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算签名分量 s</span></span><br><span class="line">    s = (r + e * private_key) % q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (R.xy()[<span class="number">0</span>], s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">message, signature, public_key, G, q</span>):</span><br><span class="line">    x_R, s = signature</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算挑战值 e</span></span><br><span class="line">    e = hash_message(message, x_R)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算验证点 U</span></span><br><span class="line">    U = s * G - e * public_key</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查验证点的 x 坐标是否等于签名中的 x_R</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(U.xy()[<span class="number">0</span>]) == x_R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例消息</span></span><br><span class="line">message = <span class="string">&quot;Hello, Schnorr!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成签名</span></span><br><span class="line">signature = sign(message, private_key, G, q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证签名</span></span><br><span class="line">is_valid = verify(message, signature, public_key, G, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Signature is <span class="subst">&#123;<span class="string">&#x27;valid&#x27;</span> <span class="keyword">if</span> is_valid <span class="keyword">else</span> <span class="string">&#x27;invalid&#x27;</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以看出题目给出的Schnorr签名算法问题出在<code>compute_hash</code>函数上</p><p>正常的算法中<code>e = H(M||X)</code> where H() is the hash function</p><p>而题目给出的是<code>e = H(M|X)</code></p><p>所以当输入为全1时得到的hash为固定值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">separator = <span class="string">&quot;FF&quot;</span></span><br><span class="line">payload = <span class="string">&quot;7F7F7F&quot;</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;Enter separator as a hex value (2 digits): &quot;</span>, separator.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 1 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 2 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 3 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 4 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 5 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 6 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 7 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter 3-letter word 8 as a hex value (6 digits): &quot;</span>,payload.encode().strip())</span><br><span class="line"></span><br><span class="line">TARGET = <span class="number">0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span></span><br><span class="line">MESSAGE_OR_MASK = <span class="built_in">int</span>(<span class="string">&quot;7F7F7FFF&quot;</span> * <span class="number">8</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_hash</span>(<span class="params">target</span>):</span><br><span class="line">    hash_int = <span class="built_in">int</span>(hashlib.sha256(<span class="built_in">str</span>(target).encode()).hexdigest(), <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> hash_int % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_sig</span>(<span class="params">s, R_test</span>):</span><br><span class="line">    R_test_str = <span class="built_in">str</span>(R_test).strip(<span class="string">&quot;()&quot;</span>)</span><br><span class="line">    R_test_parts = [part.strip() <span class="keyword">for</span> part <span class="keyword">in</span> R_test_str.split(<span class="string">&quot;:&quot;</span>)]</span><br><span class="line">    xR = R_test_parts[<span class="number">0</span>]</span><br><span class="line">    yR = R_test_parts[<span class="number">1</span>]</span><br><span class="line">    sendxR = <span class="built_in">hex</span>(xR)[<span class="number">2</span>:]</span><br><span class="line">    sendyR = <span class="built_in">hex</span>(yR)[<span class="number">2</span>:]</span><br><span class="line">    send_s = <span class="built_in">hex</span>(s)[<span class="number">2</span>:]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;sendxR = &#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;sendyR = &#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;send_s = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Enter the x-coordinate of signature R (in hex):&quot;</span>, sendxR)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;Enter the y-coordinate of signature R (in hex):&quot;</span>, sendyR)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;EEnter signature s (in hex): &quot;</span>, send_s)</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruforce_signature</span>(<span class="params">P, G</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Brute-forcing to find a valid signature...&quot;</span>)</span><br><span class="line">    h = compute_hash(TARGET)</span><br><span class="line">    hP = h*P</span><br><span class="line">    s = secrets.randbelow(n)</span><br><span class="line">    sG = s*G</span><br><span class="line">    <span class="keyword">with</span> tqdm(total=<span class="number">0</span>, unit=<span class="string">&#x27; iterations&#x27;</span>, unit_scale=<span class="literal">True</span>) <span class="keyword">as</span> pbar:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            R_test = sG - hP</span><br><span class="line">            R_test_binary = <span class="built_in">int</span>(R_test.xy()[<span class="number">0</span>] + R_test.xy()[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> (R_test_binary | MESSAGE_OR_MASK) == TARGET:</span><br><span class="line">                <span class="keyword">assert</span> s*G - h*P == R_test</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;found&quot;</span>)</span><br><span class="line">                verify_sig(s, R_test)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            s = (s*<span class="number">2</span>) %n</span><br><span class="line">            sG = <span class="number">2</span>*sG</span><br><span class="line">            pbar.update(<span class="built_in">int</span>(<span class="number">1</span>))</span><br><span class="line">bruforce_signature(P, G)</span><br></pre></td></tr></table></figure><h2 id="hard-to-implement"><a class="markdownIt-Anchor" href="#hard-to-implement"></a> Hard to Implement</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> external <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> socketserver, signal</span><br><span class="line"> </span><br><span class="line">listen = <span class="number">1337</span></span><br><span class="line">attempts = <span class="number">1500</span></span><br><span class="line">flag = getflag()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key,plaintext</span>):</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">pt = pad(plaintext + flag.encode(), <span class="number">16</span>)</span><br><span class="line"><span class="keyword">return</span> cipher.encrypt(pt).<span class="built_in">hex</span>()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serve</span>(<span class="params">req</span>):</span><br><span class="line">key = get_random_bytes(<span class="number">16</span>)</span><br><span class="line">tries = <span class="number">0</span></span><br><span class="line">req.sendall(<span class="string">b&quot;Thank you for using our secure communications channel.\nThis channel uses top-shelf military-grade encryption.\nIf you are not the intended recepient, you can&#x27;t read our secret.&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> tries &lt; attempts:</span><br><span class="line">req.sendall(<span class="string">b&#x27;\n(&#x27;</span>+<span class="built_in">str</span>.encode(<span class="built_in">str</span>(tries))+<span class="string">b&#x27;/&#x27;</span>+<span class="built_in">str</span>.encode(<span class="built_in">str</span>(attempts))+<span class="string">b&#x27;) &#x27;</span>)</span><br><span class="line">req.sendall(<span class="string">b&#x27;Send challenge &gt; &#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">ct = encrypt(key, req.recv(<span class="number">4096</span>).strip(<span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line">req.sendall(<span class="string">b&quot;Response &gt; &quot;</span> + ct.encode() + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">req.sendall(<span class="string">b&quot;An error occured!\n&quot;</span>)</span><br><span class="line">tries += <span class="number">1</span></span><br><span class="line">req.sendall(<span class="string">b&#x27;\nMax attempts exceeded, have a good day.\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">incoming</span>(socketserver.BaseRequestHandler):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">signal.alarm(<span class="number">1500</span>)</span><br><span class="line">req = self.request</span><br><span class="line">serve(req)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">socketserver.TCPServer.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">server = ReusableTCPServer((<span class="string">&quot;0.0.0.0&quot;</span>, listen), incoming)</span><br><span class="line">server.serve_forever()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>AES ECB的padding oracle:  <a href="https://lazzzaro.github.io/2020/11/07/crypto-%E5%9D%97%E5%AF%86%E7%A0%81/#%E6%A8%A1%E5%BC%8F%E6%94%BB%E5%87%BB-1">块密码 | Lazzaro (lazzzaro.github.io)</a></p><blockquote><p>1.由于是ECB的模式，所以当我们输入十五个’0’后，服务会将十五个<code>’0’+flag</code>加密，而此时第一组就是十五个’0’和flag的第一个字符。即，返回的明文的第一组是<code>’0’*15 + flag[0]</code>的密文。</p><p>2.我们遍历0-255，发送<code>’0’*15+chr(i)</code>，看返回的密文是不是和最初获得的密文的第一组一致，如果一致，那么此时的chr(i)就是flag的第一位。</p><p>3.有了第一位我们就可以发送<code>’0’*14+flag[0]</code>过去，此时返回的第一组密文就是<code>’0’*14+flag[0]+flag[1]</code>的密文了，我们继续用第2步的方法就可以恢复flag[1]了。</p><p>4.如此循环往复，逐位爆破flag。</p></blockquote><p>exp: [<a href="https://blog.csdn.net/weixin_52640415/article/details/142500402">Patriot CTF 2024]-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oracle</span>(<span class="params">data</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;Send challenge &gt; &#x27;</span>, data)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;Response &gt; &quot;</span>)</span><br><span class="line">    s=r.recvline().strip().decode()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(s)</span><br><span class="line"> </span><br><span class="line">r=remote(<span class="string">&#x27;chal.competitivecyber.club&#x27;</span>, <span class="number">6001</span>)</span><br><span class="line">flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    padding=<span class="string">b&#x27;A&#x27;</span>*(<span class="number">32</span>-<span class="number">1</span>-i)</span><br><span class="line">    test=oracle(padding) <span class="comment">#尾部漏出flag  1个字符</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> string.printable:</span><br><span class="line">        <span class="keyword">if</span> oracle(padding+flag+c.encode())[:<span class="number">32</span>]==test[:<span class="number">32</span>]: <span class="comment">#pad+已知的flag+猜</span></span><br><span class="line">            flag=flag+c.encode()</span><br><span class="line">            <span class="built_in">print</span>(flag, i)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF 2024 Crypto WriteUp</title>
      <link href="/post/30110/"/>
      <url>/post/30110/</url>
      
        <content type="html"><![CDATA[<h1 id="sctf-2024-crypto-writeup"><a class="markdownIt-Anchor" href="#sctf-2024-crypto-writeup"></a> SCTF 2024 Crypto WriteUp</h1><p>Author: <em>dawn1ight</em></p><p>这次题目质量都可以，每一个题都能学到新东西。</p><p>References:</p><ul><li><a href="https://blog.wm-team.cn/index.php/archives/82/">SCTF 2024 By W&amp;M - W&amp;M Team (wm-team.cn)</a></li><li><a href="https://xz.aliyun.com/t/15764">SCTF2024-Crypto - 先知社区</a></li></ul><hr /><h2 id="signin"><a class="markdownIt-Anchor" href="#signin"></a> Signin</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nbits</span>):</span><br><span class="line">        self.nbits = nbits</span><br><span class="line">        self.p, self.q = self.getPrimes()</span><br><span class="line">        self.n = self.p*self.q</span><br><span class="line">        self.Gift = self.Gift()</span><br><span class="line">        self.priv, self.pub = self.keyGen()</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPrimes</span>(<span class="params">self</span>):</span><br><span class="line">        nbits = self.nbits</span><br><span class="line">        p = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        q = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">while</span> p == q:</span><br><span class="line">            q = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> p,q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Gift</span>(<span class="params">self</span>):</span><br><span class="line">        p,q = self.p, self.q</span><br><span class="line">        <span class="keyword">return</span> (p^<span class="number">2</span> + p + <span class="number">1</span>)*(q^<span class="number">2</span> + q + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyGen</span>(<span class="params">self</span>):</span><br><span class="line">        nbits = self.nbits</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            d = randint(<span class="number">2</span>^(nbits//<span class="number">4</span>),<span class="number">2</span>^(nbits//<span class="number">2</span>))</span><br><span class="line">            <span class="keyword">if</span> gcd(d,self.Gift) != <span class="number">1</span>:</span><br><span class="line">                d = randint(<span class="number">2</span>^(nbits//<span class="number">4</span>),<span class="number">2</span>^(nbits//<span class="number">2</span>))</span><br><span class="line">            e = <span class="built_in">pow</span>(d,-<span class="number">1</span>,self.phi)</span><br><span class="line">            <span class="keyword">return</span> (self.p,self.q,self.n,e,d),(self.n,e)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">RRR = RSA(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">bp = long_to_bytes(<span class="built_in">int</span>(RRR.p))</span><br><span class="line">FLAG = <span class="string">&#x27;SCTF&#123;&#x27;</span>+md5(bp).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N = <span class="subst">&#123;RRR.n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;RRR.pub[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">N = 32261421478213846055712670966502489204755328170115455046538351164751104619671102517649635534043658087736634695616391757439732095084483689790126957681118278054587893972547230081514687941476504846573346232349396528794022902849402462140720882761797608629678538971832857107919821058604542569600500431547986211951</span></span><br><span class="line"><span class="string">e = 334450817132213889699916301332076676907807495738301743367532551341259554597455532787632746522806063413194057583998858669641413549469205803510032623432057274574904024415310727712701532706683404590321555542304471243731711502894688623443411522742837178384157350652336133957839779184278283984964616921311020965540513988059163842300284809747927188585982778365798558959611785248767075169464495691092816641600277394649073668575637386621433598176627864284154484501969887686377152288296838258930293614942020655916701799531971307171423974651394156780269830631029915305188230547099840604668445612429756706738202411074392821840</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开始算了很久，发现题中的<code>e = pow(d,-1,self.phi)</code>中的<code>self.phi</code>并没有在<code>__init__(self, nbits)</code>中说明</p><p>结合题目提示：Oops! Ψ is not good for encrypt, but good for gift.</p><p>这个<code>self.phi = self.Gift</code>（实际上<code>gcd(d,self.Gift) != 1</code>也是提示这个）</p><p>然后就是推导</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>e</mi><mo>×</mo><mi>d</mi><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi><mi>h</mi><mi>i</mi><mspace linebreak="newline"></mspace><mi>e</mi><mo>×</mo><mi>d</mi><mo>=</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo>×</mo><mi>p</mi><mi>h</mi><mi>i</mi><mspace linebreak="newline"></mspace><mi>e</mi><mo>×</mo><mi>d</mi><mo>=</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo>×</mo><mo stretchy="false">(</mo><msup><mi>p</mi><mn>2</mn></msup><mo>+</mo><mi>p</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><msup><mi>q</mi><mn>2</mn></msup><mo>+</mo><mi>q</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>e</mi><mo>×</mo><mi>d</mi><mo>=</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo>×</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>+</mo><mi>n</mi><mo>×</mo><mo stretchy="false">(</mo><mi>p</mi><mo>+</mo><mi>q</mi><mo stretchy="false">)</mo><mo>+</mo><mi>n</mi><mo>+</mo><msup><mi>p</mi><mn>2</mn></msup><mo>+</mo><msup><mi>q</mi><mn>2</mn></msup><mo>+</mo><mi>p</mi><mo>+</mo><mi>q</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>l</mi><mi>e</mi><mi>t</mi><mtext>  </mtext><mi>s</mi><mo>=</mo><mi>p</mi><mo>+</mo><mi>q</mi><mspace linebreak="newline"></mspace><mn>1</mn><mo>+</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo>×</mo><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo>×</mo><mi>s</mi><mo>+</mo><msup><mi>s</mi><mn>2</mn></msup><mo>−</mo><mi>n</mi><mo>+</mo><mi>s</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>e</mi></mrow><annotation encoding="application/x-tex">e \times d \equiv 1 \mod phi\\e \times d = 1 + k \times phi\\e \times d = 1 + k \times (p^2+p+1) \times (q^2+q+1)\\e \times d = 1+k\times((n^2)+n\times(p+q)+n+p^2+q^2+p+q+1)\\let\;s = p + q\\1+1+k\times(n^2+n\times s+s^2-n+s+1) = 0 \mod e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">h</span><span class="mord mathnormal">i</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">e</span></span></span></span></span></p><p>上面模方程中有两个未知量<code>k</code>和<code>s</code></p><p>根据 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>×</mo><mi>d</mi><mo>=</mo><mn>1</mn><mo>+</mo><mi>k</mi><mo>×</mo><mo stretchy="false">(</mo><msup><mi>p</mi><mn>2</mn></msup><mo>+</mo><mi>p</mi><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><msup><mi>q</mi><mn>2</mn></msup><mo>+</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e \times d = 1 + k \times (p^2+p) \times (q^2+q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span> ，其中e.bit_length=4*nbits，nbits//4&lt;d.bit_length&lt;nbits//2，所以k.bit_length&lt;nbits//2，</p><p>用二元coppersmith解</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">d = f.degree()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(f, Polynomial):</span><br><span class="line">x, = polygens(f.base_ring(), f.variable_name(), <span class="number">1</span>)</span><br><span class="line">f = f(x)</span><br><span class="line"></span><br><span class="line">R = f.base_ring()</span><br><span class="line">N = R.cardinality()</span><br><span class="line"></span><br><span class="line">f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">base = N^(m-i) * f^i</span><br><span class="line"><span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">G.append(g)</span><br><span class="line"></span><br><span class="line">B, monomials = G.coefficient_matrix()</span><br><span class="line">monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">B = B.change_ring(QQ)</span><br><span class="line"><span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line"></span><br><span class="line">H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B*monomials):</span><br><span class="line">H.append(h)</span><br><span class="line">I = H.ideal()</span><br><span class="line"><span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">H.pop()</span><br><span class="line"><span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">roots = []</span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">roots.append(root)</span><br><span class="line"><span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">N = <span class="number">32261421478213846055712670966502489204755328170115455046538351164751104619671102517649635534043658087736634695616391757439732095084483689790126957681118278054587893972547230081514687941476504846573346232349396528794022902849402462140720882761797608629678538971832857107919821058604542569600500431547986211951</span></span><br><span class="line">e = <span class="number">334450817132213889699916301332076676907807495738301743367532551341259554597455532787632746522806063413194057583998858669641413549469205803510032623432057274574904024415310727712701532706683404590321555542304471243731711502894688623443411522742837178384157350652336133957839779184278283984964616921311020965540513988059163842300284809747927188585982778365798558959611785248767075169464495691092816641600277394649073668575637386621433598176627864284154484501969887686377152288296838258930293614942020655916701799531971307171423974651394156780269830631029915305188230547099840604668445612429756706738202411074392821840</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">32261421478213846055712670966502489204755328170115455046538351164751104619671102517649635534043658087736634695616391757439732095084483689790126957681118278054587893972547230081514687941476504846573346232349396528794022902849402462140720882761797608629678538971832857107919821058604542569600500431547986211951</span></span><br><span class="line">e = <span class="number">334450817132213889699916301332076676907807495738301743367532551341259554597455532787632746522806063413194057583998858669641413549469205803510032623432057274574904024415310727712701532706683404590321555542304471243731711502894688623443411522742837178384157350652336133957839779184278283984964616921311020965540513988059163842300284809747927188585982778365798558959611785248767075169464495691092816641600277394649073668575637386621433598176627864284154484501969887686377152288296838258930293614942020655916701799531971307171423974651394156780269830631029915305188230547099840604668445612429756706738202411074392821840</span></span><br><span class="line"></span><br><span class="line">R.&lt;s,k&gt; = PolynomialRing(Zmod(e))</span><br><span class="line">f = <span class="number">1</span>+k*(n^<span class="number">2</span>+n*s+s^<span class="number">2</span>-n+s+<span class="number">1</span>)</span><br><span class="line">bounds=(<span class="number">2</span>^<span class="number">513</span>,<span class="number">2</span>^<span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(small_roots(f , bounds , m=<span class="number">3</span> , d=<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(root)</span><br></pre></td></tr></table></figure><h2 id="不完全阻塞干扰"><a class="markdownIt-Anchor" href="#不完全阻塞干扰"></a> 不完全阻塞干扰</h2><p>一个intelligence.pkl文件，从文件中读取序列化的对象并还原为原来的Python对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个文件用于读取</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;intelligence.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 使用pickle.load()从文件中读取序列化的对象并还原为原来的Python对象</span></span><br><span class="line">    loaded_data = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印加载的数据</span></span><br><span class="line"><span class="built_in">print</span>(loaded_data)</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The ship crashed into the sun, causing a massive magnetic storm</span></span><br><span class="line"><span class="comment">#part of script</span></span><br><span class="line">msg = bytes_to_long(FLAG)</span><br><span class="line">n = p^<span class="number">5</span>*q^<span class="number">2</span></span><br><span class="line">phi = p^<span class="number">4</span>*(p-<span class="number">1</span>)*q*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(d,phi)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="comment"># c = 145554802564989933772666853449758467748433820771006616874558211691441588216921262672588167631397770260815821197485462873358280668164496459053150659240485200305314288108259163251006446515109018138298662011636423264380170119025895000021651886702521266669653335874489612060473962259596489445807308673497717101487224092493721535129391781431853820808463529747944795809850314965769365750993208968116864575686200409653590102945619744853690854644813177444995458528447525184291487005845375945194236352007426925987404637468097524735905540030962884807790630389799495153548300450435815577962308635103143187386444035094151992129110267595908492217520416633466787688326809639286703608138336958958449724993250735997663382433125872982238289419769011271925043792124263306262445811864346081207309546599603914842331643196984128658943528999381048833301951569809038023921101787071345517702911344900151843968213911899353962451480195808768038035044446206153179737023140055693141790385662942050774439391111437140968754546526191031278186881116757268998843581015398070043778631790328583529667194481319953424389090869226474999123124532354330671462280959215310810005231660418399403337476289138527331553267291013945347058144254374287422377547369897793812634181778309679601143245890494670013019155942690562552431527149178906855998534415120428884098317318129659099377634006938812654262148522236268027388683027513663867042278407716812565374141362015467076472409873946275500942547114202939578755575249750674734066843408758067001891408572444119999801055605577737379889503505649865554353749621313679734666376467890526136184241450593948838055612677564667946098308716892133196862716086041690426537245252116765796203427832657608512488619438752378624483485364908432609100523022628791451171084583484294929190998796485805496852608557456380717623462846198636093701726099310737244471075079541022111303662778829695340275795782631315412134758717966727565043332335558077486037869874106819581519353856396937832498623662166446395755447101393825864584024239951058366713573567250863658531585064635727070458886746791722270803893438211751165831616861912569513431821959562450032831904268205845224077709362068478</span></span><br></pre></td></tr></table></figure><p>另有一个损毁的私钥文件cert.pem</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIIFQKCA4AGfwqk6XSmOh/+jVwj5dPEMWU65BzHRvMF9iqfGT8iSGy37xsnVjSB</span><br><span class="line">j0bQdSpROeGZGCcfoNfSe8Zg0rckFNCOpSyIN/lJx7rswwKboxcn7zvxINmSbALX</span><br><span class="line">QS8YfpjcVt0HuYfSzBka1WFkoUTyiy9woV0QVYik8n+7KJH8UnvWiQpfeVtcSEdq</span><br><span class="line">a/nftnt+Hrx7Gwhs0otYxolVv99E7M4R/6zfZUVRsVm3gyBAzCjujr6kj4Zy1T49</span><br><span class="line">6I/Pu1+ydrUDiA3TTVmTM13fjMuWwbTXn1AtchBHZa2cKxhYoXrz1b5E+jy/S47r</span><br><span class="line">lCqjlCo4cdLGWscCiRI/wun5sly/y9eEEJYGD6UEw6B7WRSTxkyI0LtFKFqFtffV</span><br><span class="line">nbmPqgDCzT+7Y9pZkgXxyrDfUs97QxoO5KfjVpZUbOnQPvWV7O6S0hQskul9J0ST</span><br><span class="line">lwNFW0xw3sJ8Mh7GuDwCliLoOp4NVdCyWNldTmEpGGXdp23GGfzpV3mQQpxud+nU</span><br><span class="line">B4HjsvRJcBuD6LDGxm6zgPlkc+XUIu/uiysOiLcWsAp5ydUUyjrZ0t7lJmCf+VQX</span><br><span class="line">MqQZjRG52/uy5Vwk2A6lItB4bjNV8jYGpdOKct5O78i2v8SCJIooYstp2ODj0xZZ</span><br><span class="line">fanYCCi+hQVPrxX8NpyqyvuBXGlzwXGUBoPVahoZZ7Cbf/o/vlsuCGmXWdhNcWA/</span><br><span class="line">UWRHaWuycyKmnzn2yiU+ANyVVdX5cygHDEZ/NmPMSJqtEw8oxC81v4jFcZIKuSrL</span><br><span class="line">j3XQPjWnUQPFvZbwYclr0Cr24dGRsN0WS8chN3AD7b9dPvZaXpBGOFNWtSFiO+<span class="number">43</span></span><br><span class="line">8WSFCgp6+w7U5+i9mv4SmPfVMrya2UGBLTMq7OddHMyx/2n9QrMfJIrledng1qFL</span><br><span class="line">BUbnhLqUDjK9AcOV34/0WEBARitUefoHM21QPcMy5w/AbZRjKX/AQrYj1W+H76pS</span><br><span class="line">WptYDjFNkNEhGJPtQHomUI3qoKE8nujJArnhw6Av6aUUUsAu573MhcDv9jiR4kcD</span><br><span class="line">vSZdnJ2/RW4q+UCVOLzg/sx+urICZqqrBsdmw+ps2py5ul4dAkt9w9c+dvajMxl7</span><br><span class="line">rYfE+zTVZaABSqxygl5Brc/q2tyHrO9ArYS3xVaRq61WG+BVDqCpiEcMQnQyrLj+</span><br><span class="line">srnS0lmPsgibuRu9nLGZ6JLTYWTYvz7NVFdqlxNAR6EtqEIHSFu05QIDAQABAoID</span><br><span class="line">gAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGBAIBj0KIYduXOHiEB</span><br><span class="line">wgAVUpBm7Zl2iC0QAqKe/g8v38wnQ/yaS1tlHMlxCGmeyi+x89kxdbrjQ+fJLkpB</span><br><span class="line">xy0F5XAZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGBAOTw/kn5rhSSwJegqYj6cYdmJf5PzgWw</span><br><span class="line">IE8f30PsZLTaxpnSjhZu/fx1YtGeWMNJPZEANlzyhAtGwPbujZZIBxcP8sE8TrgB</span><br><span class="line">LsqzeGKjkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAA</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件以损坏，无法用openssl读取，写代码将base64转为16进制hex</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;cert.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">key_64 = <span class="string">&#x27;&#x27;</span>.join(data.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">key_num = libnum.s2n(base64.b64decode(key_64))</span><br><span class="line">key_hex = <span class="built_in">hex</span>(key_num)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(key_hex)</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">3082081502820380067f0aa4e974a63a1ffe8d5c23e5d3c431653ae41cc746f305f62a9f193f22486cb7ef1b275634818f46d0752a5139e19918271fa0d7d27bc660d2b72414d08ea52c8837f949c7baecc3029ba31727ef3bf120d9926c02d7412f187e98dc56dd07b987d2cc191ad56164a144f28b2f70a15d105588a4f27fbb2891fc527bd6890a5f795b5c48476a6bf9dfb67b7e1ebc7b1b086cd28b58c68955bfdf44ecce11ffacdf654551b159b7832040cc28ee8ebea48f8672d53e3de88fcfbb5fb276b503880dd34d5993335ddf8ccb96c1b4d79f502d72104765ad9c2b1858a17af3d5be44fa3cbf4b8eeb942aa3942a3871d2c65ac70289123fc2e9f9b25cbfcbd7841096060fa504c3a07b591493c64c88d0bb45285a85b5f7d59db98faa00c2cd3fbb63da599205f1cab0df52cf7b431a0ee4a7e35696546ce9d03ef595ecee92d2142c92e97d2744939703455b4c70dec27c321ec6b83c029622e83a9e0d55d0b258d95d4e61291865dda76dc619fce9577990429c6e77e9d40781e3b2f449701b83e8b0c6c66eb380f96473e5d422efee8b2b0e88b716b00a79c9d514ca3ad9d2dee526609ff9541732a4198d11b9dbfbb2e55c24d80ea522d0786e3355f23606a5d38a72de4eefc8b6bfc482248a2862cb69d8e0e3d316597da9d80828be85054faf15fc369caacafb815c6973c171940683d56a1a1967b09b7ffa3fbe5b2e08699759d84d71603f516447696bb27322a69f39f6ca253e00dc9555d5f97328070c467f3663cc489aad130f28c42f35bf88c571920ab92acb8f75d03e35a75103c5bd96f061c96bd02af6e1d191b0dd164bc721377003edbf5d3ef65a5e9046385356b521623bee37f164850a0a7afb0ed4e7e8bd9afe1298f7d532bc9ad941812d332aece75d1cccb1ff69fd42b31f248ae579d9e0d6a14b0546e784ba940e32bd01c395df8ff4584040462b5479fa07336d503dc332e70fc06d9463297fc042b623d56f87efaa525a9b580e314d90d1211893ed407a26508deaa0a13c9ee8c902b9e1c3a02fe9a51452c02ee7bdcc85c0eff63891e24703bd265d9c9dbf456e2af9409538bce0fecc7ebab20266aaab06c766c3ea6cda9cb9ba5e1d024b7dc3d73e76f6a333197bad87c4fb34d565a0014aac72825e41adcfeadadc87acef40ad84b7c55691abad561be0550ea0a988470c427432acb8feb2b9d2d2598fb2089bb91bbd9cb199e892d36164d8bf3ecd54576a97134047a12da84207485bb4ed0a21876e5ce1e2101c20015529066ed9976882d1002a29efe0f2fdfcc2743fc9a4b5b651cc97108699eca2fb1f3d93175bae343e7c92e4a41c72d05e5701940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002818100e4f0fe49f9ae1492c097a0a988fa71876625fe4fce05b0204f1fdf43ec64b4dac699d28e166efdfc7562d19e58c3493d9100365cf2840b46c0f6ee8d964807170ff2c13c4eb8012ecab37862a3900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br></pre></td></tr></table></figure><p>找资料学习了一下RSA私钥文件格式</p><ul><li><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#RSA%E7%A7%81%E9%92%A5">RSA | Lazzaro (lazzzaro.github.io)</a></li><li><a href="https://www.cnblogs.com/jukan/p/5527922.html">OPENSSL中RSA私钥文件（PEM格式）解析【一】 - mydddfly - 博客园 (cnblogs.com)</a></li></ul><p>私钥中各参数顺序<code>n,e,d,p,q,dp,dq,iq</code>，后面几个参数非必须写入私钥中</p><p>私钥文件首先是标签头<code>30820815</code>，其中<code>82</code>表示后面的两个字节<code>0815</code>为文件长度（这里注意是字节长度，换算成bit位要再×8），即私钥长<code>0x0815bytes</code></p><p>后面<code>02820380</code>中<code>02</code>是分隔符，<code>82</code>表示后面两个字节<code>0380</code>为参数<code>n</code>的长度，即<code>n.length=0x0380bytes</code>，得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0x067f0aa4e974a63a1ffe8d5c23e5d3c431653ae41cc746f305f62a9f193f22486cb7ef1b275634818f46d0752a5139e19918271fa0d7d27bc660d2b72414d08ea52c8837f949c7baecc3029ba31727ef3bf120d9926c02d7412f187e98dc56dd07b987d2cc191ad56164a144f28b2f70a15d105588a4f27fbb2891fc527bd6890a5f795b5c48476a6bf9dfb67b7e1ebc7b1b086cd28b58c68955bfdf44ecce11ffacdf654551b159b7832040cc28ee8ebea48f8672d53e3de88fcfbb5fb276b503880dd34d5993335ddf8ccb96c1b4d79f502d72104765ad9c2b1858a17af3d5be44fa3cbf4b8eeb942aa3942a3871d2c65ac70289123fc2e9f9b25cbfcbd7841096060fa504c3a07b591493c64c88d0bb45285a85b5f7d59db98faa00c2cd3fbb63da599205f1cab0df52cf7b431a0ee4a7e35696546ce9d03ef595ecee92d2142c92e97d2744939703455b4c70dec27c321ec6b83c029622e83a9e0d55d0b258d95d4e61291865dda76dc619fce9577990429c6e77e9d40781e3b2f449701b83e8b0c6c66eb380f96473e5d422efee8b2b0e88b716b00a79c9d514ca3ad9d2dee526609ff9541732a4198d11b9dbfbb2e55c24d80ea522d0786e3355f23606a5d38a72de4eefc8b6bfc482248a2862cb69d8e0e3d316597da9d80828be85054faf15fc369caacafb815c6973c171940683d56a1a1967b09b7ffa3fbe5b2e08699759d84d71603f516447696bb27322a69f39f6ca253e00dc9555d5f97328070c467f3663cc489aad130f28c42f35bf88c571920ab92acb8f75d03e35a75103c5bd96f061c96bd02af6e1d191b0dd164bc721377003edbf5d3ef65a5e9046385356b521623bee37f164850a0a7afb0ed4e7e8bd9afe1298f7d532bc9ad941812d332aece75d1cccb1ff69fd42b31f248ae579d9e0d6a14b0546e784ba940e32bd01c395df8ff4584040462b5479fa07336d503dc332e70fc06d9463297fc042b623d56f87efaa525a9b580e314d90d1211893ed407a26508deaa0a13c9ee8c902b9e1c3a02fe9a51452c02ee7bdcc85c0eff63891e24703bd265d9c9dbf456e2af9409538bce0fecc7ebab20266aaab06c766c3ea6cda9cb9ba5e1d024b7dc3d73e76f6a333197bad87c4fb34d565a0014aac72825e41adcfeadadc87acef40ad84b7c55691abad561be0550ea0a988470c427432acb8feb2b9d2d2598fb2089bb91bbd9cb199e892d36164d8bf3ecd54576a97134047a12da84207485bb4e5</span></span><br></pre></td></tr></table></figure><p>后面<code>0203</code>含义：<code>02</code>是分隔符，<code>03</code>表示后面3个字节为加密指数<code>e</code>，即<code>e=0x10001(65537)</code></p><p>接下来<code>02820380</code>：<code>02</code>是分隔符，<code>82</code>表示后面两个字节<code>0380</code>为参数<code>d</code>的长度，即<code>d.length=0x0380bytes</code>，显然<code>d</code>被损坏了</p><p>接下来<code>028181</code>：<code>02</code>是分隔符，<code>81</code>表示后面1个字节<code>81</code>为参数<code>p</code>的长度，即<code>p.length=0x81bytes</code>，题目只给出了<code>p</code>的高位</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p_high = <span class="number">0x008063d0a21876e5ce1e2101c20015529066ed9976882d1002a29efe0f2fdfcc2743fc9a4b5b651cc97108699eca2fb1f3d93175bae343e7c92e4a41c72d05e57019400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure><p>同理：q的高位</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q_high = <span class="number">0x00e4f0fe49f9ae1492c097a0a988fa71876625fe4fce05b0204f1fdf43ec64b4dac699d28e166efdfc7562d19e58c3493d9100365cf2840b46c0f6ee8d964807170ff2c13c4eb8012ecab37862a3900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure><p>p_high中已知的部分有524bit，满足p的高位攻击</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0x067f0aa4e974a63a1ffe8d5c23e5d3c431653ae41cc746f305f62a9f193f22486cb7ef1b275634818f46d0752a5139e19918271fa0d7d27bc660d2b72414d08ea52c8837f949c7baecc3029ba31727ef3bf120d9926c02d7412f187e98dc56dd07b987d2cc191ad56164a144f28b2f70a15d105588a4f27fbb2891fc527bd6890a5f795b5c48476a6bf9dfb67b7e1ebc7b1b086cd28b58c68955bfdf44ecce11ffacdf654551b159b7832040cc28ee8ebea48f8672d53e3de88fcfbb5fb276b503880dd34d5993335ddf8ccb96c1b4d79f502d72104765ad9c2b1858a17af3d5be44fa3cbf4b8eeb942aa3942a3871d2c65ac70289123fc2e9f9b25cbfcbd7841096060fa504c3a07b591493c64c88d0bb45285a85b5f7d59db98faa00c2cd3fbb63da599205f1cab0df52cf7b431a0ee4a7e35696546ce9d03ef595ecee92d2142c92e97d2744939703455b4c70dec27c321ec6b83c029622e83a9e0d55d0b258d95d4e61291865dda76dc619fce9577990429c6e77e9d40781e3b2f449701b83e8b0c6c66eb380f96473e5d422efee8b2b0e88b716b00a79c9d514ca3ad9d2dee526609ff9541732a4198d11b9dbfbb2e55c24d80ea522d0786e3355f23606a5d38a72de4eefc8b6bfc482248a2862cb69d8e0e3d316597da9d80828be85054faf15fc369caacafb815c6973c171940683d56a1a1967b09b7ffa3fbe5b2e08699759d84d71603f516447696bb27322a69f39f6ca253e00dc9555d5f97328070c467f3663cc489aad130f28c42f35bf88c571920ab92acb8f75d03e35a75103c5bd96f061c96bd02af6e1d191b0dd164bc721377003edbf5d3ef65a5e9046385356b521623bee37f164850a0a7afb0ed4e7e8bd9afe1298f7d532bc9ad941812d332aece75d1cccb1ff69fd42b31f248ae579d9e0d6a14b0546e784ba940e32bd01c395df8ff4584040462b5479fa07336d503dc332e70fc06d9463297fc042b623d56f87efaa525a9b580e314d90d1211893ed407a26508deaa0a13c9ee8c902b9e1c3a02fe9a51452c02ee7bdcc85c0eff63891e24703bd265d9c9dbf456e2af9409538bce0fecc7ebab20266aaab06c766c3ea6cda9cb9ba5e1d024b7dc3d73e76f6a333197bad87c4fb34d565a0014aac72825e41adcfeadadc87acef40ad84b7c55691abad561be0550ea0a988470c427432acb8feb2b9d2d2598fb2089bb91bbd9cb199e892d36164d8bf3ecd54576a97134047a12da84207485bb4e5</span></span><br><span class="line">c = <span class="numberspan></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p0 = <span class="number">0x008063d0a21876e5ce1e2101c20015529066ed9976882d1002a29efe0f2fdfcc2743fc9a4b5b651cc97108699eca2fb1f3d93175bae343e7c92e4a41c72d05e570194</span></span><br><span class="line">q0 = <span class="number">0x00e4f0fe49f9ae1492c097a0a988fa71876625fe4fce05b0204f1fdf43ec64b4dac699d28e166efdfc7562d19e58c3493d9100365cf2840b46c0f6ee8d964807170ff2c13c4eb8012ecab37862a39</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = ((p0&gt;&gt;<span class="number">2</span>)*<span class="number">2</span>^<span class="number">502</span>+x)^<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(f.small_roots(X = <span class="number">2</span>^(<span class="number">502</span>), beta = <span class="number">0.45</span>, epsilon = <span class="number">0.03</span>))</span><br></pre></td></tr></table></figure><p>得到p，后面就可以正常解RSA了</p><p>这里要说明一下，对于上面为什么p要位移2bit，这就是我在比赛的时候踩的坑（在这里卡了一晚上……还是树哥有经验）</p><p>因为<code>p</code>的已知部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0x008063d0a21876e5ce1e2101c20015529066ed9976882d1002a29efe0f2fdfcc2743fc9a4b5b651cc97108699eca2fb1f3d93175bae343e7c92e4a41c72d05e570194</span></span><br></pre></td></tr></table></figure><p>转为二进制后</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0bspan></span><br></pre></td></tr></table></figure><p>最后的两位是0，不一定是已知的真实值，可能是损坏的值，所以要把这两个bit去掉再进行高位攻击</p><p>验证：最后得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">90158455407064353226740172256637847571736267390156796413259819366666851822735984542845914678308585714535762114331991779976105574125437982741541925319918477642851700979718859437613437250733519320418663913659250175079815430032463049804595241254755873838742300889891959766753209758679639806589383714664811420277</span></span><br><span class="line"><span class="built_in">bin</span>(p) = <span class="number">0b1000000001100011110100001010001000011000011101101110010111001110000111100010000100000001110000100000000000010101010100101001000001100110111011011001100101110110100010000010110100010000000000101010001010011110111111100000111100101111110111111100110000100111010000111111110010011010010010110101101101100101000111001100100101110001000010000110100110011110110010100010111110110001111100111101100100110001011101011011101011100011010000111110011111001001001011100100101001000001110001110010110100000101111001010111000000011001011000001100100111000010111001100110101000111010111111110010011010111101001011000010011001011000011010101000010100000001111111111010101100000101010001000001110111111101110100100101110110100010110110110011111010010011110100100001001110000001111001000100001111001001000101110111001001011101011110010110000101000100010011111001110010101110101010010110101011111110000111111010010110100110010011001001101010010011000001001010101010001101100010001011001100011010110011010100101100100111000001010101101001110101</span></span><br></pre></td></tr></table></figure><p>可以发现：那两位bit是<code>10</code>而不是<code>00</code>，说明<code>p_high</code>最后这两个bit位确实不是真实值</p><p>吸取这次教训，以后高位攻击是先转成二进制看看最后面的bit位，如果是<code>0</code>，要添加位移</p><h2 id="whisper"><a class="markdownIt-Anchor" href="#whisper"></a> Whisper</h2><p>hint: Two public key certificates were monitored. And Mr. Dual intercepted a ciphertext. Just when he was in the rough, a Careless Whisper told that the length of a key parameter is carelessly set to 345 bits.</p><p>给了两个公钥文件和一个加密文件</p><p>用openssl读取一下，得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N1 = <span class="number">19216005446310864558409934096148904703198882317083224129431545386380435777354723744624028053518278514595663319253560114239018542660582960464010994454707936550902872627309424890333127288994449006783158078916602020794628546065674981593736606481809198149080696037584037699638293870122512237711498004090515845499</span></span><br><span class="line">N2 = <span class="number">4992911943798277344804876549224813326447469267517432903838084455752417287982320183584988170455130118418117937196562948710115292838538880218156469801938645463822391931977946975012481667095710882823897026534267366981015926659114785262116088548568215969555191689632109516970297562458267207338397574333407150103</span></span><br><span class="line">e = <span class="number">5352708372343813403035593638037107517373724079700735571091908193413083617555211472255125798199165859811237950085789893649651552088125747433480591652396404710788778815075048587264350078253899425987466937040099316084273123603046629945048298154353920118466252136326911019666012632927688983695457057246503276867</span></span><br><span class="line">c = <span class="number">15215414324218119514166856548319827087347975479953435757551380183481824597666586239577164581282639891207362199632694698810120856780147289618566227285967212830337320315326701453355443595245474646348352728630245065334265985318506260363891869088324717641979951184093710784542525865784982264295576662469010725462</span></span><br></pre></td></tr></table></figure><blockquote><p>Dual RSA是一种由Sun等人在2007年提出的RSA变体，其主要特点是两个实例共享相同的公钥和私钥指数，但具有不同的模数。这种设计的主要优势在于减少了存储需求，因为只需要存储一套公钥和私钥即可处理两个不同的RSA实例。</p></blockquote><p><a href="https://hasegawaazusa.github.io/dual-rsa-note.html">Dual RSA——双生RSA，对偶RSA | 独奏の小屋 (hasegawaazusa.github.io)</a></p><p>这个知识点在 61dctf 和 0ctf-2017-final 出现过</p><p>看了关于低解密指数Dual RSA的exp都来自 [Authentication&amp;Secrecy (Crypto 1000pts) - MDWiki (<a href="http://elliptic-shiho.github.io">elliptic-shiho.github.io</a>)](<a href="https://elliptic-shiho.github.io/ctf-writeups/#!ctf/2017/0CTF">https://elliptic-shiho.github.io/ctf-writeups/#!ctf/2017/0CTF</a> Finals/cr1000-AuthenticationSecrecy/README.md)</p><p>代码来自：<a href="https://blog.wm-team.cn/index.php/archives/82/#Whisper">SCTF 2024 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = <span class="string">f&#x27;<span class="subst">&#123;ii:02d&#125;</span> &#x27;</span></span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27; &#x27;</span> <span class="keyword">if</span> BB[ii, jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dual_rsa_liqiang_et_al</span>(<span class="params">e, n1, n2, delta, mm, tt</span>):</span><br><span class="line">    N = (n1 + n2) // <span class="number">2</span></span><br><span class="line">    A = ZZ(math.floor(N**<span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line">    _XX = ZZ(math.floor(N**delta))</span><br><span class="line">    _YY = ZZ(math.floor(N**<span class="number">0.5</span>))</span><br><span class="line">    _ZZ = ZZ(math.floor(N**(delta - <span class="number">1.</span>/<span class="number">4</span>)))</span><br><span class="line">    _UU = _XX * _YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    M = Matrix(ZZ, [[A, e], [<span class="number">0</span>, n1]])</span><br><span class="line">    B = M.LLL()</span><br><span class="line">    l11, l12 = B[<span class="number">0</span>]</span><br><span class="line">    l21, l22 = B[<span class="number">1</span>]</span><br><span class="line">    l_11 = ZZ(l11 // A)</span><br><span class="line">    l_21 = ZZ(l21 // A)</span><br><span class="line"></span><br><span class="line">    modulo = e * l_21</span><br><span class="line">    F = Zmod(modulo)</span><br><span class="line"></span><br><span class="line">    PR = PolynomialRing(F, <span class="string">&#x27;u, x, y, z&#x27;</span>)</span><br><span class="line">    u, x, y, z = PR.gens()</span><br><span class="line"></span><br><span class="line">    PK = PolynomialRing(ZZ, <span class="string">&#x27;uk, xk, yk, zk&#x27;</span>)</span><br><span class="line">    uk, xk, yk, zk = PK.gens()</span><br><span class="line"></span><br><span class="line">    PQ = PK.quo(xk * yk + <span class="number">1</span> - uk)</span><br><span class="line">    f = PK(x * (n2 + y) - e * l_11 * z + <span class="number">1</span>)</span><br><span class="line">    fbar = PQ(f).lift()</span><br><span class="line"></span><br><span class="line">    gijk = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mm - k + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(mm - k - i + <span class="number">1</span>):</span><br><span class="line">                gijk[i, j, k] = PQ(xk**i * zk**j * PK(fbar)**k * modulo**(mm - k)).lift()</span><br><span class="line"></span><br><span class="line">    hjkl = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(math.floor(mm / tt) * j, mm + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(k + <span class="number">1</span>):</span><br><span class="line">                hjkl[j, k, l] = PQ(yk**j * zk**(k - l) * PK(fbar)**l * modulo**(mm - l)).lift()</span><br><span class="line"></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> gijk.keys():</span><br><span class="line">        monomials += gijk[k].monomials()</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> hjkl.keys():</span><br><span class="line">        monomials += hjkl[k].monomials()</span><br><span class="line"></span><br><span class="line">    monomials = <span class="built_in">sorted</span>(<span class="built_in">set</span>(monomials), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(monomials) == <span class="built_in">len</span>(gijk) + <span class="built_in">len</span>(hjkl)</span><br><span class="line">    dim = <span class="built_in">len</span>(monomials)</span><br><span class="line"></span><br><span class="line">    M = Matrix(ZZ, dim)</span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> gijk.keys():</span><br><span class="line">        <span class="keyword">for</span> i, monomial <span class="keyword">in</span> <span class="built_in">enumerate</span>(monomials):</span><br><span class="line">            M[row, i] = gijk[k].monomial_coefficient(monomial) * monomial.subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> hjkl.keys():</span><br><span class="line">        <span class="keyword">for</span> i, monomial <span class="keyword">in</span> <span class="built_in">enumerate</span>(monomials):</span><br><span class="line">            M[row, i] = hjkl[k].monomial_coefficient(monomial) * monomial.subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    matrix_overview(M)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span> * <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    B = M.LLL()</span><br><span class="line"></span><br><span class="line">    matrix_overview(B)</span><br><span class="line"></span><br><span class="line">    H = &#123;i: <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim)&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">            H[i] += PK((monomials[j] * B[i, j]) / monomials[j].subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ))</span><br><span class="line">    H = <span class="built_in">list</span>(H.values())</span><br><span class="line"></span><br><span class="line">    PQ = PolynomialRing(QQ, <span class="string">&#x27;uq, xq, yq, zq&#x27;</span>)</span><br><span class="line">    uq, xq, yq, zq = PQ.gens()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">        H[i] = PQ(H[i].subs(uk=xk * yk + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    I = Ideal(*H[<span class="number">1</span>:<span class="number">20</span>])</span><br><span class="line">    g = I.groebner_basis(<span class="string">&#x27;giac&#x27;</span>)[::-<span class="number">1</span>]</span><br><span class="line">    mon = [t.monomials() <span class="keyword">for</span> t <span class="keyword">in</span> g]</span><br><span class="line"></span><br><span class="line">    PX = PolynomialRing(ZZ, <span class="string">&#x27;xs&#x27;</span>)</span><br><span class="line">    xs = PX.gen()</span><br><span class="line"></span><br><span class="line">    x_pol = y_pol = z_pol = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(g)):</span><br><span class="line">        <span class="keyword">if</span> mon[i] == [xq, <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(g[i] / g[i].lc())</span><br><span class="line">            x_pol = g[i] / g[i].lc()</span><br><span class="line">        <span class="keyword">elif</span> mon[i] == [yq, <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(g[i] / g[i].lc())</span><br><span class="line">            y_pol = g[i] / g[i].lc()</span><br><span class="line">        <span class="keyword">elif</span> mon[i] == [zq, <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(g[i] / g[i].lc())</span><br><span class="line">            z_pol = g[i] / g[i].lc()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> x_pol <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> y_pol <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> z_pol <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Failed: we cannot get a solution...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    x0 = x_pol.subs(xq=xs).roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    y0 = y_pol.subs(yq=xs).roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    z0 = z_pol.subs(zq=xs).roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> f(x0 * y0 + <span class="number">1</span>, x0, y0, z0) % modulo == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    a0 = z0</span><br><span class="line">    a1 = (x0 * (n2 + y0) + <span class="number">1</span> - e * l_11 * z0) // (e * l_21)</span><br><span class="line"></span><br><span class="line">    d = a0 * l_11 + a1 * l_21</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    delta = <span class="number">0.334</span></span><br><span class="line">    mm = <span class="number">4</span></span><br><span class="line">    tt = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    n1 = <span class="number">0x1b5d4fe0aa6782e275d4ce12a6d57562efbbe7db6f5277255b891729bfa2a18d3edb49843d7989a37b9516be2df8ca939058e65f64b5fb2071bea4f5f8d1392895b32bf0377d99f4f79979125e5db01cdb5080a1c2d665c9ac31b5823025499c9513277bae5e7a846cd271c4396e2ba219020e58a9055cb18a28d36a00bf717b</span></span><br><span class="line">    e = <span class="number">0x079f5ccc665767b4a257e5c1ff56e9803df2e5650302daad420105fe672447743bd3f0bea1c46a4987932e9a886ca87a7afd7796abf1e5629c4986fe4f22e89cdce7abb06624465146a2e2b6ca9ab3196ceab7467974c1dc45608a200411b291fdaf99f7d80dce4db3566f4a9e2e574c6224cd07d80638d28f7820bcf4b49143</span></span><br><span class="line">    n2 = <span class="number">0x071c324e8769493187c15f72d5cc695729b48488ee3fbd01db00d5c478f08c7cf32093ba61745051d3e9d169523aa91438181f47679aff5edd22950f74a1eb1443320aaa5d97f5c1e81b5ef9a3e69ba669abc4c6c4b405f5088a603a74f9bcef88823b4523574114c810600838728196f8e5e0d4aeeeeab79dd8683a72f3c017</span></span><br><span class="line"></span><br><span class="line">    d = dual_rsa_liqiang_et_al(e, n1, n2, delta, mm, tt)</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><h2 id="lineararts"><a class="markdownIt-Anchor" href="#lineararts"></a> LinearARTs</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choices</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.groups.perm_gps.permgroup_named <span class="keyword">import</span> SymmetricGroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Young</span>(<span class="params">FLAG</span>):</span><br><span class="line">    f = <span class="built_in">int</span>.from_bytes(FLAG, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    q = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">while</span> f:</span><br><span class="line">        s.append(f % q)</span><br><span class="line">        f //= q</span><br><span class="line">    s = vector(GF(q), s)</span><br><span class="line"></span><br><span class="line">    n, m = <span class="built_in">len</span>(s), <span class="built_in">len</span>(s) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    A = Matrix(GF(q), m, n, <span class="keyword">lambda</span> i, j: randint(<span class="number">0</span>, q - <span class="number">1</span>))</span><br><span class="line">    e = vector(choices(<span class="built_in">range</span>(<span class="number">2</span>^<span class="number">8</span>), k=m), GF(q))*Matrix(ZZ,PermutationGroupElement(SymmetricGroup(m).random_element()).matrix())</span><br><span class="line">    b = (A*s) + e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> A,b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Old</span>(<span class="params">m, nbits</span>):</span><br><span class="line">    Sn = SymmetricGroup(m)</span><br><span class="line">    p = [getPrime(<span class="number">360</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">    N = <span class="built_in">sorted</span>([getRandomNBitInteger(nbits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">    S = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        r = [N[_] % p[i] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        r = vector(ZZ,r)</span><br><span class="line"></span><br><span class="line">        Per = Sn.random_element()</span><br><span class="line">        P = PermutationGroupElement(Per)</span><br><span class="line">        Pm = Matrix(ZZ,P.matrix())</span><br><span class="line">        r *= Pm</span><br><span class="line">        S.append(r)</span><br><span class="line">    S = matrix(ZZ,S)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Old.matrix&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(&#123;<span class="string">&quot;S&quot;</span>: <span class="built_in">str</span>(<span class="built_in">list</span>(S)),<span class="string">&quot;p&quot;</span>: <span class="built_in">str</span>(p)&#125;, f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> N</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params">nn</span>):</span><br><span class="line">    <span class="comment"># The challenge lasted nn rounds</span></span><br><span class="line">    <span class="comment"># Young_level * virtue &gt;= Old_level , where virtue = nn + 1</span></span><br><span class="line"></span><br><span class="line">    h = []</span><br><span class="line">    HP = []</span><br><span class="line">    MP = []</span><br><span class="line">    Old_level = <span class="number">625</span>*<span class="number">2</span>*<span class="number">2</span></span><br><span class="line">    Young_level = <span class="number">25</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    M = getPrime(Old_level)</span><br><span class="line">    XP = getRandomRange(<span class="number">1</span>,M)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        a = getRandomRange(<span class="number">1</span>,M)</span><br><span class="line">        b = a*XP % M</span><br><span class="line">        HP.append(a)</span><br><span class="line">        MP.append(b)</span><br><span class="line">        delta_level = Old_level - Young_level</span><br><span class="line">        h.append(b &gt;&gt; delta_level &lt;&lt; delta_level)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> XP,M,HP,MP,h</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">mm = <span class="number">16</span></span><br><span class="line">nn = <span class="number">9</span></span><br><span class="line">nbits = <span class="number">3840</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A,b = Young(FLAG)</span><br><span class="line">N = Old(mm, nbits)</span><br><span class="line"></span><br><span class="line">XP,M,HP,MP,h = chall(nn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MP is useful ,I can use him to cast five lightning spells</span></span><br><span class="line">D = diagonal_matrix(GF(<span class="number">0x10001</span>),N+MP)</span><br><span class="line">Sn = SymmetricGroup(<span class="number">5</span>*<span class="number">5</span>)</span><br><span class="line">Per = Sn.random_element()</span><br><span class="line"></span><br><span class="line">P = PermutationGroupElement(Per)</span><br><span class="line">PM = Matrix(GF(<span class="number">0x10001</span>),P.matrix())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AA = A*D*PM</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D.matrix&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(&#123;<span class="string">&quot;D&quot;</span>: <span class="built_in">str</span>(<span class="built_in">list</span>(D))&#125;, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># OK! Find your martial arts, and then you can get the flag.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(&#123;<span class="string">&quot;AA&quot;</span>: <span class="built_in">str</span>(<span class="built_in">list</span>(AA)), <span class="string">&quot;b&quot;</span>: <span class="built_in">str</span>(b)&#125;, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;My SymmetricGroup is <span class="subst">&#123;Sn&#125;</span>, and my element is <span class="subst">&#123;Per&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;M = <span class="subst">&#123;M&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h = <span class="subst">&#123;h&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;HP = <span class="subst">&#123;HP&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">My SymmetricGroup is Symmetric group of order 25! as a permutation group, and my element is (1,23,2,13,3,16,15,6,22,18,14,4,25,11,20,24,21,9,5,17,7,19,10,12,8)</span></span><br><span class="line"><span class="string">M = 309169501373330124045649100152326414225457160505584328527283516968464416389302355829097052128714780092162406614467026044744098784954762500832278190406881802198303575338158311874491341970444579146638248815636164413771772581964591833455055886833879504320098506335328910379223983277573694356846337961823081287986674791459748001014087760336006966850192999063236788568848765812192775492248445517060690151700498331622538367493718859724934115228375142396923937735633684527869745420378950550480692200706066019831688796077313463059296313396035429537407627377675974680696279162072713257960965681304091009329215383850223530139165455326927677102783057396241883175412729216204807235187239596365892879371542214145426492827777125727970815789114727245511828912252143569</span></span><br><span class="line"><span class="string">h = [3565625090222584896920916237461241765625829204082396377386021101162536812411479309464325956424849651112502540095796665989782448302150047491000013081443589381171861802823657878857754676608742927932812781165716659755896099505195018830422885342733139127785165794897376463794696074605473512720672450888626374504772116915620258088753289255996096552892614801083370595759624402874902282635442418547645823133641783382626721416313803991932439793168113855890150599332984583295219543856049901518912201443065300476561372304830840276820139993555523469165273121628823953454126151208689489078628524850757272649061955436843893289237414654732290904213005377463766762255194199607599718375650615493280298611532927519686558670313416090562438894368509350896602591065538560, 286740894693471986151090603562932147965458822098297907353215124508138484491994267754471216888566417392843923796488725160656461314962959042706124173470952968241147487040483767911639159119505992553207913863135028688626896196178757909088128827455625174341894140582939848620368540355056452428553556546413465430152617836247505772663758606552662729528340901377490256234099815707208769579251833692482247933846648593307680305448986314447242583396656418769737861680456297522358131674037354880608888487272985141452871763297604747444764332049229204365395410106847606241968638474099061876569990163879954288002836750959104349076854993248516655758322107956062243468530601256243967323153547535726777712582210098524981336526310800007425464476736381605758610129914167296, 202445786178968197828946112166667682571891905248793492278433983415264905988886412319222803698650008275405441752508434114212113517053913972304515710532012288036732448805044856628337036478357496484044773293960097063848568051250774170422935810965491124102107450786197166927290614807575403261921855599437944525251033428950982061449203659272914014109623656149839199935645660386382459896840619916225080206084500617856222897968865436783548821187873430635315967325778835200418210099836625362334832448337496843986398001079590846483593452928602841826412074751479179471599709999916393508418744578599831517548843854866251289525136765297969136698285441109232446206843977149859059568434871554288377088102779550812057943402777376610057499017696210394059743209313009664, 114630215368349491250326648494149748728124718005857201833657753308980378360823813480094685056650954220208569495921715772409260048257134505583210349697604470912610748671738387322753221966031149012764535612682778184882174392537951540598166408100353995693537007226929298573802177602978136134506604598926968767277963229517115896872176785224081721198822306288029114228955110090342800494317915814873698062519566559427796027618459996738296291782097320521350172532923653864250838232011730592925952612867718426259229217480911558421879422300001641170190840092379605603655701803649801243406059797147753118709730213303123683329677068533772082060407549189564758770771711148071596602056935716438347268248190581386987972757911856155781563899140822797888004226036006912, 128249367678574240079270694387429301574447189368221420750047602082333294620192478593526403955673394674124614483528399397766799072294205407818283464218350759458734269850052374022374583516046462573242829813776315162366850512131805663098817008453376098230770350796562755291771240680188153978483320771657621585572523650775437065002970862224206343896650474078023744187172724827284900132434561870157274624749481073656218832950661419154809116630241897087363941068977482336058825222409922455565132842885044852488100437379745993397785019888492704177085025661715401393223084613786993440233186999961708361656323625565518221228007812487647507152403406194060777071074419667727156839380340460479471882700515901974677682591933244024896502221255164137619867236474814464, 59331241745881917257932833661253483407124868132789104057434303748460794035055450167305496229505776497962206681068504038089886777631651664100577079680933516972657892279730519042800959265778075851643260975944157575808540832473360789304763830393990596483325556391563383526131388426655998362610795663009444329530380313582369506744601127066018505286584082074112032220681653032998814836135211241601616761559477125123260865574463289315537641250468595444847485104869371846138937594815717839233479424297762637589843061706537365341325349697086472650360732699495909942722893269089976271337217878676728476285757191230122449283410993290558727101211299826258005529280347023431637543174327095221833097882251371141896661614980087581376418853642047359092191718247759872, 194175487858295065586566223420720835354218714701012787036868166885106803179611016852320235121944886794854103233580220709024806072743993477154116046455972680314714490810103482613775169723949822599089353607462687446238694112422779778557153306320141326888706724709408146840971915646939721136724368012432988045478440516756541030644897102338343015620307071124895653986756365725579987250601332133147888516462970772662004254372283824275049130754409522022155104472953510056515893487814795314057133448327072939691256835996305152489881345263632544581620669637374642183724635278556621665654137071320546871015687481523597402928763713183489458838102245889150936728919959706046092027960728825776566021949524779914956226078468441681639597976295123311554992063660425216, 115807966653135071136266364151575193370063353963428994232152558690537462513652457844803096649471511022423130391640990718769139833768597282872892832632006932256100725142377601958457582836326282142674470340977659300588249614977457789078637672424804434580082554677223019302922992562279282682989740074843377451539592513262883913515900320935326048141177654658002842824967867990878423576079246988742657580816398545604320575322509216636723893917401586976250940528255869144608693606581992658961868351662299980182039083401570931369157275822911645710245831972301615048181855392924402552747776587682847866506513589721569586179062186510923857682304736484524409943982860419833114775174973677241133994963586243092033231181717755422868113246798964708435895447826989056, 35892864763676162390876495832131732661057713103645821857653105944898881372368808709419507620431545862639883539544774550258981962490994311035563824804791343118179784911204081384298523734092852978345353083620780025983844560713535542579917199852557029443606552741189260726705956142592472777625642697686483587065598383553745177190736612246797880186504227507540789056735743669295160656843457591270441961646851151123270490417727787782300206183313402455683157806373799412772262389178947152383087432869175216907112201344491993073522598897459497720231382736974467891671184580545749653915968971302794570679028312275641136161418552643700105215949462752782765599606395043723535992514850129235084780569665298381129831228968986167487292913320768400938041503014453248]</span></span><br><span class="line"><span class="string">HP = [182123398439336131233484419016500805950625530876289136147992418330368556518782504528500478328506268530182121028338611308706301778495117293952384271741141930454826813234222655694969514594179399691491676343267560926415204796892285953757083137635724586246679285504584200603423040990857955982592545447321735123888380669252758270022750955484747603018957220340523162322224297824154306196315662236519394066376582303992842999145368668536271548561974662730580382535581064544751603313110317522142473855128127879421866476758202400277448627166191464212616826131845112048518089279156877724351779259697512559047606602356481432326384500230304234630224805224043299183292854524931957718694768306272627669496947333830650701612740067754226344379590044087735385490127725862, 143170049879066655087340950742576943114220056125957541251904657597420632960015895981469092773424062349481612793313849969949143634455140221504418524950906026552571808412365313452770620316647140315635576351924131570731151371864300979486246561311374091503771233474221846682477948158595874825046725186096019808916856990568087679235183223125111635340379631262792582193894921427748477534899648278496684573736979116799130367368459501772350225298850161734598992871658808303947946703790369232633550983464071710073626283163523659905448412753809088559015473221667463885047754120012784534383142422681768521744011385759111784771218858429141270195947803513052066866898605116497618560152428747336114471742600059289342252682494024257280492765302681978041917175224445454, 181932081065216017223259767432026159751069100962417675256904857171174594214631105569878401257202843288868067795959660425655397502682572819329811836847256980387967545675607257191386494389870983892416162767006265255985611267066664459013834260578459679814704254643652527448346657946799415019242620362556994094217501805852227552561431064112972359577708305419407712233651342990435225577864469921706228376386943352990854043536613387681781610381704457332320684886669558444649325853462867815167473502469305672972117003639658784729134706896312010708005781941993559519054971159338636279746679220293668476785752715272037394473281514117697060980377364913173031572794672785720241295564153405600993322639561228795731008971285970805298272968367327982292736365952177736, 152197501838094386559667505260111556746524794647762036036984156853293482749405051706379215782024625767996604204199239858042655575156447769644733342469940464962491758196879181740442958683860120188153222622045687386550968060691333980045707578681522952010130720785366069103645756481641865768541014660604224000448808608848607142992914438243019336580286597455942208546183871629991237012627078724041815698483916930337697145596477943636313719062754662224057190310995369364817444976298713991954316505112491477110025799278176478205958831032614361098570277711286905522504386261323350696026797810604096448605140635754896533192146402989175530945145957561334345659035675075518654525640506611082619111666729303712983450765181951782352125875791130477959487243678637091, 13260127114160132039578764564277724908293717164091148143281881592450508800268944502885346275659282139962084615098549527321116911955505649119891798866789702019684393024690093331965422247341532921411724247274538089836518071897735012248880718279028139698315282234778842097294789834605571276706239190589177804771135138639650083317735678737873354475068162084129555751126946723880482765306519620594499615623179141020788167278111494656031619604249830332631535459164808166638124806843052957919064456863967475953053614347964520430672883482509352453640521720313380086324061829310129198351733197836811498655541708077300463414261809122652381872563486116022996781876662952751320598808796685963865092538114154484684417346701057121540968905340884852819266786655758589, 7726965701613058376939617426173930484905424609871511448979899585789330472291184137208473525618669017229437131718602138062693323242254540169837667647945751730728109543890184121875756549720616016417689684297714982752898170211522441794931085191911567142756874944612942983995000585648922927662513704308624388978740497618316239028274910398075357992565743563209649419566296437582035744561981287334953927069851636537379718348745797306743042426246174030053256711319421877929342022143063981126785133505358707977994735220823800241921524140116409926290245600210702333580796340264633188699655847265231481741281891892263047439742010063674785264961945504178892794083333407945969304699309469264200568906760592035714702098416830232068808480043043046899584880476365211, 180019050945153380400290419089497765220330628588910896281952550416089875088850281952204916892735263785902815673400396668990373595469072648699918494008065197996354855591310768398651316061183602708507734278231600299784123286043254063248471261126675877896352754705297219631260970186401862696837291306580096200621090959901083133979809165850290006958174043988594120292941019793669119321273860506863788556691180109910206811333775009617945993184652622929206661236756401337666271307645630166144277622050610823301758570383783302397752531144991093835433241988398747399949918853848203882961092951831645541246295873588649289531107814613167236073250185453276804880016561013769084225682634383784489652871867815664211238325551136693769474979447466046146633345857611195, 153629149463789849413429112784055293255734339122176408662359601604336509143473758509975758863274395783633189549584941125392600362702091233425733911049553699926215208790821097092121122480643207790283486114884596194662369389215802952635756543090033023067139610689568413680910122744788001731552268160061684744631583107942765508030881967516350806276166348479082293252825499156766363138008724860360262292088895234376252334258828427316419408016153682496909981178280572676774045522450227853270448821337580837554794712541359286413423248459963738684095208415746808201768526760043282181933350859027227907243501251390338333188167931974689538439823388790515993422873395205982049903304374197483641428361419371833919139638015039992779119950859870347438758668679332495, 276427336329209668688130277925589460360311327851014652110707325284581770430564994121969230515633704248812997375123175470056237355182594647858048847262042361717893313893682161435196235153101006253340527909451448103893104917041136181377802230394106849393237486928849495116195885563734324888330607632821513438897200091110205098807840437587357564885934968344589488833398453563587665373858111713149172110412979734635024012258145628247175689960363707897865274630069427102722542299814253018238192096822853168130596686909789751383470674093768125446566821380042192204089190375373896356618809538058749144194802493153530124585829617231928160073305696376878930156414497547968857648212679322981790227182840452493558367673102471438871220031633314842129410346869161197]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>题目名字取自《线性代数的艺术》《The Art of Linear Algebra》</p><p>Old函数来自<a href="https://blog.maple3142.net/2023/04/30/d3ctf-2023-writeups/#d3noisy">d3ctf2023 - d3noisy</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getKey</span>():</span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    N = [getRandomNBitInteger(<span class="number">3211</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> N:</span><br><span class="line">        d = d ^ _</span><br><span class="line">    d = nextprime(d)</span><br><span class="line">    e = inverse(d,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> N, n, e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">N</span>):</span><br><span class="line">    p,S = [],[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">        p.append(getPrime(<span class="number">321</span>))</span><br><span class="line">        r = [N[_]%p[i] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>)]</span><br><span class="line">        shuffle(r)</span><br><span class="line">        S.append(r)</span><br><span class="line">    <span class="keyword">return</span> p, S</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">N,n,e = getKey()</span><br><span class="line">p,S = leak(N)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;S = <span class="subst">&#123;S&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原理：<a href="https://s1um4i-official.feishu.cn/docx/InUFdQUKdozf8yx5IhGcf5zInSe#share-Sk0FdIDYToWLVrxbDjmcUZWanVh">2023 AntCTF x D^3CTF Writeup By S1uM4in</a></p><p>exp: <a href="https://blog.wm-team.cn/index.php/archives/82/#LinearARTs">SCTF 2024 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sn = (<span class="number">1</span>,<span class="number">23</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">14</span>,<span class="number">4</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">7</span>,<span class="number">19</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">8</span>)</span><br><span class="line">M = <span class="number">309169501373330124045649100152326414225457160505584328527283516968464416389302355829097052128714780092162406614467026044744098784954762500832278190406881802198303575338158311874491341970444579146638248815636164413771772581964591833455055886833879504320098506335328910379223983277573694356846337961823081287986674791459748001014087760336006966850192999063236788568848765812192775492248445517060690151700498331622538367493718859724934115228375142396923937735633684527869745420378950550480692200706066019831688796077313463059296313396035429537407627377675974680696279162072713257960965681304091009329215383850223530139165455326927677102783057396241883175412729216204807235187239596365892879371542214145426492827777125727970815789114727245511828912252143569</span></span><br><span class="line">h = [<span class="number">3565625090222584896920916237461241765625829204082396377386021101162536812411479309464325956424849651112502540095796665989782448302150047491000013081443589381171861802823657878857754676608742927932812781165716659755896099505195018830422885342733139127785165794897376463794696074605473512720672450888626374504772116915620258088753289255996096552892614801083370595759624402874902282635442418547645823133641783382626721416313803991932439793168113855890150599332984583295219543856049901518912201443065300476561372304830840276820139993555523469165273121628823953454126151208689489078628524850757272649061955436843893289237414654732290904213005377463766762255194199607599718375650615493280298611532927519686558670313416090562438894368509350896602591065538560</span>, <span class="number">286740894693471986151090603562932147965458822098297907353215124508138484491994267754471216888566417392843923796488725160656461314962959042706124173470952968241147487040483767911639159119505992553207913863135028688626896196178757909088128827455625174341894140582939848620368540355056452428553556546413465430152617836247505772663758606552662729528340901377490256234099815707208769579251833692482247933846648593307680305448986314447242583396656418769737861680456297522358131674037354880608888487272985141452871763297604747444764332049229204365395410106847606241968638474099061876569990163879954288002836750959104349076854993248516655758322107956062243468530601256243967323153547535726777712582210098524981336526310800007425464476736381605758610129914167296</span>, <span class="number">202445786178968197828946112166667682571891905248793492278433983415264905988886412319222803698650008275405441752508434114212113517053913972304515710532012288036732448805044856628337036478357496484044773293960097063848568051250774170422935810965491124102107450786197166927290614807575403261921855599437944525251033428950982061449203659272914014109623656149839199935645660386382459896840619916225080206084500617856222897968865436783548821187873430635315967325778835200418210099836625362334832448337496843986398001079590846483593452928602841826412074751479179471599709999916393508418744578599831517548843854866251289525136765297969136698285441109232446206843977149859059568434871554288377088102779550812057943402777376610057499017696210394059743209313009664</span>, <span class="number">114630215368349491250326648494149748728124718005857201833657753308980378360823813480094685056650954220208569495921715772409260048257134505583210349697604470912610748671738387322753221966031149012764535612682778184882174392537951540598166408100353995693537007226929298573802177602978136134506604598926968767277963229517115896872176785224081721198822306288029114228955110090342800494317915814873698062519566559427796027618459996738296291782097320521350172532923653864250838232011730592925952612867718426259229217480911558421879422300001641170190840092379605603655701803649801243406059797147753118709730213303123683329677068533772082060407549189564758770771711148071596602056935716438347268248190581386987972757911856155781563899140822797888004226036006912</span>, <span class="number">128249367678574240079270694387429301574447189368221420750047602082333294620192478593526403955673394674124614483528399397766799072294205407818283464218350759458734269850052374022374583516046462573242829813776315162366850512131805663098817008453376098230770350796562755291771240680188153978483320771657621585572523650775437065002970862224206343896650474078023744187172724827284900132434561870157274624749481073656218832950661419154809116630241897087363941068977482336058825222409922455565132842885044852488100437379745993397785019888492704177085025661715401393223084613786993440233186999961708361656323625565518221228007812487647507152403406194060777071074419667727156839380340460479471882700515901974677682591933244024896502221255164137619867236474814464</span>, <span class="number">59331241745881917257932833661253483407124868132789104057434303748460794035055450167305496229505776497962206681068504038089886777631651664100577079680933516972657892279730519042800959265778075851643260975944157575808540832473360789304763830393990596483325556391563383526131388426655998362610795663009444329530380313582369506744601127066018505286584082074112032220681653032998814836135211241601616761559477125123260865574463289315537641250468595444847485104869371846138937594815717839233479424297762637589843061706537365341325349697086472650360732699495909942722893269089976271337217878676728476285757191230122449283410993290558727101211299826258005529280347023431637543174327095221833097882251371141896661614980087581376418853642047359092191718247759872</span>, <span class="number">194175487858295065586566223420720835354218714701012787036868166885106803179611016852320235121944886794854103233580220709024806072743993477154116046455972680314714490810103482613775169723949822599089353607462687446238694112422779778557153306320141326888706724709408146840971915646939721136724368012432988045478440516756541030644897102338343015620307071124895653986756365725579987250601332133147888516462970772662004254372283824275049130754409522022155104472953510056515893487814795314057133448327072939691256835996305152489881345263632544581620669637374642183724635278556621665654137071320546871015687481523597402928763713183489458838102245889150936728919959706046092027960728825776566021949524779914956226078468441681639597976295123311554992063660425216</span>, <span class="number">115807966653135071136266364151575193370063353963428994232152558690537462513652457844803096649471511022423130391640990718769139833768597282872892832632006932256100725142377601958457582836326282142674470340977659300588249614977457789078637672424804434580082554677223019302922992562279282682989740074843377451539592513262883913515900320935326048141177654658002842824967867990878423576079246988742657580816398545604320575322509216636723893917401586976250940528255869144608693606581992658961868351662299980182039083401570931369157275822911645710245831972301615048181855392924402552747776587682847866506513589721569586179062186510923857682304736484524409943982860419833114775174973677241133994963586243092033231181717755422868113246798964708435895447826989056</span>, <span class="number">35892864763676162390876495832131732661057713103645821857653105944898881372368808709419507620431545862639883539544774550258981962490994311035563824804791343118179784911204081384298523734092852978345353083620780025983844560713535542579917199852557029443606552741189260726705956142592472777625642697686483587065598383553745177190736612246797880186504227507540789056735743669295160656843457591270441961646851151123270490417727787782300206183313402455683157806373799412772262389178947152383087432869175216907112201344491993073522598897459497720231382736974467891671184580545749653915968971302794570679028312275641136161418552643700105215949462752782765599606395043723535992514850129235084780569665298381129831228968986167487292913320768400938041503014453248</span>]</span><br><span class="line">HP = [<span class="number">182123398439336131233484419016500805950625530876289136147992418330368556518782504528500478328506268530182121028338611308706301778495117293952384271741141930454826813234222655694969514594179399691491676343267560926415204796892285953757083137635724586246679285504584200603423040990857955982592545447321735123888380669252758270022750955484747603018957220340523162322224297824154306196315662236519394066376582303992842999145368668536271548561974662730580382535581064544751603313110317522142473855128127879421866476758202400277448627166191464212616826131845112048518089279156877724351779259697512559047606602356481432326384500230304234630224805224043299183292854524931957718694768306272627669496947333830650701612740067754226344379590044087735385490127725862</span>, <span class="number">143170049879066655087340950742576943114220056125957541251904657597420632960015895981469092773424062349481612793313849969949143634455140221504418524950906026552571808412365313452770620316647140315635576351924131570731151371864300979486246561311374091503771233474221846682477948158595874825046725186096019808916856990568087679235183223125111635340379631262792582193894921427748477534899648278496684573736979116799130367368459501772350225298850161734598992871658808303947946703790369232633550983464071710073626283163523659905448412753809088559015473221667463885047754120012784534383142422681768521744011385759111784771218858429141270195947803513052066866898605116497618560152428747336114471742600059289342252682494024257280492765302681978041917175224445454</span>, <span class="number">181932081065216017223259767432026159751069100962417675256904857171174594214631105569878401257202843288868067795959660425655397502682572819329811836847256980387967545675607257191386494389870983892416162767006265255985611267066664459013834260578459679814704254643652527448346657946799415019242620362556994094217501805852227552561431064112972359577708305419407712233651342990435225577864469921706228376386943352990854043536613387681781610381704457332320684886669558444649325853462867815167473502469305672972117003639658784729134706896312010708005781941993559519054971159338636279746679220293668476785752715272037394473281514117697060980377364913173031572794672785720241295564153405600993322639561228795731008971285970805298272968367327982292736365952177736</span>, <span class="number">152197501838094386559667505260111556746524794647762036036984156853293482749405051706379215782024625767996604204199239858042655575156447769644733342469940464962491758196879181740442958683860120188153222622045687386550968060691333980045707578681522952010130720785366069103645756481641865768541014660604224000448808608848607142992914438243019336580286597455942208546183871629991237012627078724041815698483916930337697145596477943636313719062754662224057190310995369364817444976298713991954316505112491477110025799278176478205958831032614361098570277711286905522504386261323350696026797810604096448605140635754896533192146402989175530945145957561334345659035675075518654525640506611082619111666729303712983450765181951782352125875791130477959487243678637091</span>, <span class="number">13260127114160132039578764564277724908293717164091148143281881592450508800268944502885346275659282139962084615098549527321116911955505649119891798866789702019684393024690093331965422247341532921411724247274538089836518071897735012248880718279028139698315282234778842097294789834605571276706239190589177804771135138639650083317735678737873354475068162084129555751126946723880482765306519620594499615623179141020788167278111494656031619604249830332631535459164808166638124806843052957919064456863967475953053614347964520430672883482509352453640521720313380086324061829310129198351733197836811498655541708077300463414261809122652381872563486116022996781876662952751320598808796685963865092538114154484684417346701057121540968905340884852819266786655758589</span>, <span class="number">7726965701613058376939617426173930484905424609871511448979899585789330472291184137208473525618669017229437131718602138062693323242254540169837667647945751730728109543890184121875756549720616016417689684297714982752898170211522441794931085191911567142756874944612942983995000585648922927662513704308624388978740497618316239028274910398075357992565743563209649419566296437582035744561981287334953927069851636537379718348745797306743042426246174030053256711319421877929342022143063981126785133505358707977994735220823800241921524140116409926290245600210702333580796340264633188699655847265231481741281891892263047439742010063674785264961945504178892794083333407945969304699309469264200568906760592035714702098416830232068808480043043046899584880476365211</span>, <span class="number">180019050945153380400290419089497765220330628588910896281952550416089875088850281952204916892735263785902815673400396668990373595469072648699918494008065197996354855591310768398651316061183602708507734278231600299784123286043254063248471261126675877896352754705297219631260970186401862696837291306580096200621090959901083133979809165850290006958174043988594120292941019793669119321273860506863788556691180109910206811333775009617945993184652622929206661236756401337666271307645630166144277622050610823301758570383783302397752531144991093835433241988398747399949918853848203882961092951831645541246295873588649289531107814613167236073250185453276804880016561013769084225682634383784489652871867815664211238325551136693769474979447466046146633345857611195</span>, <span class="number">153629149463789849413429112784055293255734339122176408662359601604336509143473758509975758863274395783633189549584941125392600362702091233425733911049553699926215208790821097092121122480643207790283486114884596194662369389215802952635756543090033023067139610689568413680910122744788001731552268160061684744631583107942765508030881967516350806276166348479082293252825499156766363138008724860360262292088895234376252334258828427316419408016153682496909981178280572676774045522450227853270448821337580837554794712541359286413423248459963738684095208415746808201768526760043282181933350859027227907243501251390338333188167931974689538439823388790515993422873395205982049903304374197483641428361419371833919139638015039992779119950859870347438758668679332495</span>, <span class="number">276427336329209668688130277925589460360311327851014652110707325284581770430564994121969230515633704248812997375123175470056237355182594647858048847262042361717893313893682161435196235153101006253340527909451448103893104917041136181377802230394106849393237486928849495116195885563734324888330607632821513438897200091110205098807840437587357564885934968344589488833398453563587665373858111713149172110412979734635024012258145628247175689960363707897865274630069427102722542299814253018238192096822853168130596686909789751383470674093768125446566821380042192204089190375373896356618809538058749144194802493153530124585829617231928160073305696376878930156414497547968857648212679322981790227182840452493558367673102471438871220031633314842129410346869161197</span>]</span><br><span class="line">N = [<span class="number">4708767973081528023168573044926947658934563237858334014553630859725073243020070244020323437568857351830649743859959646887898299257997756638988846262162225538150844234728800901619698537585321714737408891139629868705840516091582428355548389333579393366732136328125608177487216053734023682113947465331733121489462179165899299048240920229183682356939757096088786234579408711573077204737627084462804644499357094804766876894598825249043115135941089964419043192271077333533836683714152246274269275845933219181872804910838148500474338484859566768928323323696593636427339969267716019100309031892715209683025623234849975307895464735938269345261085730940438716186759614397893026604088677569875434747734189181898326976271333880519091162243501684748772834879792466167298445248175389229863559724478950676239029563324439151410551016381722349890838522197681991628177446461063518141690992447334581300512508825465773880798288272307683989638417146518341759409532797706182846677683088799389298442913402623990449375457033755593868634385631727615347806721806133833528169502472979214964819710255598682819988670354516207520930840846409283073132470934614504680149148109547327387128</span>, <span class="number">4757198203620517143794765267604910493095795311094844413566274009869422815376931718621111117720580862471228813640782198531229515409492088342716220409459294106798101497134472448055953391458449615655883569377639584785792037490637008896514256848581385592600392551703912018079100854217522198951577317337556739332611249483750861591471361102817980105618251176982532225925868963026374151704775667344390422704242645383621060217900910676145748677959579644075866382652086161488831984079972317159657461445978388945681856038986811445908140377206321348009622114851489781036278426519737408135764885954436938515738043892580743425673981360461070462908536332822794776088234668628449143981506340546641308234562402879135337884598144313548476080080962124542821840798480021922299823316621378339539256908347988338628419046446674406990757549313633108810078738483720680863724859040219773337068945695687121911253430253587301225650819603987822575293873532089535898090592951682697252063802367371242789695773831799667985750759719425970425220081258951184137162408616858019436997238183928421723980296980798950610385592319308327154531476138800136312518846802765954214365914041476203757337</span>, <span class="number">6260271268368706894202974920946115816115188845950571520120237970780456710181625399191815712263295472756034586427599379898262163506345593709273928257662728399380574888160529638378436853600598725534540806652324850389757476281756735845783599087526351180190180139943641017569296099292328888806237289130258996981708670174820278524214983689399448597554658220262958254111796900005957872836524047027248224009678666687059095250936810852151693689372463475871131804815995086151489932749015367503707566646168543559329995430826214785289399237561801106879050821209356674239156802503644079619246307005947499697048165246090399224583386662856418159406153045112389578610112884722561317474613223969247465110876733154365833653766670591182883748950599184597459451023018923986740823422847776477251228945891945110718801722689014727114600716017461034657905080746051450682341174623694412770748416067562147608676787115664079694740229658768883676007735585302992187985545889841844207997767110661190243665453593887637904815895612475962686651476815216373738691281464231603892192258663603805169129206191963018210558191982895602850794384470480439972160449513110567887479836047302452135888</span>, <span class="number">6161793207250013570797494234756863397687080181041186816510731291567176964871299327425161851000502133616445905545531485092782385404041730710533771516272296260139106262837045978407656569083562960240430143953182872721497919817738097177263894944222857113121363337781621399861405325519661397750650874898849009802029130305463677312304078131181871898101631087128697192274897356282005646008697649963131201254871475995928275305320556086006088128239082086163782197407584036392884463747225854055014943229340033950065532544200471398723205500231850723533281903111082599734091365396955333349482559770719578251813462590706656471763646813281656772911915024807145645116212156844738463959217823508368154961196723637895297169191405377520750927947802043599975698558877410529027492345619645237927808806733871312048058455663977107878895407852707884088540180890336765740110413731459452344098461419475522191143944664261366926729675317507881727662169113782771947216802243911334262937983559135325080238705366056906997256129306810348258375225984493780977743341116832970140796350402745775226375788074753521350783230020812134140236301025901668281115159305901415422206987085370858066269</span>, <span class="number">5267100693182061105730551422489643540472923253344858672829540425125549614545517974151020398921688128633463338201696945711692006625533952520675663953435215640254400144384021788296437952295630144531875430006662659204735339513612937747300690975152254687383851907004699080078246815205272862884819962563583709162951938168651122403816704823240343148984849052071344742966140663479545160161891038795021005824785201224740312627751177962698791365953051062125124631517160554905455034441596801387892708418733289720382137134217321023480754271334411737655663911742743379367211836655413833046809287316198567758398099507836748909475684560648862129109215885785350168408133761242986824416885584016563597042318941491607601916235825203815086942024474490600481448768349379411212751270310366491544379921291543419341283687345109153982628296204543023859925826685469821151914476990441860923730919468020858122071746051689404035881537671338183844004088076685884238045583556513903826491906404174921979456819918682587206709900934241429913962679932661728908721833896616558835408359984415356236268647069278014603145980640981685074203726122245804585576864570087837482099247739294141035890</span>, <span class="number">5162462814705830591601757376531580617962980722403860234905920908299226731642697660834062549253889060413582755540683840527590402598309292144634913928493684897634026400339692714877009619925511459557913855424295023769775919308444940184747166494266238050276777931643495773847639808703736355223665406475063566148705548335364296830010828283139460292230614687838615753541726131196560029100050195754636309795046308972667554449870028896291390509825562866566753548725869548300148118248199008659299384530905921374513316080454719000877425832863571720472457086847361813854111114685439836714224053286475965744567790207708742674926310351861894865947779584948049698707673768371373918446778517383025648688912089703505285614188439850563597285583239548312224985023338206695155667114379116735062274283039053343181685187030995365075860438677740533389912977636779534737611121255353144444539805398264156597424296852236178999176280407869137812059519852854227409821361739328382172147484474598330834231253101620464739958721313307557310630658583227970770925442542614938853185074197289765329548898637710934105828092320314995861512401925698459527301008129587508663300976103582691406329</span>, <span class="number">6649140979338456571158429374761368976760897710563670809989890282564819118295968633253126877738743634574178324588347360999109654250203505446645264243862842773037458910733859532771418249905981724788494047828456297537358027611207564966158833422897801306463678091448651436675177575228180399059770500794299202538793991793715577351275797766530152153411600676871886097072242958098977594605566348348077157564485377174750284601054375434000998831418901922859174972743257061224425971554461206090504739578847831511868372195473605698051924047323926357992639844245241530482169858597053880045908507421334813726840443799059925292152941459743371594065485699848084734048258449842126422825748254943886650245834046000859421996571550628913365757741911805689672613681956053650621171318720373169110948302105966259138646285605526419760870027645621420086903821938660758287092369250162394396069903163040783688282754629702138245639816886110434223650277763762146197629203795536018850536141079818130315726472981011798788145047831400800104941467963560742030587803961011406665989707119203029072724379029255146763396458848588845250860460087705139017364841131584553084261236589840567231115</span>, <span class="number">8168899029436395364692795593454232091036895599299948532318117116761393743517363132040095717421310359886980194278574472752877597027831839269549478532824129025236038620617032161126275880117012733220663088765166386992128318605644682434157303472033114226244042491860831907943944385264807530903432209485335428051765698702236380741158022406966110626996564136995879680255584735620931684300406112940791753724686246177373719477409443805340508407271623600560048564456186718261926657788265024567080421123194446144350220988492915621488821041300967104356478792251056087399295417830012323918634732984397827312725359183799110612369154471402684865816910493101455171496774742868308775025008426308689577183723449767411860172769412831516068467423654361481150778688163873289257543387795000239433328964159788401420526701226020305803077613816241677014525695074869857889551125509606726969238902042603055324099406019845092024315378384244899067817657498781699847056755756305090888500491550951798253312111755731293758640169004727405603324877175792935993907723035063148626560320654315766808106279518275234003648568369068445294368160230173866752646135861124778765265799548196973867083</span>, <span class="number">8348630270723354493259182662280256138260984518645746593667609152172200543368791155781610034705382149116073810157083636491593342048500244849992273240870345219139548905864169823740036269685761712875185295005795011713290788619359071379858460522236775818361332781019774889153143160640289498757523950068323648270562870966738306831411512420250518077740866650218710375848351296764798825019680669672283959800438993128897746882302470029554463934996995852294557710390386205753571641443778636582466556779747198127259012343546939196316101726936179678869635657503961280742013966843015995054185322302213840241951308386430130853824474928135500515801416146914710217114055520545329040857808495435760870297028244685615913662379773001282252136567046017267524561778582225767660117427092321259032752810132072409463138045662126659710939114478573375541008788207604185460451732171130915353273180416088674263524187868200290716709009289611552439414244264307019110062959894298787028141363833933954570552640934724192185218839864496952232527292389065191847375759617741353754085474868428783331198953111049699320373291090508097919660355754676246066640628895632143964450990654344557521069</span>, <span class="number">7726831311120969667286676592403441701512343495771759595629785321550119249644571082006424753729259901152855905549575899671022335982897040803453216794947911780419686187362424073688945148258991392041323175944115695610151062237998737207532655886657783150963960487522312687070992046702312826656154203430943225796164331305527437083199579169825818279603934499581711670668575469548299481488573326324516734333715194276156576911471181662401295110905521344328843364263266129959859971118962804424704413661908545020969283095679398223297390235824761477375366945842800143476151085833896884718691661714630912968013073013104434053458640714016248264740997545992627552672186322557838280045950726482212669932488114974561483649649343351383079229160959763945558229458520499002180726691094328237258488394522243146090593391749685728759669465130144680082447002028407767776163606617586922657685747599033208438283307659679842041118085579668732756550384596900502053559212745516751792471902256165217537009215366998260822980760315269694838384961847286261164711542277930750072577589856553801522064437618672340945384244416472323053109000837918927226504900813896251975043551278638686816600</span>, <span class="number">8968987938285629240617948467051722149435886509885917763702216023345163109408008270074497543745519530151727556445965569928064735553842420658363105354603157741513670092574436931684427533004293025174123211350576325462462728173969659328044176693572836987586843534848767744838915664703795066304995144232775776719684341951288404229427737359829908086515688446968804720256450440740554026234583056194840461812571345063022497618452164244399064143015908802097217223686160923487482128401427287211150957007532604060924748188413765319265476359003246903423627697147853804755622152986104284873244936617499607798371070741456764348449390632888951118224263493105655590070674764648551070192078583578526360502851230389510368542480849419415776680448771842692080714330462141377172776639342423547593542143697721489001493956464552425938839078532555244925474302588008504589741481918230978326756267199383667581554665587203792785117687376740308864938312069141550084292037723021721526360898235687411336322596033250361165611568719666023228289044833814946966001201457127207654701760716948299453573467357365173035098058373763257492533651132315313675859682126048380654035006075378213512850</span>, <span class="number">7981300019463606853645352354110454207007963102699814810128329537083106249518020509353881747469691213962041447075534592554800201716395600169812666423547654647216056917036860743064514973260346867602517821548669448924211780932485599886400445610649739421099882097549967866880829246229787450449059971489576015715787410828345050220204978200536832411751040623033858384912320534739748796882552734773421901507215135947451320140935277892450174654890975094402518109597906730748405400748382469679816784673362045356083139155359591704108640141917041597791524174369890083212795202978903412063960807930472386855123567308465089478006084042182169516466820283101313148266686715761200797434844620433263697936837701107747168094805538318176902690905917499115693764028070596073697300767536537007725317688748133781561284802092913444702161405517458223464417714034008377178164362285049507597059288060180058818698919377790553612175874518622793698218102224051521107503886448082425743555552309815616702183003622979948216873290689171900287099186521998579816991709156690517943166036708228475309376571947151063442554173341314451731540846796394647906918189315603488625718991167109109441699</span>, <span class="number">8053949430128058736708330982906026162346773786951962707477377101777058242801007842181442746054610551608666559611029165144063561614759820757548225059588087313841573148394520309002827216589638275239334793449783092318479700059809103682436713164194645767910291168510557638317105084174050513221194586162203825546191033272816915870028264519751697411957354349165230156480027095939108261368710812419225111377372883532631725062501991104272312271255510050844502441333677751355812097260514749055329520065637868793833688413892473014232649053996112987455991518662251827123549802055887571242792799583110306730355621628302313062996259840244305807273011732866410287826874488872453781710856778871401375679814443520824603580452474855189342395110638273615179938147555840874259012907218023572652847214686130227965586647311515107958064415525381433617475969034987505420603573352140081128608334982896669199214199448709617966625060883419870514753767191294318841698194268723033013941022212971302167731491667809365275966891261708391926440281900219279073115225382752847769857432906026198605226319148466827285645932052675358429203226977659737234434640735112859550455233620742149348515</span>, <span class="number">8264014184390678459431963025444652884315751112129854103761033650412275599386660038666338159535214473011793266693168650966704085926681262381060690324388830604526720439157855283330104990205531644029394089918099069424195662916249689696331577774197690433979549390480631920943549581519819420554827810799813408453063987652445065224658234644844358306074228160797677340787978458015711304185719485869872732104605633736337011512390062859695704995352867994139390608892491518816458657963325348577277439783308813686552035153580982401500288078232305088325632693453080869510895559823355094604561324011430087954661396733141318517760564290498006961636179876067622914270758203467983997905032905498851751563622883053949650887664160492755038974752910838158810621559557184391008285665891766784390028764051693932492452433301224682101683062283643627198653837174652966208993532825144184381513325438166827346447550241245993804609103053501492425520646699735895117304029788374781093967641293198305409329697345059675232523756122154910323178134511811319030929739178393030120406758241710174023510989641269517397544687595880790143844069641729506984480100714419183377691762015678350855733</span>, <span class="number">8197614472976564826643805692387748902382231595140091921427785594469933331864324068149454235551122573770580341036414811684536613106059968213702888284610759402677704024532574516958084089986352868577017096762040885501116724262235939059151197407681729866066462454074351781506304299339989509379421657175059631661116110149217564804057413741242286095962835706908328494364207192381721058637591782950789643136832163523709426526975927906259057541081546572431625289123769530148975136874725537772157308129017570063675768362991647276152247376650975772962711727994296401371064100761465386879772102498345755204834897929399465394316365626339139266927057793990428490206909995298467482606929255737515631743683366009509811786534329422317077160491685254071369613377869754622038738489939001839103620135513064060990755038467978354969488776716385110720910809577563738347713062890775330591398926770331780091632371098886407210177616672034004946982883842065582512336197295578641216627556216579933640245117292266648820948174210370438368865813680305270544656236504768163487330733693670528547973330215600464351561237973400164120886675353013749961731731842851140559948561880478230548401</span>, <span class="number">8834800045593362902198799767369300022092739522708918588280171689107921315060623144724888627556752979723746097152635704221940182971286007100897372548535433164426273846769200240220287132915053772370477791687829680161208845697597533621787205303964637259104738026995995462617548183418397012946969405284296327254644393464208323821183010552894274496412115092034614562901058572199636008134361031066643623555792048843898093422478254031878583059691427616338060028991041221490748234116463103210913627314395598475575722058184148640647150280282107180517686443120464597184528429998726408553161359694577698878579874132614615459966187610014116851090533308075437178769898624328646728698032117444312981110766955362657506174542945555695353565990488401784607316208882111830794602810124866560344910289371341273390325016891951067302834751066290180312170378102920893423076557975854973130215888106050603347435515489954847107514170969224648254467562815265331425648036292531242450167955381484530658763535786676230345545395561448233963471448760217709519041696908041948882219445487445489093869315775219079573075079837804117998658205925582021832384518414608474368428879771984256707799</span>]</span><br><span class="line">N = <span class="built_in">sorted</span>(N)</span><br><span class="line"></span><br><span class="line">delta = <span class="number">625</span>*<span class="number">2</span>*<span class="number">2</span> - <span class="number">25</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">m = matrix(<span class="number">11</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    m[i,i] = M</span><br><span class="line">    m[-<span class="number">2</span>,i] = h[i]</span><br><span class="line">    m[-<span class="number">1</span>,i] = HP[i]</span><br><span class="line">m[-<span class="number">2</span>,-<span class="number">1</span>] = <span class="number">2</span>^delta</span><br><span class="line"></span><br><span class="line">ans = (m.LLL()[<span class="number">1</span>])</span><br><span class="line">MP = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    MP.append(ans[i]+h[i])</span><br><span class="line"></span><br><span class="line">D = diagonal_matrix(GF(<span class="number">0x10001</span>),N+MP)</span><br><span class="line">Per = (<span class="number">1</span>,<span class="number">23</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">14</span>,<span class="number">4</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">7</span>,<span class="number">19</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">P = PermutationGroupElement(Per)</span><br><span class="line">PM = Matrix(GF(<span class="number">0x10001</span>),P.matrix())</span><br><span class="line"></span><br><span class="line">AA = matrix(GF(q),<span class="built_in">eval</span>(output[<span class="string">&#x27;AA&#x27;</span>]))</span><br><span class="line">A = AA*PM^-<span class="number">1</span>*D^-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = block_matrix(ZZ,[[q,<span class="number">0</span>],[A.T,<span class="number">0</span>],[b,<span class="number">256</span>]])</span><br><span class="line"></span><br><span class="line">ans = m.LLL()</span><br><span class="line">最后解矩阵方程拿回flag</span><br><span class="line">b = matrix(<span class="number">1</span>,<span class="number">625</span>,[<span class="number">11852</span>, <span class="number">40039</span>, <span class="number">61221</span>, <span class="number">5696</span>, <span class="number">17099</span>, <span class="number">14562</span>, <span class="number">55346</span>, <span class="number">24521</span>, <span class="number">416</span>, <span class="number">35663</span>, <span class="number">23856</span>, <span class="number">24647</span>, <span class="number">13107</span>, <span class="number">7521</span>, <span class="number">51455</span>, <span class="number">58642</span>, <span class="number">33535</span>, <span class="number">44484</span>, <span class="number">37656</span>, <span class="number">48854</span>, <span class="number">42195</span>, <span class="number">1308</span>, <span class="number">63347</span>, <span class="number">59701</span>, <span class="number">28030</span>, <span class="number">31542</span>, <span class="number">26059</span>, <span class="number">50134</span>, <span class="number">55345</span>, <span class="number">44748</span>, <span class="number">3842</span>, <span class="number">33871</span>, <span class="number">16793</span>, <span class="number">6286</span>, <span class="number">39608</span>, <span class="number">5457</span>, <span class="number">20485</span>, <span class="number">3567</span>, <span class="number">8168</span>, <span class="number">34256</span>, <span class="number">25223</span>, <span class="number">6415</span>, <span class="number">20080</span>, <span class="number">30336</span>, <span class="number">8848</span>, <span class="number">59707</span>, <span class="number">13262</span>, <span class="number">29709</span>, <span class="number">14596</span>, <span class="number">62602</span>, <span class="number">63386</span>, <span class="number">3827</span>, <span class="number">19507</span>, <span class="number">12452</span>, <span class="number">24685</span>, <span class="number">54285</span>, <span class="number">52438</span>, <span class="number">28929</span>, <span class="number">56574</span>, <span class="number">28561</span>, <span class="number">25717</span>, <span class="number">23923</span>, <span class="number">61018</span>, <span class="number">58933</span>, <span class="number">27128</span>, <span class="number">25843</span>, <span class="number">13247</span>, <span class="number">39971</span>, <span class="number">10576</span>, <span class="number">39854</span>, <span class="number">61019</span>, <span class="number">38557</span>, <span class="number">53816</span>, <span class="number">10965</span>, <span class="number">17248</span>, <span class="number">57949</span>, <span class="number">7647</span>, <span class="number">18572</span>, <span class="number">39844</span>, <span class="number">43080</span>, <span class="number">37216</span>, <span class="number">54036</span>, <span class="number">18092</span>, <span class="number">51799</span>, <span class="number">29800</span>, <span class="number">3831</span>, <span class="number">32640</span>, <span class="number">52752</span>, <span class="number">54334</span>, <span class="number">47114</span>, <span class="number">23999</span>, <span class="number">63426</span>, <span class="number">35409</span>, <span class="number">6725</span>, <span class="number">35138</span>, <span class="number">611</span>, <span class="number">6343</span>, <span class="number">32554</span>, <span class="number">47441</span>, <span class="number">51995</span>, <span class="number">20627</span>, <span class="number">34208</span>, <span class="number">59523</span>, <span class="number">15423</span>, <span class="number">60577</span>, <span class="number">8577</span>, <span class="number">56130</span>, <span class="number">47819</span>, <span class="number">14444</span>, <span class="number">56929</span>, <span class="number">38101</span>, <span class="number">9739</span>, <span class="number">29166</span>, <span class="number">28463</span>, <span class="number">12652</span>, <span class="number">22462</span>, <span class="number">35326</span>, <span class="number">13440</span>, <span class="number">59746</span>, <span class="number">1207</span>, <span class="number">43882</span>, <span class="number">24120</span>, <span class="number">27102</span>, <span class="number">52356</span>, <span class="number">31830</span>, <span class="number">15592</span>, <span class="number">44657</span>, <span class="number">48958</span>, <span class="number">32867</span>, <span class="number">8892</span>, <span class="number">46502</span>, <span class="number">21090</span>, <span class="number">52511</span>, <span class="number">32619</span>, <span class="number">22922</span>, <span class="number">48915</span>, <span class="number">21674</span>, <span class="number">64327</span>, <span class="number">51958</span>, <span class="number">46676</span>, <span class="number">12863</span>, <span class="number">10512</span>, <span class="number">16039</span>, <span class="number">30091</span>, <span class="number">59779</span>, <span class="number">34719</span>, <span class="number">14311</span>, <span class="number">50715</span>, <span class="number">29678</span>, <span class="number">44376</span>, <span class="number">29631</span>, <span class="number">56860</span>, <span class="number">48974</span>, <span class="number">20037</span>, <span class="number">26098</span>, <span class="number">5284</span>, <span class="number">27542</span>, <span class="number">47172</span>, <span class="number">43764</span>, <span class="number">18451</span>, <span class="number">3263</span>, <span class="number">25830</span>, <span class="number">2926</span>, <span class="number">28343</span>, <span class="number">58647</span>, <span class="number">16515</span>, <span class="number">15335</span>, <span class="number">58666</span>, <span class="number">29106</span>, <span class="number">1406</span>, <span class="number">33913</span>, <span class="number">37911</span>, <span class="number">15982</span>, <span class="number">34556</span>, <span class="number">10982</span>, <span class="number">27882</span>, <span class="number">27757</span>, <span class="number">29930</span>, <span class="number">38500</span>, <span class="number">33448</span>, <span class="number">38453</span>, <span class="number">9745</span>, <span class="number">18200</span>, <span class="number">41092</span>, <span class="number">42055</span>, <span class="number">9758</span>, <span class="number">52276</span>, <span class="number">17265</span>, <span class="number">19940</span>, <span class="number">11277</span>, <span class="number">21090</span>, <span class="number">6473</span>, <span class="number">45768</span>, <span class="number">24909</span>, <span class="number">24577</span>, <span class="number">20043</span>, <span class="number">57739</span>, <span class="number">64145</span>, <span class="number">42296</span>, <span class="number">57394</span>, <span class="number">35014</span>, <span class="number">7510</span>, <span class="number">27676</span>, <span class="number">33453</span>, <span class="number">50441</span>, <span class="number">12646</span>, <span class="number">56144</span>, <span class="number">27805</span>, <span class="number">40516</span>, <span class="number">3166</span>, <span class="number">4649</span>, <span class="number">15125</span>, <span class="number">3329</span>, <span class="number">61754</span>, <span class="number">31426</span>, <span class="number">62120</span>, <span class="number">64994</span>, <span class="number">49076</span>, <span class="number">40920</span>, <span class="number">52502</span>, <span class="number">27858</span>, <span class="number">44887</span>, <span class="number">33034</span>, <span class="number">18523</span>, <span class="number">20572</span>, <span class="number">48449</span>, <span class="number">17993</span>, <span class="number">31161</span>, <span class="number">38692</span>, <span class="number">46532</span>, <span class="number">43382</span>, <span class="number">31086</span>, <span class="number">52760</span>, <span class="number">58239</span>, <span class="number">20511</span>, <span class="number">63662</span>, <span class="number">34385</span>, <span class="number">64754</span>, <span class="number">31340</span>, <span class="number">7817</span>, <span class="number">7925</span>, <span class="number">62468</span>, <span class="number">14102</span>, <span class="number">8897</span>, <span class="number">57085</span>, <span class="number">21282</span>, <span class="number">31424</span>, <span class="number">23070</span>, <span class="number">16375</span>, <span class="number">5081</span>, <span class="number">59000</span>, <span class="number">62711</span>, <span class="number">1559</span>, <span class="number">10184</span>, <span class="number">26565</span>, <span class="number">18232</span>, <span class="number">49036</span>, <span class="number">28899</span>, <span class="number">24721</span>, <span class="number">48155</span>, <span class="number">39456</span>, <span class="number">22957</span>, <span class="number">48313</span>, <span class="number">14579</span>, <span class="number">35483</span>, <span class="number">20248</span>, <span class="number">4218</span>, <span class="number">15647</span>, <span class="number">29873</span>, <span class="number">43251</span>, <span class="number">18108</span>, <span class="number">5607</span>, <span class="number">16129</span>, <span class="number">46448</span>, <span class="number">30421</span>, <span class="number">46554</span>, <span class="number">4355</span>, <span class="number">48089</span>, <span class="number">39527</span>, <span class="number">14731</span>, <span class="number">33222</span>, <span class="number">18328</span>, <span class="number">12914</span>, <span class="number">30188</span>, <span class="number">59710</span>, <span class="number">1168</span>, <span class="number">15763</span>, <span class="number">28014</span>, <span class="number">16019</span>, <span class="number">62362</span>, <span class="number">33445</span>, <span class="number">52360</span>, <span class="number">26174</span>, <span class="number">25300</span>, <span class="number">46178</span>, <span class="number">58779</span>, <span class="number">9457</span>, <span class="number">47277</span>, <span class="number">57732</span>, <span class="number">22475</span>, <span class="number">24157</span>, <span class="number">65435</span>, <span class="number">36452</span>, <span class="number">1248</span>, <span class="number">64663</span>, <span class="number">10301</span>, <span class="number">56700</span>, <span class="number">10176</span>, <span class="number">8436</span>, <span class="number">13027</span>, <span class="number">14493</span>, <span class="number">16129</span>, <span class="number">54871</span>, <span class="number">64243</span>, <span class="number">36832</span>, <span class="number">64269</span>, <span class="number">25810</span>, <span class="number">60247</span>, <span class="number">14368</span>, <span class="number">26154</span>, <span class="number">17881</span>, <span class="number">20932</span>, <span class="number">39373</span>, <span class="number">51088</span>, <span class="number">51334</span>, <span class="number">54154</span>, <span class="number">32771</span>, <span class="number">57346</span>, <span class="number">4199</span>, <span class="number">59130</span>, <span class="number">34447</span>, <span class="number">53487</span>, <span class="number">15647</span>, <span class="number">3160</span>, <span class="number">65020</span>, <span class="number">19196</span>, <span class="number">62035</span>, <span class="number">45262</span>, <span class="number">65128</span>, <span class="number">62302</span>, <span class="number">57896</span>, <span class="number">62398</span>, <span class="number">24696</span>, <span class="number">37237</span>, <span class="number">52966</span>, <span class="number">41938</span>, <span class="number">61626</span>, <span class="number">53222</span>, <span class="number">47046</span>, <span class="number">22868</span>, <span class="number">3294</span>, <span class="number">40114</span>, <span class="number">49910</span>, <span class="number">2997</span>, <span class="number">16339</span>, <span class="number">24335</span>, <span class="number">8406</span>, <span class="number">29568</span>, <span class="number">51388</span>, <span class="number">13031</span>, <span class="number">20114</span>, <span class="number">20393</span>, <span class="number">38655</span>, <span class="number">17408</span>, <span class="number">56918</span>, <span class="number">8070</span>, <span class="number">56300</span>, <span class="number">37248</span>, <span class="number">32428</span>, <span class="number">3535</span>, <span class="number">56734</span>, <span class="number">53590</span>, <span class="number">34975</span>, <span class="number">25470</span>, <span class="number">63388</span>, <span class="number">32317</span>, <span class="number">33244</span>, <span class="number">58451</span>, <span class="number">57760</span>, <span class="number">19552</span>, <span class="number">5913</span>, <span class="number">35267</span>, <span class="number">58273</span>, <span class="number">33286</span>, <span class="number">9758</span>, <span class="number">18038</span>, <span class="number">13483</span>, <span class="number">18722</span>, <span class="number">15900</span>, <span class="number">65430</span>, <span class="number">64453</span>, <span class="number">20836</span>, <span class="number">35913</span>, <span class="number">63476</span>, <span class="number">21980</span>, <span class="number">2640</span>, <span class="number">174</span>, <span class="number">15632</span>, <span class="number">58250</span>, <span class="number">50263</span>, <span class="number">25277</span>, <span class="number">20557</span>, <span class="number">21974</span>, <span class="number">44194</span>, <span class="number">4401</span>, <span class="number">44431</span>, <span class="number">111</span>, <span class="number">55798</span>, <span class="number">34275</span>, <span class="number">23980</span>, <span class="number">21805</span>, <span class="number">12520</span>, <span class="number">29968</span>, <span class="number">32463</span>, <span class="number">20932</span>, <span class="number">62738</span>, <span class="number">126</span>, <span class="number">61414</span>, <span class="number">49719</span>, <span class="number">62041</span>, <span class="number">7973</span>, <span class="number">63793</span>, <span class="number">44161</span>, <span class="number">39931</span>, <span class="number">57845</span>, <span class="number">5248</span>, <span class="number">3353</span>, <span class="number">59633</span>, <span class="number">25634</span>, <span class="number">34262</span>, <span class="number">38935</span>, <span class="number">55423</span>, <span class="number">57017</span>, <span class="number">35859</span>, <span class="number">32984</span>, <span class="number">34761</span>, <span class="number">18603</span>, <span class="number">8280</span>, <span class="number">62355</span>, <span class="number">54037</span>, <span class="number">35031</span>, <span class="number">34161</span>, <span class="number">21867</span>, <span class="number">11730</span>, <span class="number">40771</span>, <span class="number">24174</span>, <span class="number">43433</span>, <span class="number">21832</span>, <span class="number">22219</span>, <span class="number">41759</span>, <span class="number">45711</span>, <span class="number">52981</span>, <span class="number">322</span>, <span class="number">48561</span>, <span class="number">23634</span>, <span class="number">43810</span>, <span class="number">51549</span>, <span class="number">12411</span>, <span class="number">30193</span>, <span class="number">43445</span>, <span class="number">62341</span>, <span class="number">30797</span>, <span class="number">32034</span>, <span class="number">43668</span>, <span class="number">18076</span>, <span class="number">42291</span>, <span class="number">58967</span>, <span class="number">2507</span>, <span class="number">3694</span>, <span class="number">34995</span>, <span class="number">43204</span>, <span class="number">55921</span>, <span class="number">28421</span>, <span class="number">32042</span>, <span class="number">32041</span>, <span class="number">29489</span>, <span class="number">20959</span>, <span class="number">3591</span>, <span class="number">57503</span>, <span class="number">46729</span>, <span class="number">6756</span>, <span class="number">4001</span>, <span class="number">27079</span>, <span class="number">21977</span>, <span class="number">41714</span>, <span class="number">27990</span>, <span class="number">32042</span>, <span class="number">41630</span>, <span class="number">188</span>, <span class="number">58107</span>, <span class="number">56671</span>, <span class="number">37021</span>, <span class="number">55834</span>, <span class="number">28330</span>, <span class="number">30198</span>, <span class="number">14634</span>, <span class="number">26376</span>, <span class="number">54094</span>, <span class="number">9778</span>, <span class="number">47259</span>, <span class="number">52172</span>, <span class="number">413</span>, <span class="number">57322</span>, <span class="number">32947</span>, <span class="number">24301</span>, <span class="number">40103</span>, <span class="number">47805</span>, <span class="number">63460</span>, <span class="number">45027</span>, <span class="number">58687</span>, <span class="number">29368</span>, <span class="number">50857</span>, <span class="number">33177</span>, <span class="number">56299</span>, <span class="number">22794</span>, <span class="number">34339</span>, <span class="number">1352</span>, <span class="number">34550</span>, <span class="number">2809</span>, <span class="number">51218</span>, <span class="number">30240</span>, <span class="number">13605</span>, <span class="number">61472</span>, <span class="number">61264</span>, <span class="number">46662</span>, <span class="number">49333</span>, <span class="number">15947</span>, <span class="number">49470</span>, <span class="number">13229</span>, <span class="number">10793</span>, <span class="number">27146</span>, <span class="number">11497</span>, <span class="number">61800</span>, <span class="number">26086</span>, <span class="number">16123</span>, <span class="number">5144</span>, <span class="number">25205</span>, <span class="number">51901</span>, <span class="number">23717</span>, <span class="number">34252</span>, <span class="number">31111</span>, <span class="number">19235</span>, <span class="number">20281</span>, <span class="number">12791</span>, <span class="number">4478</span>, <span class="number">44855</span>, <span class="number">15024</span>, <span class="number">32110</span>, <span class="number">29904</span>, <span class="number">24536</span>, <span class="number">44187</span>, <span class="number">64477</span>, <span class="number">14582</span>, <span class="number">6203</span>, <span class="number">36710</span>, <span class="number">19553</span>, <span class="number">51294</span>, <span class="number">35794</span>, <span class="number">32941</span>, <span class="number">28169</span>, <span class="number">33228</span>, <span class="number">39747</span>, <span class="number">54759</span>, <span class="number">52243</span>, <span class="number">970</span>, <span class="number">35198</span>, <span class="number">5045</span>, <span class="number">21100</span>, <span class="number">21560</span>, <span class="number">65239</span>, <span class="number">9032</span>, <span class="number">21242</span>, <span class="number">35101</span>, <span class="number">34463</span>, <span class="number">47540</span>, <span class="number">37675</span>, <span class="number">51999</span>, <span class="number">32603</span>, <span class="number">20893</span>, <span class="number">48324</span>, <span class="number">56325</span>, <span class="number">47725</span>, <span class="number">30794</span>, <span class="number">26058</span>, <span class="number">58492</span>, <span class="number">37103</span>, <span class="number">26744</span>, <span class="number">36667</span>, <span class="number">57968</span>, <span class="number">4879</span>, <span class="number">18033</span>, <span class="number">44946</span>, <span class="number">35929</span>, <span class="number">15560</span>, <span class="number">37254</span>, <span class="number">16685</span>, <span class="number">42421</span>, <span class="number">54565</span>, <span class="number">53191</span>, <span class="number">47432</span>, <span class="number">23308</span>, <span class="number">30977</span>, <span class="number">8870</span>, <span class="number">50576</span>, <span class="number">61308</span>, <span class="number">38765</span>, <span class="number">52591</span>, <span class="number">59677</span>, <span class="number">36136</span>, <span class="number">26062</span>, <span class="number">37722</span>, <span class="number">36608</span>, <span class="number">34034</span>, <span class="number">51084</span>, <span class="number">39613</span>, <span class="number">57142</span>, <span class="number">5221</span>, <span class="number">35690</span>, <span class="number">37847</span>, <span class="number">30269</span>, <span class="number">30642</span>, <span class="number">34530</span>, <span class="number">41738</span>, <span class="number">53860</span>, <span class="number">62063</span>])</span><br><span class="line"></span><br><span class="line">b -= matrix(GF(q),ans[<span class="number">25</span>][:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">b = matrix(GF(q),b)</span><br><span class="line">s = ((A.T).solve_left(b))</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.<span class="built_in">list</span>()[::-<span class="number">1</span>]:</span><br><span class="line">    num *= q</span><br><span class="line">    num += <span class="built_in">int</span>(i)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(num))<span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> xor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flatter</span>(<span class="params">M</span>):</span><br><span class="line">    <span class="comment"># compile https://github.com/keeganryan/flatter and put it in $PATH</span></span><br><span class="line">    z = <span class="string">&quot;[[&quot;</span> + <span class="string">&quot;]\n[&quot;</span>.join(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, row)) <span class="keyword">for</span> row <span class="keyword">in</span> M) + <span class="string">&quot;]]&quot;</span></span><br><span class="line">    ret = check_output([<span class="string">&quot;flatter&quot;</span>], <span class="built_in">input</span>=z.encode())</span><br><span class="line">    <span class="keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="built_in">map</span>(<span class="built_in">int</span>, findall(<span class="string">b&quot;-?\\d+&quot;</span>, ret)))</span><br><span class="line"></span><br><span class="line">S = <span class="built_in">eval</span>(Old[<span class="string">&#x27;S&#x27;</span>])</span><br><span class="line">p = <span class="built_in">eval</span>(Old[<span class="string">&#x27;p&#x27;</span>])</span><br><span class="line"></span><br><span class="line">S = [(<span class="number">108032701991161449851369002312715580973354179025631833045125920330341444336132442627369167910196499846245375</span>, <span class="number">536708156806056194339800940453431360309948744802961091477684592805557756940577780671965778135111037727024460</span>, <span class="number">1092908539163523128210211825513206434685729471033351288310817570413536030332936913121881436496682004163218561</span>, <span class="number">319681218899114691143952029933390929281094479463796376994923082695907785812861868813064052001648547956430773</span>, <span class="number">1491469717762965437203234107675304739260134332073261473787166051408478205091597260393509384628194825690384017</span>, <span class="number">1373831114788217760848815706926510177900812033455370113335228787592380681943495789200016044894484593753473793</span>, <span class="number">721749134747261598156945357302901463050568624661297095403296472280731478071009708971832640575096673851818368</span>, <span class="number">1860163764050401633727513573627217696972941984286848985572281249857942774623702194570023403287105671073489060</span>, <span class="number">154984136256332584966107344852839904503587225305261779832283480159849061688311452179481908517673432437277241</span>, <span class="number">1561939838062660892618339034341951346106257548745672265144871883988280932734601893314037783804475701266891293</span>, <span class="number">1196621210864420273010964492926788183563258771458649486943239707342155163532184200078478415282614629395227800</span>, <span class="number">418140199208035988378436961769638766691045254816780694434194995467625611261074562013654661647238861824195187</span>, <span class="number">1566865563381296633840183260419394895718650714211270127110339192873464656390177925048966057251100807853472205</span>, <span class="number">591765854512223923173381833993118081655482569860165937279009553758243886824330666933325098097909951941773363</span>, <span class="number">1621194715625482277240801603470708569317091835690367023874070253760241984371512903868391207817859394152312002</span>, <span class="number">1853919209784660031160850930352771886269300975251430020793116172679096829612113956371814479169815876124349500</span>), (<span class="number">429873231732555141667240718587687999822857219084121172009626130310358943388885080601718909981680593606929592</span>, <span class="number">696661257924439276997527001346014167032958774864009281004980339623413640279240542438501016146643735870840200</span>, <span class="number">705077116321796552136313163950148514272481595449062490800965253320667803690854999857493736016740764844951855</span>, <span class="number">36759636718531135702894811812498288161339459911344005228982773190594494346457316668225373274587742986714394</span>, <span class="number">199617109272238821758248859791496856102696174698246601793036123989271809739396262465329953679772767556175349</span>, <span class="number">748305044943665754868843090133175750486758697161694063451745527234017037314999816420606532108167584070014650</span>, <span class="number">128713556531371763123849284738409764132111189857502611935232398816796618991882300550609541403882964822025197</span>, <span class="number">720294314730287284918332403206366390340674935575928437196947060809525523697555946855032892796717502508756244</span>, <span class="number">772169734387893586465583421665818938650077225148817036618409173104456878749345815499342643475174237365342088</span>, <span class="number">485704538257264318281616202446430879022758621467258744613654741872135241670088891039125785177734123506788864</span>, <span class="number">1049386623703990774779796004447122771056640068769982963039740391255206084894449612397763605343929886627187755</span>, <span class="number">1353791534940584582018886955223018991871124918503240637355081780112975543362795028582394093562125315687397117</span>, <span class="number">96922325977204245215966615509244830479352553017235612165102140203380652402877156933626056845508236232145474</span>, <span class="number">1491547721205063194329451603221117324835280653935458186449353861087354977686600897202090908965745312062496462</span>, <span class="number">657985609407219294871212287937819792392394243075603163798767913815753294714053803551989285171175046026021292</span>, <span class="number">1321750505787806228413096336073233274921046205768894526421731637298008087552230154604733661782305913950019758</span>), (<span class="number">1086778637488893363555155897651776469669479648114718713027748026839195873829973285681739101838980868002956926</span>, <span class="number">1603798106276423628680411507040686545422004273861779510586832810301991479137460804045160999460099332509348272</span>, <span class="number">1032596573594908905682883741312054579360541498136380107452641965336593376163298589305748612869488444382282785</span>, <span class="number">1722871599310215842537874903061856170822910917071612533538758545930106429737859314184812107888570570514436817</span>, <span class="number">888612741358369537511403754406447724251960233741122239049680647261856619404416530595695189652109281384865551</span>, <span class="number">272210091239236373983366324215208566923182631266812430374542000868950822203456368709019668399773194130115582</span>, <span class="number">998340433312163849536880381773142598561110062084017535938298827399228054526060914037893418142610051549344149</span>, <span class="number">416561209542736085163087421985348135859148177916787887874024056410059456662972557534961467733006653686852270</span>, <span class="number">12588651533966392617982800355146650879738320880541134139166541021872185894667746916875855764202920352998332</span>, <span class="number">239155589045658762407997613376641052079067501577649334701928033885172818297939378539262342760726229932149102</span>, <span class="number">1712700772384296868424330714519998133456916631419429384710641521922451158914619767158484746435503528247198201</span>, <span class="number">973460793536380374905536216000279457254227413270258748292701993424187048976790644495166672795707977339193401</span>, <span class="number">298374738199736157379773918814268251577739944514215745671393904924422066180617518790938312830200625034492336</span>, <span class="number">1084149657600176924628380982516941510886461179594063721146617624251927480674370653365654346812040758416587254</span>, <span class="number">1455486290142480470333195218741425003901972373269012398794854208385742131684661811551770676387271330305840033</span>, <span class="number">1317616016751494143133911076475028074618881097289669566979706802061473591757960790365356311174253283568545171</span>), (<span class="number">511902046345644666272587656834397557926585465865594799110299385517243337669760460710245197553437169107076465</span>, <span class="number">1308330383856237915365466642984283736169698388215802844201751246880103558237647553782829473002257961428836670</span>, <span class="number">1155713813790080552487939803696106101790310975411071299829183870773444388451785801500623912616242544692680962</span>, <span class="number">1224908750816908679021939739243701563153232819921843770261166611815141376759933697069591681336679313105729046</span>, <span class="number">452063111929995491255412240376860357091791634348346543674689097860541694702190428064670811147941474189515940</span>, <span class="number">243905199413971842010848437083883170120387967869945489727874891785274619523120687843469628111008333520281173</span>, <span class="number">218012047981557163160906385736965875971834228229268545141409957804110200175228120318440102572613964108852241</span>, <span class="number">72449390352553126882641989616711201258083728722073811669248333042484356858555217373026830154484599675673166</span>, <span class="number">1744077638109996915648335389542463821997796324708102976212623303084662144503419047177392858024029202496884056</span>, <span class="number">1562406863302128494306184675628052746736729226148455257287537831013528914148133192444813931611184513898761964</span>, <span class="number">1370809565011874548553736664131319308120113144756404775592948258246558844114463308790143707574202284352297700</span>, <span class="number">619582693502976159201142244983464537147959560539005191107859790886253434688472547727851180959778494649468347</span>, <span class="number">1439935211405443869676158269127460181688799184642555475680575584652080501734744148715596139324976221138373651</span>, <span class="number">90545837187619363498470568359275825840618056784074308739892174914423452949587594590059370188451502082946781</span>, <span class="number">482428410735918416738432316622337711063850733413329084474254412765173029163913604186737203649136909991911512</span>, <span class="number">565434332235923074300308595897761005070298372508007151970717410598099167866385478749744466175454834261310565</span>), (<span class="number">104491799965715411013561142125662618371589863368220043903880063313450364721340353778253423882215372628063760</span>, <span class="number">995180834506623008467226233521869342403315180509957213686517153423463062453889353398616389051090749137685843</span>, <span class="number">829565021944997397018498002084161459259275942202921212249684154592702614408845709428138511390580330061002946</span>, <span class="number">534327621921588874889149990448038480344105599605667358128347364437354685222101199440058722509498308377029012</span>, <span class="number">1132330464934751558500840836525167035985136508412935213102713347379055094835345081148822225633094652420795588</span>, <span class="number">450074048099726665802238274851908045566712843397793274051290281351600335456664818882443154184755479919306880</span>, <span class="number">799650301333724197381856809928105802660976183437036834013098030038374988250871838187978763436682367937424064</span>, <span class="number">186144160986287531641216966101956370994842371362686292130413967390643062283174363969086648192162770707299860</span>, <span class="number">908534860213206841686157605935550514698866576053159893786895113561156202467655121726907189182979000098180930</span>, <span class="number">45172777025563801245002587177051647086647015775396329903238685443215301743159050121404543533110450927794409</span>, <span class="number">764812910167477106544110492707407657402757978897081341870134647618267941562053074583099500973988509251503866</span>, <span class="number">725981463002339136952211983895345042866512126776025275961573441253428056712570870615698244996644709842695281</span>, <span class="number">835069084199672363874718204938215438544707590888115425961659825606911679990035477671978178973889650313585055</span>, <span class="number">1191875778351256270634615082284082976487567969444268263184598475937048145998543269062890189570330392643703428</span>, <span class="number">83818590739829464348451185348616535829221962242907104691853650713849624215858867979607119022934848835272741</span>, <span class="number">845663971836096838373625947207777962185246822459741259152503695147222855185127535612579592810063372388393425</span>), (<span class="number">730080740708716696869611500305945729582831639692674576181815669256588053495445644654846273425696381106798213</span>, <span class="number">1211401865625606862892141164094862255157602687290011401877324564094913451780788011572602838694851127273686199</span>, <span class="number">761750678069382705088989341593202296445602247339072406661067951708499074600129843633749860027539961169263821</span>, <span class="number">958488935282214627573417363369674085278816875474745585966084121728154471973830854061042022718110987983758533</span>, <span class="number">1000154070884484290117374350945928521584252400077614217868317402688302271277639661314255973413082836976423525</span>, <span class="number">452737780943126759615159828372843517970855322695027226969144987933644903011529013014573924533431359051256850</span>, <span class="number">5805599200676249107157522629732437488517848218120336534559572461215244230092132165434652875158210784360605</span>, <span class="number">1069648823350032633271251526144211153517485574227702676510205431642788090278206667447057508392521720178991564</span>, <span class="number">464345016404000464145764099641622835761022772300106935701609296071422986154529936480523330102784677377267972</span>, <span class="number">887532013540448997976095141800168404616145524208067918411064213199200246544405630618505727647904031437367765</span>, <span class="number">764896944683051632934376964111352690545726493595561980325842532869416551338993800555386022016655600198592863</span>, <span class="number">834595492951168051763345064768685082923666710575447603461271875560636579185091403924607285606904089495798238</span>, <span class="number">97747066740378772563805036049036560981941178276358675793741851520890271416061851970734762331332677029558286</span>, <span class="number">1291639614271453651479090561671509420789047119165785858217334853499388375967049382736266913449874753320474210</span>, <span class="number">801271538360332225899343978692624588068282915247341176248413743892071353524747855777605347936971072256796883</span>, <span class="number">583118453726128867307239318601314573717226612564585476755251111771273736693625440352334611064633212563236599</span>), (<span class="number">1007558687762692623401107502108785671552540294554027553075253821535448496219183688214829259558409405603001724</span>, <span class="number">82954089525210775107785196754975536343868930175076975506233700714273434584908468192257652423060749000141288</span>, <span class="number">427447460947692981480247356494758073766902779792449397588581408107838459193575936867213556781504157624146419</span>, <span class="number">1374117754996529221098536377009433889631952516241548318835190450059797631046672640835049895872866758924481496</span>, <span class="number">156038208432623159135025608204515658053054306527311311313875093413737186414935362808963926062607056191492625</span>, <span class="number">1515640320653109406794405070206667431846552825063179966889387609909437205938636205039178430345232101643703029</span>, <span class="number">1001238386683833647397450794067318370920199592087688426532041695022589977781759577351271154279661457711401139</span>, <span class="number">9286812100870995351874739983837536749531703373251036760857092007083527341690165710076770799982026349469295</span>, <span class="number">781398522411624239036136435439321625771428352649403511374119891867804110627699867915291152830172439999673301</span>, <span class="number">288390340485689855297713282913031890061650435198757756679240034152731783902546010542111152853837802947107198</span>, <span class="number">1282499438978850273310621141487984553225042108684339648738689012516484353852213933474138478066589426905792640</span>, <span class="number">1206882588472439544838766692591222446845991327532088581599851103973276440986865610584267969223571059209838017</span>, <span class="number">716745202356877068654799969764658910268422168331996123562556456205494558399089053935448159249370428497961068</span>, <span class="number">986593095310489014203641425333005980037776378229232672361107883934927730326718162983564623505526232068548290</span>, <span class="number">103772617718005675720056677269973171337468439536802857689497610845701001446000293596756576084101670871872394</span>, <span class="number">579163101347014044284264738999794759737770512095227857962630915400460939984272909004056647376161945305737747</span>), (<span class="number">288435034175969956020092056225392604045743897118720404871671986231084818165458292729640648522613169661689467</span>, <span class="number">842274139270535842409744945935128951705359842639982830775234202022927766509101371734465485773595508746113280</span>, <span class="number">700418817778098786277078342411520118692346350422606462723911114006419955720829707854379756502697131673319406</span>, <span class="number">569340337737117832121418471593902796598875993869214230094417664010492029193566188439149404136072598861993782</span>, <span class="number">311402606048606137904298548604483824215396754817621627161525397920627489469424683846450586021906438112211863</span>, <span class="number">387556851872999917791805837107172465053410831946704411441234136279016670150248420130484443911023416474044825</span>, <span class="number">926757025438911433753408433626135280565795754689622472147862347099349687223800534911582014085258437224209910</span>, <span class="number">1200730550518343100475397485248562827037665594135578219083390443869303562262076428424675489345048272331540918</span>, <span class="number">853763541787064913980724960667413489272081221293636460056478608052421032518647566798408815952868230194038338</span>, <span class="number">101239479653925653679074333030959394747942224986065362367651805089673854173857409456735028763240747273162552</span>, <span class="number">47121618175135904684072490541732295428491460965542084558472179206885868302518875995103252249901230211543525</span>, <span class="number">982857581226299143840954166901835590289581958403367749920630419874452320611289908335828280671343750955279622</span>, <span class="number">811158165015249537987500368246254094251025296798974323499510891442047224515941233490537351722658420472211406</span>, <span class="number">190329661527190452974427725241771623761097473044383743958766087362063693259351495833117766854793893313562091</span>, <span class="number">50142672419825251936694820690428751885608034385161146860936149367718248528534064819383444639850833791987235</span>, <span class="number">303074295943054006201261314482928767581154579713194119273091027835447157940166620065183762076400863876771618</span>), (<span class="number">1079372098255337688887136508726900390205048294920188450514628679918679463674406107209346812192726950726526095</span>, <span class="number">1185407402236867425841849519771446165946457212261250741849109704048981912211308244902430988525473241626691376</span>, <span class="number">841449701483451008458666118133003457345663684791358742412512477100467235117244326687250726234511967835213312</span>, <span class="number">947580146274192515572496516072653825873017616320635389497290350126027652146744723140627689652187761111324722</span>, <span class="number">119701810379427632902947235248083296107591243190851146608219622795996254840540272877119978122901453247704831</span>, <span class="number">1640347806216480803403265325130213955203137215028089484587105315192029771752510728839945151370945087147585891</span>, <span class="number">132249802108051544701535447313025681301951421902989862817119883237200082396640574742757738128092983379391192</span>, <span class="number">222015024534828263520557570979535921258670062891839524631837193227865004386250245701652729081402110107343213</span>, <span class="number">574045525239164646488552167939702566130627137278663509529342693657266762662320399075679168964197800875153680</span>, <span class="number">9484269602968566121096790600370029517627994135450856762373752676667516556085799114664479005324973494415028</span>, <span class="number">1233903272461676350245321015676982196376541150525344451565454505261564207710591321827100801836574162863320101</span>, <span class="number">1148801053084576503181167454811439762743688828522853724573620157831506900806010782322188583027710897929400855</span>, <span class="number">1215932391694160648245705883928262594648092322383337933840246087760359598672361289173906269225985279432329413</span>, <span class="number">1256312697161815430876406109440773985803220898059915842809050363551861707962446265001460104545875429415188571</span>, <span class="number">872437290854895473828669647489120707661030662446214686039744557281742237010820123691242130056373279816418223</span>, <span class="number">1152504352689745273833849365904838499734041820598612058887413417408375952316351943382602922195063490977108643</span>), (<span class="number">710963262741981151820936850518208399242203827946566243778081082652103950765186323857775548839335091162334870</span>, <span class="number">1456629029412002617034972369163460599977456975519008830537020404598366361266406883048353122402136998033965378</span>, <span class="number">16210930934876839488825850002875991819998003905202118064600427478988072592144130697157997625511415256307363</span>, <span class="number">270428172771482397506264701557858536676609324837517143183553201495149542640445267791184678417415736435998954</span>, <span class="number">849877849071009557937204357275192288430487696593090949890966075681654171368216057356945570659434491278721274</span>, <span class="number">552620920720515058560474932264018680445939377267909570543604994142303109067032086804888256059644299353469259</span>, <span class="number">1172127755569012152057329884978219429036349809157746825385122333254835103162162825165494896169153369293261353</span>, <span class="number">411671306380066471819720700550244415062425059661769246453503317934644249097679366952285018648871841314934569</span>, <span class="number">402751953198228508151317654119142703515415046161021988593791144762527354103153471097112572211022718546278586</span>, <span class="number">766801594113742202593740150497848890462669867082716753718908389103589627909820578043565509568785779049218055</span>, <span class="number">797931710812718040702146757192489993108919934337204902859533844054220052514095634360789107051511556938992653</span>, <span class="number">256266683996681594597141537434560889801561902972841661123996099001842861984074656394526155375881352817334296</span>, <span class="number">1418258257142479430747867834021373209498823909476696372006454504116466387484456504969162467214870003218548093</span>, <span class="number">404210566834668025438526175366143398913809348454169783995888818764258941987118278616050245839417646478639395</span>, <span class="number">1124315278703311203910253162758503257319860043824222656290539806527988308952238570582388061003539053283572317</span>, <span class="number">31271013457852406387457908247212294447150322908910202024391938488810830594827404698941451758903033151739305</span>), (<span class="number">548040572051344376515276589131924583544500173392618971080814926510006336050708851946164444215551993653085559</span>, <span class="number">625548909252967533735849839010612868036138065774462061438762751772756816905614389595526904873401107330945781</span>, <span class="number">1691072562255106837879679641865899852020852750546650376805631545200564107660856702442704801403013254039741569</span>, <span class="number">1202012272195706005158418331650181482011843322779113997244205689517798278846032040147415770067172225826668913</span>, <span class="number">150921370600945669819511437694954238255973349434792437308411767994329401311792429847861423651135286847713713</span>, <span class="number">1081961677217384177165919288637329442102000700465921211931830210416642976436505857583147668075896913252875900</span>, <span class="number">38632177474960713645129923487571475415432359356662267792821760890850300033591793689594738256015530177371155</span>, <span class="number">1938890600587173893505401800316209462990331410030406162509017807707491700220029026718794390924558159879325929</span>, <span class="number">1229683571480518162665771834260511788435892562017987248959417363680402504200735302566356076064181245050609719</span>, <span class="number">1413469344912570390840315618128490201700779301153932364796221898469284008600385792913106541878951550172812412</span>, <span class="number">1603029001236324174565529401277703840486413251539616667351366375992862845333710947994522282396247706689372612</span>, <span class="number">1312758180969033170349160258170632626914169138097284308377628285441990421588369514659056847472785376422032509</span>, <span class="number">420630504359244172568640650703118406520051803679165798526263777300947905179710846980565379197700977880435719</span>, <span class="number">1585809275814789433535721083967397645766740283392075276186763802353434721723652579350998943546412586002101517</span>, <span class="number">589210671463132192681719552822630237990180990772437934057045440386799228059672695104509559337510094293921851</span>, <span class="number">930311739285308931463277260997251754864363249024137932070462953287695059475197620094345118725029808434080647</span>), (<span class="number">1467336759171283069626565411462398975366496846832073813368207088887535151209170863516635004538662162471343762</span>, <span class="number">977074540452559328447962038595860262505507375287943059556072116746789487913192871746080153669811094853532543</span>, <span class="number">248650173456825688417957774461661449303260122768178786152237705032396522955301949686829800599729957124936881</span>, <span class="number">1575141265084365943986079682243623659177381136848989044089310647747968289751919614920688971461354420388159314</span>, <span class="number">787447705570464488319993501786605650852712556006717975039783792984896866011280674498846348134268287187830884</span>, <span class="number">661441381812931924846748272167364237789611518544035906523025481686525617167205320161832280314277716928159938</span>, <span class="number">713730377306644084040092474766578448161880233899851837176624863065798544631483002502432026196641108684529802</span>, <span class="number">678127349747227597169480575382795227664094828375789580467264872090685308013465629197529880718542771111962085</span>, <span class="number">713346890417527875247397732148633974225980066787252539001278528256033329879214523269733008776540235645258616</span>, <span class="number">247766390946758644831951312737583234549767619079720848362262835109239728499038516392540238454397695238919141</span>, <span class="number">222705566395366047399107473153762271285577494629225535376316438586692339782315068484531721893605469117790911</span>, <span class="number">1167884170034239946155932241100371322938666487622727711102849910832028974675686714637275598120136818289661580</span>, <span class="number">932355528178259401857913753619901059996671717365121827133186058111555002840548732397926137817560930059114770</span>, <span class="number">1002746708088820961204612547451117005094490428961711590997242233612795804195894564433549670531755192704377784</span>, <span class="number">1679333740390330063990893123547127749235201034112770813357092856319834835071400803617023235189669738802029304</span>, <span class="number">392242968045894054394410450448222234277751637234090312939171392505401592465971560873369509814497556456004427</span>), (<span class="number">992468551424268052973878019321034098395629270356898670428754992273976085327043949634823897407999881749733525</span>, <span class="number">1451715409910944943601462101816705970560866315969026142750871006351008564752030350792755878689749793232050135</span>, <span class="number">1157009611084371602570908328606510003229611538486635093673400888168806076758399348412361589040924760249605165</span>, <span class="number">973495747254748476179115555073571696121985220451730406501150178959729503505597527610925614459285006121361402</span>, <span class="number">658639350805308777150470408771425787492359455148463053354655386025849573731791445060202388386991444927738961</span>, <span class="number">1971053413102762878789808762083387327923437569500667206884595783469944908304113399563798234198010177066652742</span>, <span class="number">2115317009351535055976145874152453249874377928041776362924821587295001750589961370153217409957345893981016872</span>, <span class="number">2234391928340953996585129136832544559226500428847567089886903639518503721330552899247101854148266339819317188</span>, <span class="number">95072622447945887900832352837970706552989337874284483457123454853555569418515739360750605423996449645105107</span>, <span class="number">1875846203425953685568066514593452384199151872393675498259844146377412020045792635132008533335688986283672883</span>, <span class="number">1810914367567014038914603180161768355184164085528312813795257698944266962072856602341302516572423400651692332</span>, <span class="number">199467426284808218867281478238942162630473707920489559716102969301577891302451826382304815567177368764269462</span>, <span class="number">1702858806121853895873612873027468484445637308444414982865712291274495592467886617988854786928674988921911946</span>, <span class="number">974805688584434752190621523541453157436916884469405725317513726173004242595140529349594953961249312833707385</span>, <span class="number">1563386402665143107620951148197814309632711706132670874925320046005197489375705725978209339748911734754574512</span>, <span class="number">9176208496797520354591828022203217543780592247378582726844977716549360683455502116572757173493442942031259</span>), (<span class="number">233445330763035713906480406558126679912369584387609168775775009002471869774809156648369750200202982292450110</span>, <span class="number">1368815767827926042586853692745612271551227815728536321062147470922660524586014022932653135440512072849734316</span>, <span class="number">384817387960742369820850831236493763489057262900417346331312192757646380527152649103439831363756430268212632</span>, <span class="number">397496835668788385513140511380523318193705211763259441405319027544230424059467351506182237622329904982387715</span>, <span class="number">698110549303594315292020493881564774109817641862010152125384093754339939993582331419363730859850611879969915</span>, <span class="number">1605164779311866241282121191148498603150640021145381378570376215574622721447700807491428199428586193250231478</span>, <span class="number">183289800466565443527759722034380747076340683994766781001250154775016249854621154061869569618175611639903701</span>, <span class="number">1150055471085650022911275723850717353026238077245380241936809820048468325748232815290091481729807017284552381</span>, <span class="number">620603888284975571831631670369627892585626390577575455138594479292012594683550062832525870724842983985770747</span>, <span class="number">1141328685248613112603867626739876650489649831411725855910037151420885700357073101388703693467739668094282156</span>, <span class="number">624960745989505135902341328405609018059617712001038139854396706552761169916956343895696631019491737540425263</span>, <span class="number">563529618847514880940393862944843314371586107587203186648893576096997599582868166110130990825643297466007343</span>, <span class="number">303984049882076688174095718097426318142423827941965036899905826287812216266056955154997043369442371230205564</span>, <span class="number">1078658398740303308773443996075991099257452827614150807223915130507432012180318161902329283469259552998132456</span>, <span class="number">537873127629863133215961576717191616451542237544837768039490490426253210893390806083040946873190554913432278</span>, <span class="number">169827329251258085772690777190607029224657639816497950869244582534669264355479002364217211861513540611966251</span>), (<span class="number">1096245533475537361190288774520023066028944190947416838212035157548679351561405521968403358714145944584630399</span>, <span class="number">1279522123404803133336059116798495103535564541817111467998685969195461307732488357939481563472485600907763277</span>, <span class="number">1621837589082192223743462826999866153643367040938611577504635652882478237855735236683796485402281552828564582</span>, <span class="number">313242446386229290517631456915969842064339663908557260803068874835492915635010632958561104764179416843832161</span>, <span class="number">578485247743964493116232317100459206200994787373794324513012647234668115712570705116452853082031543244068838</span>, <span class="number">219236836922423209713975639747607435338261033480938547612396078378825597472824554607631157060224948270436605</span>, <span class="number">979376137173103622620811921408735178993536617946054941969002748851996870693909895946038600886242442551160010</span>, <span class="number">1658962387074248584465660456576639004572633758113833020219450181488960527172176749430939869777912514216215008</span>, <span class="number">918251986210568868284757564587914989414930967922138557622606681330218265588255276030855013898182774363764198</span>, <span class="number">416145177416426209139713794767532287475150472389752288032134927843857792069932225643904301155189056410493405</span>, <span class="number">1346241144466810519932765660177492393372766698799833323172412119406803241967611867883756378782484642242570189</span>, <span class="number">386044859254038630462329030959102689573511312525928529436140682252354194273696092297158967704938034048108529</span>, <span class="number">1484764098293658918774711805629994556483924451761564995022607799099721232009570720017552575816071384460602164</span>, <span class="number">1038730041745536343360704248505932016034663062624529750511404210052634999557834948325392848734950387651599858</span>, <span class="number">840891087158618754558051176285252692949387956006228734495878738266601769957106869402114856213091762226629917</span>, <span class="number">154290307227368077749870332568887647430659666317555291698382581129904308224189689828380085709625178546228569</span>), (<span class="number">957542186457140429878719718043221941900755820226325043983141960244787673981451575491224713734494596866261378</span>, <span class="number">724047722558649330730843109648231137501160718812738945124027170000449368988489179074784908592741358980048275</span>, <span class="number">859691367287711190756246276405852338601741033988752600016986903642679515575127575700961271435459772059797413</span>, <span class="number">700326697100002173963353478913834231346709568898840509699454481415437420831870839656574933271416282890802499</span>, <span class="number">1212799233481683655114268450576868631340238725268953631719891739166990447791141389709487362430025981929525475</span>, <span class="number">434223116592471574825271824097577518464718630519588487323509231423950783528915761191895287228657263954146704</span>, <span class="number">217358723385922851738144743498951415510775556931588600580907447804579013546360116371411758271211755732813673</span>, <span class="number">1298302755143305654862242351853763864348853855493677603188749853805882418947261680899385729883193441043359755</span>, <span class="number">1068567433966576654450031707464914827557285166837067988549886717564803805511104947509349083926244852733075655</span>, <span class="number">387252452536150691159164650119964238247624960830148325826046315786865241210396695679059829317531866257898261</span>, <span class="number">508839717431096857213637104691635167536835851969398382071457470260649594681556257203954946581750028844005177</span>, <span class="number">1206518168075280470635211428031620060153968523722913415228454624000108732714232864597004081584662635882607853</span>, <span class="number">648865561108057369649107548455893267620716326822663875048533849791081284682513605169317071254138817423411253</span>, <span class="number">328899686789173295020724462964824410189118431101862924515424446992402687451336506312251501354303725597785390</span>, <span class="number">328255320088054790647176014272991149866112991817392189633550739280062827106546437881018772832904512686978965</span>, <span class="number">106174800100391915811859026646635920353821529620342998961153251213838054034659090497687918002957863429970430</span>)]</span><br><span class="line">p = [<span class="number">1865995351449738305568020175407782211399961865380593201418385016005093079577037578689379305647217584283793443</span>, <span class="number">1697242394344178603938736175613701840668178871025357188746023984007769445558252186408395718968869377260650881</span>, <span class="number">2022468188670479218398009972496559844211210519349164350277452667428806390007291454178121579812497234805510519</span>, <span class="number">1834829294267612129864230457016540640249954796220974248612636878892248451710372726854088698756567786846212703</span>, <span class="number">1405518966688306890692028628042659763908744036265874596824103451217948291402053599048649577166902926927583703</span>, <span class="number">1306908379818841354811802528108647022225114028771004539878749636527088666316005228226849317157868863492789557</span>, <span class="number">1616789308818449288058724288899930420024001530178051122904515573455195995874365002006013181396637101496249781</span>, <span class="number">1253980640197082323669506507875908153359037006012151867601133670891700927532100671469629678831658698780894267</span>, <span class="number">1903682307023943435426747954611546184832717459394865637878168715826293943923848159869800611686232172365018581</span>, <span class="number">1456734579850607615224565915938092349853802772768941452254929266785318676489306434153019311316107310595518281</span>, <span class="number">2086165420905105719392664388281307744562262795619197207857331245823719830703952955965374642455778791010644509</span>, <span class="number">1726023515056798169515795231206459220148735483137609272433351313501296592963022379572602085340729076332028431</span>, <span class="number">2321143867752465622995689244649230653121108609695672723739436709976291791473903654863830072020811159448364217</span>, <span class="number">1654702076906300292576294228173753061411836852146848089290417136859589687837314338726356779964670865195828343</span>, <span class="number">1907313129296467305635718505435422104472615990939772968829964204948404573958217594528354537082412412899627617</span>, <span class="number">1320309629971476331896561625690122232816350401607709796615097327024821433804124798985230849347309403103099677</span>]</span><br><span class="line"></span><br><span class="line">T = [crt([<span class="number">0</span>] * i + [<span class="number">1</span>] + [<span class="number">0</span>] * (<span class="number">16</span> - i - <span class="number">1</span>), p) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">A = <span class="built_in">sum</span>([<span class="built_in">list</span>(t * vector(s)) <span class="keyword">for</span> t, s <span class="keyword">in</span> <span class="built_in">zip</span>(T, S)], [])</span><br><span class="line">M = block_matrix(</span><br><span class="line">    ZZ,</span><br><span class="line">    [</span><br><span class="line">        [vector([prod(p)]), vector([<span class="number">0</span>] * <span class="number">16</span> * <span class="number">16</span>)],</span><br><span class="line">        [matrix(A).T, matrix.identity(<span class="number">16</span> * <span class="number">16</span>)],</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line">K = <span class="number">2</span>**<span class="number">3840</span></span><br><span class="line">M[:, <span class="number">1</span>:] *= K</span><br><span class="line">ans = flatter(M)</span><br></pre></td></tr></table></figure><p>更新一下：后面看到了其他师傅更详细的WP <a href="https://xz.aliyun.com/t/15764">SCTF2024-Crypto - 先知社区</a></p><blockquote><p>题目给出了多个数据我们只提取主要的几个数据</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#AA,D,Per已知</span></span><br><span class="line">P = PermutationGroupElement(Per)</span><br><span class="line">PM = Matrix(GF(<span class="number">0x10001</span>),P.matrix())</span><br><span class="line">AA = A*D*PM</span><br></pre></td></tr></table></figure><blockquote><p>我们通过已知量就可以求出AA,D,PM然后就可以顺势求出A的值了</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=PM.solve_left(AA)</span><br><span class="line">A=D.solve_left(t)</span><br></pre></td></tr></table></figure><blockquote><p>接下来观察与flag相关的Young函数</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = Matrix(GF(q), m, n, <span class="keyword">lambda</span> i, j: randint(<span class="number">0</span>, q - <span class="number">1</span>))</span><br><span class="line">e = vector(choices(<span class="built_in">range</span>(<span class="number">2</span>^<span class="number">8</span>), k=m), GF(q))*Matrix(ZZ,PermutationGroupElement(SymmetricGroup(m).random_element()).matrix())</span><br><span class="line">b = (A*s) + e</span><br></pre></td></tr></table></figure><blockquote><p>这里的b和A我们都知道了，e是一个2^8下的随机误差，那么就可以转化成一个lwe的问题了。这里e还是较大的，但是A是一个625*25的矩阵，数据量多，可以尝试求解，这里直接求cvp即可。由于用上全部数据求LLL较慢，所以我爆破尝试了几组数据，发现在325情况下能够求出结果。</p><p>注意到这里求出结果后要做一个65537进制的转化，而不是常规的直接转byte</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">q = <span class="number">65537</span></span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">    <span class="built_in">sum</span>+=t[i]*(q**(i))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="number">325</span></span><br><span class="line">n = <span class="number">25</span></span><br><span class="line">q = <span class="number">65537</span></span><br><span class="line">A_values = A[:m,:n]</span><br><span class="line">b_values = b[:m]</span><br><span class="line">A = matrix(ZZ, m + n, m)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    A[i, i] = q</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        A[m + y, x] = A_values[x][y]</span><br><span class="line">lattice = IntegerLattice(A, lll_reduce=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LLL done&quot;</span>)</span><br><span class="line">gram = lattice.reduced_basis.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">target = vector(ZZ, b_values)</span><br><span class="line">res = Babai_closest_vector(lattice.reduced_basis, gram, target)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Closest Vector: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(res))</span><br><span class="line"></span><br><span class="line">R = IntegerModRing(q)</span><br><span class="line">M = Matrix(R, A_values)</span><br><span class="line">ingredients = M.solve_right(res)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Ingredients: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(ingredients))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">t=(<span class="number">58903</span>, <span class="number">2963</span>, <span class="number">39256</span>, <span class="number">25173</span>, <span class="number">62086</span>, <span class="number">5284</span>, <span class="number">45419</span>, <span class="number">10132</span>, <span class="number">50811</span>, <span class="number">41636</span>, <span class="number">42833</span>, <span class="number">8227</span>, <span class="number">63647</span>, <span class="number">10096</span>, <span class="number">28276</span>, <span class="number">29628</span>, <span class="number">54509</span>, <span class="number">9776</span>, <span class="number">44228</span>, <span class="number">39961</span>, <span class="number">48996</span>, <span class="number">60060</span>, <span class="number">43678</span>, <span class="number">34392</span>, <span class="number">21307</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t))</span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">q = <span class="number">65537</span></span><br><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">    <span class="built_in">sum</span>+=t[i]*(q**(i))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息论与编码课程实验</title>
      <link href="/post/1/"/>
      <url>/post/1/</url>
      
        <content type="html"><![CDATA[<h2 id="信源编码与信道编码综合实验"><a class="markdownIt-Anchor" href="#信源编码与信道编码综合实验"></a> 信源编码与信道编码综合实验</h2><p>实现Huffman编解码和Hamming码编解码</p><p>具体代码文件如下：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% a.m</span></span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&#x27;data.txt&#x27;</span>;</span><br><span class="line">[symbols, probabilities, selfinformation] = ProbabilityCalculation(file_path);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;信源符号：&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(symbols);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;信源符号概率：&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(probabilities);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;自信息量：&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(selfinformation);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[symbols, probabilities, selfinformation]</span> = <span class="title">ProbabilityCalculation</span><span class="params">(filename)</span></span></span><br><span class="line">    <span class="comment">% 读取文件</span></span><br><span class="line">    fileID = fopen(filename, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    content = fscanf(fileID, <span class="string">&#x27;%c&#x27;</span>);</span><br><span class="line">    fclose(fileID);</span><br><span class="line">    <span class="comment">% 统计各个符号的出现次数</span></span><br><span class="line">    uniqueSymbols = unique(content);</span><br><span class="line">    symbolCounts = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">length</span>(uniqueSymbols));</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(uniqueSymbols)</span><br><span class="line">        symbolCounts(<span class="built_in">i</span>) = sum(content == uniqueSymbols(<span class="built_in">i</span>));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">% 计算符号出现的概率</span></span><br><span class="line">    totalSymbols = sum(symbolCounts);</span><br><span class="line">    probabilities = symbolCounts / totalSymbols;</span><br><span class="line">    <span class="comment">% 计算自信息量</span></span><br><span class="line">    selfinformation = -<span class="built_in">log2</span>(probabilities);</span><br><span class="line">    <span class="comment">% 按照概率降序排列符号和概率</span></span><br><span class="line">    [sortedProbabilities, indices] = <span class="built_in">sort</span>(probabilities, <span class="string">&#x27;descend&#x27;</span>);</span><br><span class="line">    symbols = uniqueSymbols(indices);</span><br><span class="line">    probabilities = sortedProbabilities;</span><br><span class="line">    <span class="comment">% 返回排序后的符号和对应的概率</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% b.m</span></span><br><span class="line">[CODE, L_ave, yita, H] = HuffmanEncoding(probabilities);</span><br><span class="line"><span class="comment">% 展示输出码字、平均码长和编码效率</span></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;对应概率:&#x27;</span>,num2str(probabilities)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;对应码字:&#x27;</span>,CODE]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;平均码长:&#x27;</span>,num2str(L_ave)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;信源熵:&#x27;</span>,num2str(H)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;编码效率:&#x27;</span>,num2str(yita)]);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 调用新增函数进行编码并保存</span></span><br><span class="line">file_path = <span class="string">&#x27;data.txt&#x27;</span>;</span><br><span class="line">encodedFilePath = <span class="string">&#x27;encoded_data.txt&#x27;</span>;</span><br><span class="line">decodedFilePath = <span class="string">&#x27;decoded_data.txt&#x27;</span>;</span><br><span class="line">EncodeAndSave(file_path, symbols, CODE, encodedFilePath);</span><br><span class="line">HuffmanDecoding(encodedFilePath, symbols, CODE, file_path, decodedFilePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 使用Huffman码本对文件内容进行编码并保存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EncodeAndSave</span><span class="params">(file_path, symbols, CODE, encodedFilePath)</span></span></span><br><span class="line">    <span class="comment">% 读取原始文件内容</span></span><br><span class="line">    fileID = fopen(file_path, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    originalContent = fscanf(fileID, <span class="string">&#x27;%c&#x27;</span>);</span><br><span class="line">    fclose(fileID);</span><br><span class="line">    <span class="comment">% 初始化编码后的内容字符串</span></span><br><span class="line">    encodedContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">% 遍历原始内容的每个字符</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">numel</span>(originalContent)</span><br><span class="line">        <span class="comment">% 查找当前字符在symbols中的位置</span></span><br><span class="line">        symbolIndex = strfind(symbols, originalContent(<span class="built_in">i</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 如果找到，则根据索引从CODE中获取编码并添加到结果字符串</span></span><br><span class="line">        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(symbolIndex)</span><br><span class="line">            encodedContent = strcat(encodedContent, CODE&#123;symbolIndex&#125;);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            error([<span class="string">&#x27;未在符号集中找到字符：&#x27;</span>, originalContent(<span class="built_in">i</span>)]);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">% 保存编码结果到新文件</span></span><br><span class="line">    fileID = fopen(encodedFilePath, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;%s&#x27;</span>, encodedContent);</span><br><span class="line">    fclose(fileID);</span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;编码内容已保存至：&#x27;</span>, encodedFilePath]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[CODE, L_ave, yita, H]</span> = <span class="title">HuffmanEncoding</span><span class="params">(probabilities)</span></span></span><br><span class="line">    p = probabilities;</span><br><span class="line">    N = <span class="built_in">length</span>(p);</span><br><span class="line">    <span class="comment">% 将概率排序并获得单步码字排序</span></span><br><span class="line">    code = strings(N<span class="number">-1</span>,N);   <span class="comment">% 初始化单步过程的码字</span></span><br><span class="line">    reflect = <span class="built_in">zeros</span>(N<span class="number">-1</span>,N);  <span class="comment">% 初始化位置对应向量</span></span><br><span class="line">    p_SD = p;                <span class="comment">% p_SD为每次得到的概率排序数组</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N<span class="number">-1</span>              <span class="comment">% i表示排序后第几个符号</span></span><br><span class="line">        M = <span class="built_in">length</span>(p_SD);</span><br><span class="line">        [p_SD,reflect(<span class="built_in">i</span>,<span class="number">1</span>:M)] = <span class="built_in">sort</span>(p_SD,<span class="string">&#x27;descend&#x27;</span>);<span class="comment">% 将概率从大到小进行排序</span></span><br><span class="line">        code(<span class="built_in">i</span>,M) = <span class="string">&#x27;1&#x27;</span>;                             <span class="comment">% 概率最小的是1</span></span><br><span class="line">        code(<span class="built_in">i</span>,M<span class="number">-1</span>) = <span class="string">&#x27;0&#x27;</span>;                           <span class="comment">% 概率第二小的暂且定义为0</span></span><br><span class="line">        p_SD(M<span class="number">-1</span>) = p_SD(M<span class="number">-1</span>) + p_SD(M);             <span class="comment">% 将最后两个概率相加</span></span><br><span class="line">        p_SD(M) = [];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 根据位置对应向量和单步过程的码字计算对应码字</span></span><br><span class="line">    CODE = strings(<span class="number">1</span>,N); <span class="comment">% 初始化对应码字</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:N</span><br><span class="line">        column = <span class="built_in">i</span>;</span><br><span class="line">        <span class="keyword">for</span> m = <span class="number">1</span>:N<span class="number">-1</span></span><br><span class="line">            [~, column] = <span class="built_in">find</span>(reflect(m,:) == column);</span><br><span class="line">            CODE(<span class="number">1</span>,<span class="built_in">i</span>) = strcat(CODE(<span class="number">1</span>,<span class="built_in">i</span>),code(m,column));</span><br><span class="line">            <span class="comment">% 将最小的两个概率映射成一个</span></span><br><span class="line">            <span class="keyword">if</span> column == N+<span class="number">1</span>-m</span><br><span class="line">                column = column<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    CODE = reverse(CODE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 计算平均码长</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">        L(<span class="built_in">i</span>) = <span class="built_in">size</span>(char(CODE(<span class="number">1</span>,<span class="built_in">i</span>)),<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    L_ave = sum(L.*p);</span><br><span class="line">    H = sum(-p.*<span class="built_in">log2</span>(p));</span><br><span class="line">    yita = H/L_ave; <span class="comment">% 计算编码效率</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HuffmanDecoding</span><span class="params">(encodedFilePath, symbols, CODE, originalFilePath, decodedFilePath)</span></span></span><br><span class="line">    <span class="comment">% 读取编码后的文件内容</span></span><br><span class="line">    fileID = fopen(encodedFilePath, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">    encodedContent = fscanf(fileID, <span class="string">&#x27;%s&#x27;</span>);</span><br><span class="line">    fclose(fileID);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 构建逆码本</span></span><br><span class="line">    inv_CODE = cell(<span class="built_in">size</span>(CODE));</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">numel</span>(CODE)</span><br><span class="line">        inv_CODE&#123;strcmp(CODE, CODE&#123;<span class="built_in">i</span>&#125;)&#125; = symbols(<span class="built_in">i</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 解码过程</span></span><br><span class="line">    decodedContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    currentCode = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">numel</span>(encodedContent)</span><br><span class="line">        currentCode = [currentCode, encodedContent(<span class="built_in">i</span>)];</span><br><span class="line">        foundSymbol = <span class="built_in">false</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:<span class="built_in">numel</span>(CODE)</span><br><span class="line">            <span class="keyword">if</span> strcmp(currentCode, CODE&#123;<span class="built_in">j</span>&#125;)</span><br><span class="line">                decodedContent = strcat(decodedContent, inv_CODE&#123;<span class="built_in">j</span>&#125;);</span><br><span class="line">                currentCode = <span class="string">&#x27;&#x27;</span>; <span class="comment">% 重置当前码，开始下一个码的匹配</span></span><br><span class="line">                foundSymbol = <span class="built_in">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 保存解码结果到新文件</span></span><br><span class="line">    fileID = fopen(decodedFilePath, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    fprintf(fileID, <span class="string">&#x27;%s&#x27;</span>, decodedContent);</span><br><span class="line">    fclose(fileID);</span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;解码内容已保存至：&#x27;</span>, decodedFilePath]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">% 与原始文件进行对比，计算误码率</span></span><br><span class="line">    originalFileContent = fileread(originalFilePath);</span><br><span class="line">    errors = sum(strcmp(decodedContent, originalFileContent) == <span class="number">0</span>);</span><br><span class="line">    totalChars = <span class="built_in">numel</span>(decodedContent);</span><br><span class="line">    errorRate = errors / totalChars;</span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;误码率:&#x27;</span>, num2str(errorRate)]);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% c.m</span></span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 设置参数</span></span><br><span class="line">n = <span class="number">7</span>;</span><br><span class="line">k = <span class="number">4</span>;</span><br><span class="line">file_path = <span class="string">&#x27;encoded_data.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 读取文件内容</span></span><br><span class="line">fid = fopen(file_path, <span class="string">&#x27;rt&#x27;</span>); <span class="comment">% &#x27;rt&#x27; 表示读取文本文件</span></span><br><span class="line">dataStr = fscanf(fid, <span class="string">&#x27;%c&#x27;</span>); <span class="comment">% 读取全部字符</span></span><br><span class="line">fclose(fid);</span><br><span class="line"><span class="comment">% 初始化二进制向量</span></span><br><span class="line">data_bits = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">length</span>(dataStr));</span><br><span class="line"><span class="comment">% 遍历字符串，转换字符到比特</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(dataStr)</span><br><span class="line">    <span class="keyword">if</span> dataStr(<span class="built_in">i</span>) == <span class="string">&#x27;1&#x27;</span> <span class="comment">% 字符&#x27;1&#x27;转换为二进制1</span></span><br><span class="line">        data_bits(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">elseif</span> dataStr(<span class="built_in">i</span>) == <span class="string">&#x27;0&#x27;</span> <span class="comment">% 字符&#x27;0&#x27;转换为二进制0</span></span><br><span class="line">        data_bits(<span class="built_in">i</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 编码解码</span></span><br><span class="line">[Encode0, Encode_str] = HammingEncoding(data_bits, n, k);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 设定错误转移概率的变量范围</span></span><br><span class="line">berRange = <span class="number">0</span>:<span class="number">0.01</span>:<span class="number">0.1</span>; <span class="comment">% 误码率从0到10%，以0.5%为步长</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 初始化曲线数据</span></span><br><span class="line">avgBitErrorRate = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">length</span>(berRange));</span><br><span class="line">blockErrorRate = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">length</span>(berRange));</span><br><span class="line"></span><br><span class="line"><span class="comment">% 遍历每个误码率</span></span><br><span class="line"><span class="keyword">for</span> w = <span class="number">1</span>:<span class="built_in">length</span>(berRange)</span><br><span class="line">    ber = berRange(w);</span><br><span class="line">    [Encode] = simulateBSC(Encode0, ber);</span><br><span class="line">    [Decode, Decode_str] = HammingDecoding(Encode, n, k);    </span><br><span class="line">    <span class="comment">% 计算错误位置</span></span><br><span class="line">    original_bits = data_bits; <span class="comment">% 从原始数据转换而来</span></span><br><span class="line">    decoded_bits = Decode;     <span class="comment">% 从decoded_str转换而来，确保长度一致</span></span><br><span class="line">    errors_positions = [];     <span class="comment">% 初始化错误位置列表</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(original_bits)</span><br><span class="line">        <span class="keyword">if</span> original_bits(<span class="built_in">i</span>) ~= decoded_bits(<span class="built_in">i</span>)</span><br><span class="line">            errors_positions = [errors_positions, <span class="built_in">i</span>]; <span class="comment">% 记录错误位置</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">    total_errors = <span class="built_in">length</span>(errors_positions);</span><br><span class="line">    total_bits = <span class="built_in">length</span>(original_bits);</span><br><span class="line">    <span class="comment">% 计算平均误比特率</span></span><br><span class="line">    average_bit_error_rate = total_errors / total_bits;</span><br><span class="line">    <span class="comment">% 计算平均误比特率</span></span><br><span class="line">    block_error_rate = <span class="number">1</span> - (<span class="number">1</span> - average_bit_error_rate)^n;</span><br><span class="line">          </span><br><span class="line">    <span class="comment">% 记录数据</span></span><br><span class="line">    avgBitErrorRate(w) = average_bit_error_rate;</span><br><span class="line">    blockErrorRate(w) = block_error_rate;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 绘制曲线图</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 绘制曲线图</span></span><br><span class="line"><span class="built_in">plot</span>(berRange, avgBitErrorRate, <span class="string">&#x27;r-&#x27;</span>, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;Marker&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;MarkerSize&#x27;</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">% plot(berRange, blockErrorRate, &#x27;b-&#x27;, &#x27;LineWidth&#x27;, 2, &#x27;Marker&#x27;, &#x27;.&#x27;, &#x27;MarkerSize&#x27;, 6);</span></span><br><span class="line"><span class="comment">% 添加标题和轴标签</span></span><br><span class="line">title(<span class="string">&#x27;平均误比特率与二进制对称信道错误转移概率的关系&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;二进制对称信道错误转移概率 (BER)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;平均误比特率&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 设置坐标轴范围和精度</span></span><br><span class="line">xlim([<span class="number">0</span> <span class="number">0.1</span>]);</span><br><span class="line">ylim([<span class="number">0</span> <span class="number">0.1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 可以选择设置网格线</span></span><br><span class="line">grid on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 生成矩阵和校验矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[G, H]</span> = <span class="title">hamming_code_matrices</span><span class="params">(n, k)</span></span></span><br><span class="line">    [H, G, ~, ~] = hammgen(n-k);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 编码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[encoded_stream, encode_str]</span> = <span class="title">HammingEncoding</span><span class="params">(data_bits, n, k)</span></span></span><br><span class="line">    <span class="comment">% 获取生成矩阵</span></span><br><span class="line">    [G, ~] = hamming_code_matrices(n, k);</span><br><span class="line">    <span class="comment">% disp(G);</span></span><br><span class="line">    <span class="comment">% 初始化编码结果的存储</span></span><br><span class="line">    encoded_stream = [];</span><br><span class="line">    <span class="comment">% 处理整个比特流</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(data_bits) &gt;= k</span><br><span class="line">        <span class="comment">% 对当前k位数据进行编码</span></span><br><span class="line">        group = data_bits(<span class="number">1</span>:k);</span><br><span class="line">        <span class="comment">% 对当前组进行编码</span></span><br><span class="line">        encoded_group = <span class="built_in">mod</span>(group * G, <span class="number">2</span>); </span><br><span class="line">        <span class="comment">% 累积编码结果</span></span><br><span class="line">        encoded_stream = [encoded_stream, encoded_group]; </span><br><span class="line">        <span class="comment">% 移动到下一个k位数据</span></span><br><span class="line">        data_bits = data_bits(k+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    <span class="comment">% 处理剩余不足k位的数据（如果有的话）</span></span><br><span class="line">    <span class="keyword">if</span> ~<span class="built_in">isempty</span>(data_bits)</span><br><span class="line">        <span class="comment">% 补齐到k位</span></span><br><span class="line">        data_bits(<span class="keyword">end</span>+<span class="number">1</span>:k) = <span class="built_in">zeros</span>(<span class="number">1</span>, k - <span class="built_in">length</span>(data_bits));</span><br><span class="line">        group = data_bits;</span><br><span class="line">        encoded_group = <span class="built_in">mod</span>(group * G, <span class="number">2</span>);</span><br><span class="line">        encoded_stream = [encoded_stream, encoded_group];</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    <span class="comment">% 显示最终编码后的比特流</span></span><br><span class="line">    encode_str = num2str(encoded_stream);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 解码（有纠错）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[decoded_data, decoded_str]</span> = <span class="title">HammingDecoding</span><span class="params">(encoded_stream, n, k)</span>    </span></span><br><span class="line">    [~, H] = hamming_code_matrices(n, k);     </span><br><span class="line">    decoded_data = [];    </span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(encoded_stream)&gt;=n</span><br><span class="line">        encoded_group = encoded_stream(<span class="number">1</span>:n);        </span><br><span class="line">        encoded_stream = encoded_stream(n+<span class="number">1</span>:<span class="keyword">end</span>);        </span><br><span class="line">        syndrome = <span class="built_in">mod</span>(encoded_group * H&#x27;, <span class="number">2</span>);</span><br><span class="line">        mat1 = <span class="built_in">eye</span>(n);</span><br><span class="line">        errvec = mat1*H&#x27;;</span><br><span class="line">        <span class="comment">% 如果syndrome非零，则存在错误</span></span><br><span class="line">        <span class="keyword">if</span> any(syndrome)            </span><br><span class="line">            <span class="keyword">for</span> index=<span class="number">1</span>:n</span><br><span class="line">                <span class="keyword">if</span>(syndrome==errvec(index,:))</span><br><span class="line">                    encoded_group = <span class="built_in">mod</span>(encoded_group+mat1(index,:),<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span>             </span><br><span class="line">        decoded_group = encoded_group(n-k+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">        <span class="comment">% 累积解码数据，不忽略任何编码组</span></span><br><span class="line">        decoded_data = [decoded_data, decoded_group];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    decoded_data = [decoded_data, encoded_stream];</span><br><span class="line">    <span class="comment">%disp([&#x27;总纠错数：&#x27;,corrected_errors]);</span></span><br><span class="line">    <span class="comment">% 转换为字符串</span></span><br><span class="line">    decoded_str = num2str(decoded_data);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 二进制对称信道</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[transmittedStream]</span> = <span class="title">simulateBSC</span><span class="params">(encodedStream, ber)</span></span></span><br><span class="line">    <span class="comment">% 模拟二进制对称信道传输编码后的数据流</span></span><br><span class="line">    <span class="comment">% 输入参数:</span></span><br><span class="line">    <span class="comment">%   encodedStream: 编码后的二进制数据流，1xN的二进制数组</span></span><br><span class="line">    <span class="comment">%   ber: 误码率，一个介于0和1之间的标量</span></span><br><span class="line">    <span class="comment">% 输出参数:</span></span><br><span class="line">    <span class="comment">%   transmittedStream: 通过BSC传输后的数据流</span></span><br><span class="line">    <span class="comment">% 获取数据流的长度</span></span><br><span class="line">    streamLength = <span class="built_in">length</span>(encodedStream);</span><br><span class="line">    <span class="comment">% 生成随机错误分布，1表示发生错误，0表示无错误</span></span><br><span class="line">    errorVector = <span class="built_in">rand</span>(streamLength, <span class="number">1</span>) &lt; ber;</span><br><span class="line">    <span class="comment">% 应用错误到数据流</span></span><br><span class="line">    transmittedStream = encodedStream;</span><br><span class="line">    transmittedStream(errorVector == <span class="number">1</span>) = xor(encodedStream(errorVector == <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="comment">% 返回经过错误注入的传输数据流</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% d.m</span></span><br><span class="line">clear all;</span><br><span class="line">clc;</span><br><span class="line">close all;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 设置参数</span></span><br><span class="line">n = <span class="number">7</span>;</span><br><span class="line">k = <span class="number">4</span>;</span><br><span class="line">file_path = <span class="string">&#x27;encoded_data.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 读取文件内容</span></span><br><span class="line">fid = fopen(file_path, <span class="string">&#x27;rt&#x27;</span>); <span class="comment">% &#x27;rt&#x27; 表示读取文本文件</span></span><br><span class="line">dataStr = fscanf(fid, <span class="string">&#x27;%c&#x27;</span>);  <span class="comment">% 读取全部字符</span></span><br><span class="line">fclose(fid);</span><br><span class="line"><span class="comment">% 初始化二进制向量</span></span><br><span class="line">data_bits = <span class="built_in">zeros</span>(<span class="number">1</span>, <span class="built_in">length</span>(dataStr));</span><br><span class="line"><span class="comment">% 遍历字符串，转换字符到比特</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(dataStr)</span><br><span class="line">    <span class="keyword">if</span> dataStr(<span class="built_in">i</span>) == <span class="string">&#x27;1&#x27;</span> <span class="comment">% 字符&#x27;1&#x27;转换为二进制1</span></span><br><span class="line">        data_bits(<span class="built_in">i</span>) = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">elseif</span> dataStr(<span class="built_in">i</span>) == <span class="string">&#x27;0&#x27;</span> <span class="comment">% 字符&#x27;0&#x27;转换为二进制0</span></span><br><span class="line">        data_bits(<span class="built_in">i</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 编码解码</span></span><br><span class="line">[Encode, Encode_str] = HammingEncoding(data_bits, n, k);</span><br><span class="line">ber = <span class="number">0.001</span>; <span class="comment">% 设定误码率为0.1%</span></span><br><span class="line">[G, H] = hamming_code_matrices(n, k);</span><br><span class="line">[Encode] = simulateBSC(Encode, ber);</span><br><span class="line">[Decode, Decode_str] = HammingDecoding(Encode, n, k);</span><br><span class="line">decodedFilePath = <span class="string">&#x27;decoded.txt&#x27;</span>;</span><br><span class="line">fileID = fopen(decodedFilePath, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">fprintf(fileID, <span class="string">&#x27;%s&#x27;</span>, Decode_str);</span><br><span class="line">fclose(fileID);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;解码内容已保存至：&#x27;</span>, decodedFilePath]);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算错误位置</span></span><br><span class="line">original_bits = data_bits; <span class="comment">% 从原始数据转换而来</span></span><br><span class="line">decoded_bits = Decode;     <span class="comment">% 从decoded_str转换而来，确保长度一致</span></span><br><span class="line">errors_positions = [];     <span class="comment">% 初始化错误位置列表</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(original_bits)</span><br><span class="line">    <span class="keyword">if</span> original_bits(<span class="built_in">i</span>) ~= decoded_bits(<span class="built_in">i</span>)</span><br><span class="line">        errors_positions = [errors_positions, <span class="built_in">i</span>]; <span class="comment">% 记录错误位置</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="built_in">length</span>(errors_positions)</span><br><span class="line">    <span class="built_in">disp</span>([<span class="string">&#x27;第&#x27;</span>, num2str(<span class="built_in">i</span>),<span class="string">&#x27;个错误位置 &#x27;</span>, <span class="string">&#x27;: &#x27;</span>, num2str(errors_positions(<span class="built_in">i</span>))]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 平均误比特率和误组率</span></span><br><span class="line">total_errors = <span class="built_in">length</span>(errors_positions);</span><br><span class="line">total_bits = <span class="built_in">length</span>(original_bits);</span><br><span class="line">average_bit_error_rate = total_errors / total_bits;</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;平均误比特率: &#x27;</span>, num2str(average_bit_error_rate)]);</span><br><span class="line">block_error_rate = <span class="number">1</span> - (<span class="number">1</span> - average_bit_error_rate)^n;</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;误组率: &#x27;</span>, num2str(block_error_rate)]);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 生成矩阵和校验矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[G, H]</span> = <span class="title">hamming_code_matrices</span><span class="params">(n, k)</span></span></span><br><span class="line">    [H, G, ~, ~] = hammgen(n-k);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 编码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[encoded_stream, encode_str]</span> = <span class="title">HammingEncoding</span><span class="params">(data_bits, n, k)</span></span></span><br><span class="line">    <span class="comment">% 获取生成矩阵</span></span><br><span class="line">    [G, ~] = hamming_code_matrices(n, k);</span><br><span class="line">    <span class="comment">% disp(G);</span></span><br><span class="line">    <span class="comment">% 初始化编码结果的存储</span></span><br><span class="line">    encoded_stream = [];</span><br><span class="line">    <span class="comment">% 处理整个比特流</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(data_bits) &gt;= k</span><br><span class="line">        <span class="comment">% 对当前k位数据进行编码</span></span><br><span class="line">        group = data_bits(<span class="number">1</span>:k);</span><br><span class="line">        <span class="comment">% 对当前组进行编码</span></span><br><span class="line">        encoded_group = <span class="built_in">mod</span>(group * G, <span class="number">2</span>); </span><br><span class="line">        <span class="comment">% 累积编码结果</span></span><br><span class="line">        encoded_stream = [encoded_stream, encoded_group]; </span><br><span class="line">        <span class="comment">% 移动到下一个k位数据</span></span><br><span class="line">        data_bits = data_bits(k+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    <span class="comment">% 处理剩余不足k位的数据（如果有的话）</span></span><br><span class="line">    <span class="keyword">if</span> ~<span class="built_in">isempty</span>(data_bits)</span><br><span class="line">        <span class="comment">% 补齐到k位</span></span><br><span class="line">        data_bits(<span class="keyword">end</span>+<span class="number">1</span>:k) = <span class="built_in">zeros</span>(<span class="number">1</span>, k - <span class="built_in">length</span>(data_bits));</span><br><span class="line">        group = data_bits;</span><br><span class="line">        encoded_group = <span class="built_in">mod</span>(group * G, <span class="number">2</span>);</span><br><span class="line">        encoded_stream = [encoded_stream, encoded_group];</span><br><span class="line">    <span class="keyword">end</span>    </span><br><span class="line">    <span class="comment">% 显示最终编码后的比特流</span></span><br><span class="line">    encode_str = num2str(encoded_stream);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 解码（有纠错）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[decoded_data, decoded_str]</span> = <span class="title">HammingDecoding</span><span class="params">(encoded_stream, n, k)</span>    </span></span><br><span class="line">    [~, H] = hamming_code_matrices(n, k);     </span><br><span class="line">    decoded_data = [];    </span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(encoded_stream)&gt;=n</span><br><span class="line">        encoded_group = encoded_stream(<span class="number">1</span>:n);        </span><br><span class="line">        encoded_stream = encoded_stream(n+<span class="number">1</span>:<span class="keyword">end</span>);        </span><br><span class="line">        syndrome = <span class="built_in">mod</span>(encoded_group * H&#x27;, <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">disp</span>(syndrome);</span><br><span class="line">        mat1 = <span class="built_in">eye</span>(n);</span><br><span class="line">        errvec = mat1*H&#x27;;</span><br><span class="line">        <span class="comment">% 如果syndrome非零，则存在错误</span></span><br><span class="line">        <span class="keyword">if</span> any(syndrome)            </span><br><span class="line">            <span class="keyword">for</span> index=<span class="number">1</span>:n</span><br><span class="line">                <span class="keyword">if</span>(syndrome==errvec(index,:))</span><br><span class="line">                    encoded_group = <span class="built_in">mod</span>(encoded_group+mat1(index,:),<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span>             </span><br><span class="line">        decoded_group = encoded_group(n-k+<span class="number">1</span>:<span class="keyword">end</span>);</span><br><span class="line">        <span class="comment">% 累积解码数据，不忽略任何编码组</span></span><br><span class="line">        decoded_data = [decoded_data, decoded_group];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    decoded_data = [decoded_data, encoded_stream];</span><br><span class="line">    <span class="comment">%disp([&#x27;总纠错数：&#x27;,corrected_errors]);</span></span><br><span class="line">    <span class="comment">% 转换为字符串</span></span><br><span class="line">    decoded_str = num2str(decoded_data);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 二进制对称信道</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[transmittedStream]</span> = <span class="title">simulateBSC</span><span class="params">(encodedStream, ber)</span></span></span><br><span class="line">    <span class="comment">% 模拟二进制对称信道传输编码后的数据流</span></span><br><span class="line">    <span class="comment">% 输入参数:</span></span><br><span class="line">    <span class="comment">%   encodedStream: 编码后的二进制数据流，1xN的二进制数组</span></span><br><span class="line">    <span class="comment">%   ber: 误码率，一个介于0和1之间的标量</span></span><br><span class="line">    <span class="comment">% 输出参数:</span></span><br><span class="line">    <span class="comment">%   transmittedStream: 通过BSC传输后的数据流</span></span><br><span class="line">    <span class="comment">% 获取数据流的长度</span></span><br><span class="line">    streamLength = <span class="built_in">length</span>(encodedStream);</span><br><span class="line">    <span class="comment">% 生成随机错误分布，1表示发生错误，0表示无错误</span></span><br><span class="line">    errorVector = <span class="built_in">rand</span>(streamLength, <span class="number">1</span>) &lt; ber;</span><br><span class="line">    <span class="comment">% 应用错误到数据流</span></span><br><span class="line">    transmittedStream = encodedStream;</span><br><span class="line">    transmittedStream(errorVector == <span class="number">1</span>) = xor(encodedStream(errorVector == <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="comment">% 返回经过错误注入的传输数据流</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
